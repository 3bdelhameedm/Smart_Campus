
Project222.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000290a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000118  00800060  0000290a  0000299e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002f  00800178  00800178  00002ab6  2**0
                  ALLOC
  3 .stab         00002058  00000000  00000000  00002ab8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f3c  00000000  00000000  00004b10  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00005a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00005b8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00005cfc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00007945  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00008830  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  000095e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00009740  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000099cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000a19b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e0       	ldi	r30, 0x0A	; 10
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a7 3a       	cpi	r26, 0xA7	; 167
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2a 0f 	call	0x1e54	; 0x1e54 <main>
      8a:	0c 94 83 14 	jmp	0x2906	; 0x2906 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e3       	ldi	r26, 0x3F	; 63
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 3e 14 	jmp	0x287c	; 0x287c <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e3       	ldi	r24, 0x3F	; 63
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5a 14 	jmp	0x28b4	; 0x28b4 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 66 14 	jmp	0x28cc	; 0x28cc <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 4e 14 	jmp	0x289c	; 0x289c <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6a 14 	jmp	0x28d4	; 0x28d4 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <LCD_Initialize>:
#include <avr/io.h>
#include <util/delay.h>
#include "../LIB/BIT_MATH.h"
#include "../LCD/def.h"

void LCD_Initialize(void){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c6 54       	subi	r28, 0x46	; 70
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61
     b60:	fe 01       	movw	r30, r28
     b62:	ed 5b       	subi	r30, 0xBD	; 189
     b64:	ff 4f       	sbci	r31, 0xFF	; 255
     b66:	80 e0       	ldi	r24, 0x00	; 0
     b68:	90 e0       	ldi	r25, 0x00	; 0
     b6a:	a0 e8       	ldi	r26, 0x80	; 128
     b6c:	bf e3       	ldi	r27, 0x3F	; 63
     b6e:	80 83       	st	Z, r24
     b70:	91 83       	std	Z+1, r25	; 0x01
     b72:	a2 83       	std	Z+2, r26	; 0x02
     b74:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b76:	8e 01       	movw	r16, r28
     b78:	01 5c       	subi	r16, 0xC1	; 193
     b7a:	1f 4f       	sbci	r17, 0xFF	; 255
     b7c:	fe 01       	movw	r30, r28
     b7e:	ed 5b       	subi	r30, 0xBD	; 189
     b80:	ff 4f       	sbci	r31, 0xFF	; 255
     b82:	60 81       	ld	r22, Z
     b84:	71 81       	ldd	r23, Z+1	; 0x01
     b86:	82 81       	ldd	r24, Z+2	; 0x02
     b88:	93 81       	ldd	r25, Z+3	; 0x03
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	30 e0       	ldi	r19, 0x00	; 0
     b8e:	4a ef       	ldi	r20, 0xFA	; 250
     b90:	54 e4       	ldi	r21, 0x44	; 68
     b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     b96:	dc 01       	movw	r26, r24
     b98:	cb 01       	movw	r24, r22
     b9a:	f8 01       	movw	r30, r16
     b9c:	80 83       	st	Z, r24
     b9e:	91 83       	std	Z+1, r25	; 0x01
     ba0:	a2 83       	std	Z+2, r26	; 0x02
     ba2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ba4:	fe 01       	movw	r30, r28
     ba6:	ff 96       	adiw	r30, 0x3f	; 63
     ba8:	60 81       	ld	r22, Z
     baa:	71 81       	ldd	r23, Z+1	; 0x01
     bac:	82 81       	ldd	r24, Z+2	; 0x02
     bae:	93 81       	ldd	r25, Z+3	; 0x03
     bb0:	20 e0       	ldi	r18, 0x00	; 0
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e8       	ldi	r20, 0x80	; 128
     bb6:	5f e3       	ldi	r21, 0x3F	; 63
     bb8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     bbc:	88 23       	and	r24, r24
     bbe:	2c f4       	brge	.+10     	; 0xbca <LCD_Initialize+0x84>
		__ticks = 1;
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	90 e0       	ldi	r25, 0x00	; 0
     bc4:	9e af       	std	Y+62, r25	; 0x3e
     bc6:	8d af       	std	Y+61, r24	; 0x3d
     bc8:	46 c0       	rjmp	.+140    	; 0xc56 <LCD_Initialize+0x110>
	else if (__tmp > 65535)
     bca:	fe 01       	movw	r30, r28
     bcc:	ff 96       	adiw	r30, 0x3f	; 63
     bce:	60 81       	ld	r22, Z
     bd0:	71 81       	ldd	r23, Z+1	; 0x01
     bd2:	82 81       	ldd	r24, Z+2	; 0x02
     bd4:	93 81       	ldd	r25, Z+3	; 0x03
     bd6:	20 e0       	ldi	r18, 0x00	; 0
     bd8:	3f ef       	ldi	r19, 0xFF	; 255
     bda:	4f e7       	ldi	r20, 0x7F	; 127
     bdc:	57 e4       	ldi	r21, 0x47	; 71
     bde:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     be2:	18 16       	cp	r1, r24
     be4:	64 f5       	brge	.+88     	; 0xc3e <LCD_Initialize+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     be6:	fe 01       	movw	r30, r28
     be8:	ed 5b       	subi	r30, 0xBD	; 189
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	60 81       	ld	r22, Z
     bee:	71 81       	ldd	r23, Z+1	; 0x01
     bf0:	82 81       	ldd	r24, Z+2	; 0x02
     bf2:	93 81       	ldd	r25, Z+3	; 0x03
     bf4:	20 e0       	ldi	r18, 0x00	; 0
     bf6:	30 e0       	ldi	r19, 0x00	; 0
     bf8:	40 e2       	ldi	r20, 0x20	; 32
     bfa:	51 e4       	ldi	r21, 0x41	; 65
     bfc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c00:	dc 01       	movw	r26, r24
     c02:	cb 01       	movw	r24, r22
     c04:	bc 01       	movw	r22, r24
     c06:	cd 01       	movw	r24, r26
     c08:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c0c:	dc 01       	movw	r26, r24
     c0e:	cb 01       	movw	r24, r22
     c10:	9e af       	std	Y+62, r25	; 0x3e
     c12:	8d af       	std	Y+61, r24	; 0x3d
     c14:	0f c0       	rjmp	.+30     	; 0xc34 <LCD_Initialize+0xee>
     c16:	88 ec       	ldi	r24, 0xC8	; 200
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	9c af       	std	Y+60, r25	; 0x3c
     c1c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c1e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c20:	9c ad       	ldd	r25, Y+60	; 0x3c
     c22:	01 97       	sbiw	r24, 0x01	; 1
     c24:	f1 f7       	brne	.-4      	; 0xc22 <LCD_Initialize+0xdc>
     c26:	9c af       	std	Y+60, r25	; 0x3c
     c28:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c2a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c2c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c2e:	01 97       	sbiw	r24, 0x01	; 1
     c30:	9e af       	std	Y+62, r25	; 0x3e
     c32:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c34:	8d ad       	ldd	r24, Y+61	; 0x3d
     c36:	9e ad       	ldd	r25, Y+62	; 0x3e
     c38:	00 97       	sbiw	r24, 0x00	; 0
     c3a:	69 f7       	brne	.-38     	; 0xc16 <LCD_Initialize+0xd0>
     c3c:	16 c0       	rjmp	.+44     	; 0xc6a <LCD_Initialize+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c3e:	fe 01       	movw	r30, r28
     c40:	ff 96       	adiw	r30, 0x3f	; 63
     c42:	60 81       	ld	r22, Z
     c44:	71 81       	ldd	r23, Z+1	; 0x01
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     c4e:	dc 01       	movw	r26, r24
     c50:	cb 01       	movw	r24, r22
     c52:	9e af       	std	Y+62, r25	; 0x3e
     c54:	8d af       	std	Y+61, r24	; 0x3d
     c56:	8d ad       	ldd	r24, Y+61	; 0x3d
     c58:	9e ad       	ldd	r25, Y+62	; 0x3e
     c5a:	9a af       	std	Y+58, r25	; 0x3a
     c5c:	89 af       	std	Y+57, r24	; 0x39
     c5e:	89 ad       	ldd	r24, Y+57	; 0x39
     c60:	9a ad       	ldd	r25, Y+58	; 0x3a
     c62:	01 97       	sbiw	r24, 0x01	; 1
     c64:	f1 f7       	brne	.-4      	; 0xc62 <LCD_Initialize+0x11c>
     c66:	9a af       	std	Y+58, r25	; 0x3a
     c68:	89 af       	std	Y+57, r24	; 0x39
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	a8 e4       	ldi	r26, 0x48	; 72
     c70:	b2 e4       	ldi	r27, 0x42	; 66
     c72:	8d ab       	std	Y+53, r24	; 0x35
     c74:	9e ab       	std	Y+54, r25	; 0x36
     c76:	af ab       	std	Y+55, r26	; 0x37
     c78:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c7a:	6d a9       	ldd	r22, Y+53	; 0x35
     c7c:	7e a9       	ldd	r23, Y+54	; 0x36
     c7e:	8f a9       	ldd	r24, Y+55	; 0x37
     c80:	98 ad       	ldd	r25, Y+56	; 0x38
     c82:	20 e0       	ldi	r18, 0x00	; 0
     c84:	30 e0       	ldi	r19, 0x00	; 0
     c86:	4a ef       	ldi	r20, 0xFA	; 250
     c88:	54 e4       	ldi	r21, 0x44	; 68
     c8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c8e:	dc 01       	movw	r26, r24
     c90:	cb 01       	movw	r24, r22
     c92:	89 ab       	std	Y+49, r24	; 0x31
     c94:	9a ab       	std	Y+50, r25	; 0x32
     c96:	ab ab       	std	Y+51, r26	; 0x33
     c98:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c9a:	69 a9       	ldd	r22, Y+49	; 0x31
     c9c:	7a a9       	ldd	r23, Y+50	; 0x32
     c9e:	8b a9       	ldd	r24, Y+51	; 0x33
     ca0:	9c a9       	ldd	r25, Y+52	; 0x34
     ca2:	20 e0       	ldi	r18, 0x00	; 0
     ca4:	30 e0       	ldi	r19, 0x00	; 0
     ca6:	40 e8       	ldi	r20, 0x80	; 128
     ca8:	5f e3       	ldi	r21, 0x3F	; 63
     caa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     cae:	88 23       	and	r24, r24
     cb0:	2c f4       	brge	.+10     	; 0xcbc <LCD_Initialize+0x176>
		__ticks = 1;
     cb2:	81 e0       	ldi	r24, 0x01	; 1
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	98 ab       	std	Y+48, r25	; 0x30
     cb8:	8f a7       	std	Y+47, r24	; 0x2f
     cba:	3f c0       	rjmp	.+126    	; 0xd3a <LCD_Initialize+0x1f4>
	else if (__tmp > 65535)
     cbc:	69 a9       	ldd	r22, Y+49	; 0x31
     cbe:	7a a9       	ldd	r23, Y+50	; 0x32
     cc0:	8b a9       	ldd	r24, Y+51	; 0x33
     cc2:	9c a9       	ldd	r25, Y+52	; 0x34
     cc4:	20 e0       	ldi	r18, 0x00	; 0
     cc6:	3f ef       	ldi	r19, 0xFF	; 255
     cc8:	4f e7       	ldi	r20, 0x7F	; 127
     cca:	57 e4       	ldi	r21, 0x47	; 71
     ccc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     cd0:	18 16       	cp	r1, r24
     cd2:	4c f5       	brge	.+82     	; 0xd26 <LCD_Initialize+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd4:	6d a9       	ldd	r22, Y+53	; 0x35
     cd6:	7e a9       	ldd	r23, Y+54	; 0x36
     cd8:	8f a9       	ldd	r24, Y+55	; 0x37
     cda:	98 ad       	ldd	r25, Y+56	; 0x38
     cdc:	20 e0       	ldi	r18, 0x00	; 0
     cde:	30 e0       	ldi	r19, 0x00	; 0
     ce0:	40 e2       	ldi	r20, 0x20	; 32
     ce2:	51 e4       	ldi	r21, 0x41	; 65
     ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ce8:	dc 01       	movw	r26, r24
     cea:	cb 01       	movw	r24, r22
     cec:	bc 01       	movw	r22, r24
     cee:	cd 01       	movw	r24, r26
     cf0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cf4:	dc 01       	movw	r26, r24
     cf6:	cb 01       	movw	r24, r22
     cf8:	98 ab       	std	Y+48, r25	; 0x30
     cfa:	8f a7       	std	Y+47, r24	; 0x2f
     cfc:	0f c0       	rjmp	.+30     	; 0xd1c <LCD_Initialize+0x1d6>
     cfe:	88 ec       	ldi	r24, 0xC8	; 200
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	9e a7       	std	Y+46, r25	; 0x2e
     d04:	8d a7       	std	Y+45, r24	; 0x2d
     d06:	8d a5       	ldd	r24, Y+45	; 0x2d
     d08:	9e a5       	ldd	r25, Y+46	; 0x2e
     d0a:	01 97       	sbiw	r24, 0x01	; 1
     d0c:	f1 f7       	brne	.-4      	; 0xd0a <LCD_Initialize+0x1c4>
     d0e:	9e a7       	std	Y+46, r25	; 0x2e
     d10:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d12:	8f a5       	ldd	r24, Y+47	; 0x2f
     d14:	98 a9       	ldd	r25, Y+48	; 0x30
     d16:	01 97       	sbiw	r24, 0x01	; 1
     d18:	98 ab       	std	Y+48, r25	; 0x30
     d1a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d1c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d1e:	98 a9       	ldd	r25, Y+48	; 0x30
     d20:	00 97       	sbiw	r24, 0x00	; 0
     d22:	69 f7       	brne	.-38     	; 0xcfe <LCD_Initialize+0x1b8>
     d24:	14 c0       	rjmp	.+40     	; 0xd4e <LCD_Initialize+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d26:	69 a9       	ldd	r22, Y+49	; 0x31
     d28:	7a a9       	ldd	r23, Y+50	; 0x32
     d2a:	8b a9       	ldd	r24, Y+51	; 0x33
     d2c:	9c a9       	ldd	r25, Y+52	; 0x34
     d2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d32:	dc 01       	movw	r26, r24
     d34:	cb 01       	movw	r24, r22
     d36:	98 ab       	std	Y+48, r25	; 0x30
     d38:	8f a7       	std	Y+47, r24	; 0x2f
     d3a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d3c:	98 a9       	ldd	r25, Y+48	; 0x30
     d3e:	9c a7       	std	Y+44, r25	; 0x2c
     d40:	8b a7       	std	Y+43, r24	; 0x2b
     d42:	8b a5       	ldd	r24, Y+43	; 0x2b
     d44:	9c a5       	ldd	r25, Y+44	; 0x2c
     d46:	01 97       	sbiw	r24, 0x01	; 1
     d48:	f1 f7       	brne	.-4      	; 0xd46 <LCD_Initialize+0x200>
     d4a:	9c a7       	std	Y+44, r25	; 0x2c
     d4c:	8b a7       	std	Y+43, r24	; 0x2b
	    _delay_ms(1);
	    _delay_ms(50);
	    LCD_SENDCOMMAND(0b00111000); // fun set
     d4e:	88 e3       	ldi	r24, 0x38	; 56
     d50:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	90 e0       	ldi	r25, 0x00	; 0
     d58:	a0 ea       	ldi	r26, 0xA0	; 160
     d5a:	b0 e4       	ldi	r27, 0x40	; 64
     d5c:	8f a3       	std	Y+39, r24	; 0x27
     d5e:	98 a7       	std	Y+40, r25	; 0x28
     d60:	a9 a7       	std	Y+41, r26	; 0x29
     d62:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d64:	6f a1       	ldd	r22, Y+39	; 0x27
     d66:	78 a5       	ldd	r23, Y+40	; 0x28
     d68:	89 a5       	ldd	r24, Y+41	; 0x29
     d6a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d6c:	20 e0       	ldi	r18, 0x00	; 0
     d6e:	30 e0       	ldi	r19, 0x00	; 0
     d70:	4a ef       	ldi	r20, 0xFA	; 250
     d72:	54 e4       	ldi	r21, 0x44	; 68
     d74:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d78:	dc 01       	movw	r26, r24
     d7a:	cb 01       	movw	r24, r22
     d7c:	8b a3       	std	Y+35, r24	; 0x23
     d7e:	9c a3       	std	Y+36, r25	; 0x24
     d80:	ad a3       	std	Y+37, r26	; 0x25
     d82:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d84:	6b a1       	ldd	r22, Y+35	; 0x23
     d86:	7c a1       	ldd	r23, Y+36	; 0x24
     d88:	8d a1       	ldd	r24, Y+37	; 0x25
     d8a:	9e a1       	ldd	r25, Y+38	; 0x26
     d8c:	20 e0       	ldi	r18, 0x00	; 0
     d8e:	30 e0       	ldi	r19, 0x00	; 0
     d90:	40 e8       	ldi	r20, 0x80	; 128
     d92:	5f e3       	ldi	r21, 0x3F	; 63
     d94:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     d98:	88 23       	and	r24, r24
     d9a:	2c f4       	brge	.+10     	; 0xda6 <LCD_Initialize+0x260>
		__ticks = 1;
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	90 e0       	ldi	r25, 0x00	; 0
     da0:	9a a3       	std	Y+34, r25	; 0x22
     da2:	89 a3       	std	Y+33, r24	; 0x21
     da4:	3f c0       	rjmp	.+126    	; 0xe24 <LCD_Initialize+0x2de>
	else if (__tmp > 65535)
     da6:	6b a1       	ldd	r22, Y+35	; 0x23
     da8:	7c a1       	ldd	r23, Y+36	; 0x24
     daa:	8d a1       	ldd	r24, Y+37	; 0x25
     dac:	9e a1       	ldd	r25, Y+38	; 0x26
     dae:	20 e0       	ldi	r18, 0x00	; 0
     db0:	3f ef       	ldi	r19, 0xFF	; 255
     db2:	4f e7       	ldi	r20, 0x7F	; 127
     db4:	57 e4       	ldi	r21, 0x47	; 71
     db6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     dba:	18 16       	cp	r1, r24
     dbc:	4c f5       	brge	.+82     	; 0xe10 <LCD_Initialize+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dbe:	6f a1       	ldd	r22, Y+39	; 0x27
     dc0:	78 a5       	ldd	r23, Y+40	; 0x28
     dc2:	89 a5       	ldd	r24, Y+41	; 0x29
     dc4:	9a a5       	ldd	r25, Y+42	; 0x2a
     dc6:	20 e0       	ldi	r18, 0x00	; 0
     dc8:	30 e0       	ldi	r19, 0x00	; 0
     dca:	40 e2       	ldi	r20, 0x20	; 32
     dcc:	51 e4       	ldi	r21, 0x41	; 65
     dce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	bc 01       	movw	r22, r24
     dd8:	cd 01       	movw	r24, r26
     dda:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     dde:	dc 01       	movw	r26, r24
     de0:	cb 01       	movw	r24, r22
     de2:	9a a3       	std	Y+34, r25	; 0x22
     de4:	89 a3       	std	Y+33, r24	; 0x21
     de6:	0f c0       	rjmp	.+30     	; 0xe06 <LCD_Initialize+0x2c0>
     de8:	88 ec       	ldi	r24, 0xC8	; 200
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	98 a3       	std	Y+32, r25	; 0x20
     dee:	8f 8f       	std	Y+31, r24	; 0x1f
     df0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     df2:	98 a1       	ldd	r25, Y+32	; 0x20
     df4:	01 97       	sbiw	r24, 0x01	; 1
     df6:	f1 f7       	brne	.-4      	; 0xdf4 <LCD_Initialize+0x2ae>
     df8:	98 a3       	std	Y+32, r25	; 0x20
     dfa:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dfc:	89 a1       	ldd	r24, Y+33	; 0x21
     dfe:	9a a1       	ldd	r25, Y+34	; 0x22
     e00:	01 97       	sbiw	r24, 0x01	; 1
     e02:	9a a3       	std	Y+34, r25	; 0x22
     e04:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e06:	89 a1       	ldd	r24, Y+33	; 0x21
     e08:	9a a1       	ldd	r25, Y+34	; 0x22
     e0a:	00 97       	sbiw	r24, 0x00	; 0
     e0c:	69 f7       	brne	.-38     	; 0xde8 <LCD_Initialize+0x2a2>
     e0e:	14 c0       	rjmp	.+40     	; 0xe38 <LCD_Initialize+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e10:	6b a1       	ldd	r22, Y+35	; 0x23
     e12:	7c a1       	ldd	r23, Y+36	; 0x24
     e14:	8d a1       	ldd	r24, Y+37	; 0x25
     e16:	9e a1       	ldd	r25, Y+38	; 0x26
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9a a3       	std	Y+34, r25	; 0x22
     e22:	89 a3       	std	Y+33, r24	; 0x21
     e24:	89 a1       	ldd	r24, Y+33	; 0x21
     e26:	9a a1       	ldd	r25, Y+34	; 0x22
     e28:	9e 8f       	std	Y+30, r25	; 0x1e
     e2a:	8d 8f       	std	Y+29, r24	; 0x1d
     e2c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e2e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <LCD_Initialize+0x2ea>
     e34:	9e 8f       	std	Y+30, r25	; 0x1e
     e36:	8d 8f       	std	Y+29, r24	; 0x1d
	    _delay_ms(5);
	    LCD_SENDCOMMAND(0b00001111); // display on blank
     e38:	8f e0       	ldi	r24, 0x0F	; 15
     e3a:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
     e3e:	80 e0       	ldi	r24, 0x00	; 0
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	a0 ea       	ldi	r26, 0xA0	; 160
     e44:	b0 e4       	ldi	r27, 0x40	; 64
     e46:	89 8f       	std	Y+25, r24	; 0x19
     e48:	9a 8f       	std	Y+26, r25	; 0x1a
     e4a:	ab 8f       	std	Y+27, r26	; 0x1b
     e4c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e4e:	69 8d       	ldd	r22, Y+25	; 0x19
     e50:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e52:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e54:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e56:	20 e0       	ldi	r18, 0x00	; 0
     e58:	30 e0       	ldi	r19, 0x00	; 0
     e5a:	4a ef       	ldi	r20, 0xFA	; 250
     e5c:	54 e4       	ldi	r21, 0x44	; 68
     e5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e62:	dc 01       	movw	r26, r24
     e64:	cb 01       	movw	r24, r22
     e66:	8d 8b       	std	Y+21, r24	; 0x15
     e68:	9e 8b       	std	Y+22, r25	; 0x16
     e6a:	af 8b       	std	Y+23, r26	; 0x17
     e6c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e6e:	6d 89       	ldd	r22, Y+21	; 0x15
     e70:	7e 89       	ldd	r23, Y+22	; 0x16
     e72:	8f 89       	ldd	r24, Y+23	; 0x17
     e74:	98 8d       	ldd	r25, Y+24	; 0x18
     e76:	20 e0       	ldi	r18, 0x00	; 0
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	40 e8       	ldi	r20, 0x80	; 128
     e7c:	5f e3       	ldi	r21, 0x3F	; 63
     e7e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e82:	88 23       	and	r24, r24
     e84:	2c f4       	brge	.+10     	; 0xe90 <LCD_Initialize+0x34a>
		__ticks = 1;
     e86:	81 e0       	ldi	r24, 0x01	; 1
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	9c 8b       	std	Y+20, r25	; 0x14
     e8c:	8b 8b       	std	Y+19, r24	; 0x13
     e8e:	3f c0       	rjmp	.+126    	; 0xf0e <LCD_Initialize+0x3c8>
	else if (__tmp > 65535)
     e90:	6d 89       	ldd	r22, Y+21	; 0x15
     e92:	7e 89       	ldd	r23, Y+22	; 0x16
     e94:	8f 89       	ldd	r24, Y+23	; 0x17
     e96:	98 8d       	ldd	r25, Y+24	; 0x18
     e98:	20 e0       	ldi	r18, 0x00	; 0
     e9a:	3f ef       	ldi	r19, 0xFF	; 255
     e9c:	4f e7       	ldi	r20, 0x7F	; 127
     e9e:	57 e4       	ldi	r21, 0x47	; 71
     ea0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ea4:	18 16       	cp	r1, r24
     ea6:	4c f5       	brge	.+82     	; 0xefa <LCD_Initialize+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ea8:	69 8d       	ldd	r22, Y+25	; 0x19
     eaa:	7a 8d       	ldd	r23, Y+26	; 0x1a
     eac:	8b 8d       	ldd	r24, Y+27	; 0x1b
     eae:	9c 8d       	ldd	r25, Y+28	; 0x1c
     eb0:	20 e0       	ldi	r18, 0x00	; 0
     eb2:	30 e0       	ldi	r19, 0x00	; 0
     eb4:	40 e2       	ldi	r20, 0x20	; 32
     eb6:	51 e4       	ldi	r21, 0x41	; 65
     eb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	bc 01       	movw	r22, r24
     ec2:	cd 01       	movw	r24, r26
     ec4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ec8:	dc 01       	movw	r26, r24
     eca:	cb 01       	movw	r24, r22
     ecc:	9c 8b       	std	Y+20, r25	; 0x14
     ece:	8b 8b       	std	Y+19, r24	; 0x13
     ed0:	0f c0       	rjmp	.+30     	; 0xef0 <LCD_Initialize+0x3aa>
     ed2:	88 ec       	ldi	r24, 0xC8	; 200
     ed4:	90 e0       	ldi	r25, 0x00	; 0
     ed6:	9a 8b       	std	Y+18, r25	; 0x12
     ed8:	89 8b       	std	Y+17, r24	; 0x11
     eda:	89 89       	ldd	r24, Y+17	; 0x11
     edc:	9a 89       	ldd	r25, Y+18	; 0x12
     ede:	01 97       	sbiw	r24, 0x01	; 1
     ee0:	f1 f7       	brne	.-4      	; 0xede <LCD_Initialize+0x398>
     ee2:	9a 8b       	std	Y+18, r25	; 0x12
     ee4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ee6:	8b 89       	ldd	r24, Y+19	; 0x13
     ee8:	9c 89       	ldd	r25, Y+20	; 0x14
     eea:	01 97       	sbiw	r24, 0x01	; 1
     eec:	9c 8b       	std	Y+20, r25	; 0x14
     eee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ef0:	8b 89       	ldd	r24, Y+19	; 0x13
     ef2:	9c 89       	ldd	r25, Y+20	; 0x14
     ef4:	00 97       	sbiw	r24, 0x00	; 0
     ef6:	69 f7       	brne	.-38     	; 0xed2 <LCD_Initialize+0x38c>
     ef8:	14 c0       	rjmp	.+40     	; 0xf22 <LCD_Initialize+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     efa:	6d 89       	ldd	r22, Y+21	; 0x15
     efc:	7e 89       	ldd	r23, Y+22	; 0x16
     efe:	8f 89       	ldd	r24, Y+23	; 0x17
     f00:	98 8d       	ldd	r25, Y+24	; 0x18
     f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	9c 8b       	std	Y+20, r25	; 0x14
     f0c:	8b 8b       	std	Y+19, r24	; 0x13
     f0e:	8b 89       	ldd	r24, Y+19	; 0x13
     f10:	9c 89       	ldd	r25, Y+20	; 0x14
     f12:	98 8b       	std	Y+16, r25	; 0x10
     f14:	8f 87       	std	Y+15, r24	; 0x0f
     f16:	8f 85       	ldd	r24, Y+15	; 0x0f
     f18:	98 89       	ldd	r25, Y+16	; 0x10
     f1a:	01 97       	sbiw	r24, 0x01	; 1
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <LCD_Initialize+0x3d4>
     f1e:	98 8b       	std	Y+16, r25	; 0x10
     f20:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(5);
	    LCD_SENDCOMMAND(0b00000001);
     f22:	81 e0       	ldi	r24, 0x01	; 1
     f24:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	a0 e7       	ldi	r26, 0x70	; 112
     f2e:	b1 e4       	ldi	r27, 0x41	; 65
     f30:	8b 87       	std	Y+11, r24	; 0x0b
     f32:	9c 87       	std	Y+12, r25	; 0x0c
     f34:	ad 87       	std	Y+13, r26	; 0x0d
     f36:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f38:	6b 85       	ldd	r22, Y+11	; 0x0b
     f3a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f3c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f3e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	30 e0       	ldi	r19, 0x00	; 0
     f44:	4a ef       	ldi	r20, 0xFA	; 250
     f46:	54 e4       	ldi	r21, 0x44	; 68
     f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f4c:	dc 01       	movw	r26, r24
     f4e:	cb 01       	movw	r24, r22
     f50:	8f 83       	std	Y+7, r24	; 0x07
     f52:	98 87       	std	Y+8, r25	; 0x08
     f54:	a9 87       	std	Y+9, r26	; 0x09
     f56:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f58:	6f 81       	ldd	r22, Y+7	; 0x07
     f5a:	78 85       	ldd	r23, Y+8	; 0x08
     f5c:	89 85       	ldd	r24, Y+9	; 0x09
     f5e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f60:	20 e0       	ldi	r18, 0x00	; 0
     f62:	30 e0       	ldi	r19, 0x00	; 0
     f64:	40 e8       	ldi	r20, 0x80	; 128
     f66:	5f e3       	ldi	r21, 0x3F	; 63
     f68:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f6c:	88 23       	and	r24, r24
     f6e:	2c f4       	brge	.+10     	; 0xf7a <LCD_Initialize+0x434>
		__ticks = 1;
     f70:	81 e0       	ldi	r24, 0x01	; 1
     f72:	90 e0       	ldi	r25, 0x00	; 0
     f74:	9e 83       	std	Y+6, r25	; 0x06
     f76:	8d 83       	std	Y+5, r24	; 0x05
     f78:	3f c0       	rjmp	.+126    	; 0xff8 <LCD_Initialize+0x4b2>
	else if (__tmp > 65535)
     f7a:	6f 81       	ldd	r22, Y+7	; 0x07
     f7c:	78 85       	ldd	r23, Y+8	; 0x08
     f7e:	89 85       	ldd	r24, Y+9	; 0x09
     f80:	9a 85       	ldd	r25, Y+10	; 0x0a
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	3f ef       	ldi	r19, 0xFF	; 255
     f86:	4f e7       	ldi	r20, 0x7F	; 127
     f88:	57 e4       	ldi	r21, 0x47	; 71
     f8a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f8e:	18 16       	cp	r1, r24
     f90:	4c f5       	brge	.+82     	; 0xfe4 <LCD_Initialize+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	6b 85       	ldd	r22, Y+11	; 0x0b
     f94:	7c 85       	ldd	r23, Y+12	; 0x0c
     f96:	8d 85       	ldd	r24, Y+13	; 0x0d
     f98:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	40 e2       	ldi	r20, 0x20	; 32
     fa0:	51 e4       	ldi	r21, 0x41	; 65
     fa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fa6:	dc 01       	movw	r26, r24
     fa8:	cb 01       	movw	r24, r22
     faa:	bc 01       	movw	r22, r24
     fac:	cd 01       	movw	r24, r26
     fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fb2:	dc 01       	movw	r26, r24
     fb4:	cb 01       	movw	r24, r22
     fb6:	9e 83       	std	Y+6, r25	; 0x06
     fb8:	8d 83       	std	Y+5, r24	; 0x05
     fba:	0f c0       	rjmp	.+30     	; 0xfda <LCD_Initialize+0x494>
     fbc:	88 ec       	ldi	r24, 0xC8	; 200
     fbe:	90 e0       	ldi	r25, 0x00	; 0
     fc0:	9c 83       	std	Y+4, r25	; 0x04
     fc2:	8b 83       	std	Y+3, r24	; 0x03
     fc4:	8b 81       	ldd	r24, Y+3	; 0x03
     fc6:	9c 81       	ldd	r25, Y+4	; 0x04
     fc8:	01 97       	sbiw	r24, 0x01	; 1
     fca:	f1 f7       	brne	.-4      	; 0xfc8 <LCD_Initialize+0x482>
     fcc:	9c 83       	std	Y+4, r25	; 0x04
     fce:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fd0:	8d 81       	ldd	r24, Y+5	; 0x05
     fd2:	9e 81       	ldd	r25, Y+6	; 0x06
     fd4:	01 97       	sbiw	r24, 0x01	; 1
     fd6:	9e 83       	std	Y+6, r25	; 0x06
     fd8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fda:	8d 81       	ldd	r24, Y+5	; 0x05
     fdc:	9e 81       	ldd	r25, Y+6	; 0x06
     fde:	00 97       	sbiw	r24, 0x00	; 0
     fe0:	69 f7       	brne	.-38     	; 0xfbc <LCD_Initialize+0x476>
     fe2:	14 c0       	rjmp	.+40     	; 0x100c <LCD_Initialize+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fe4:	6f 81       	ldd	r22, Y+7	; 0x07
     fe6:	78 85       	ldd	r23, Y+8	; 0x08
     fe8:	89 85       	ldd	r24, Y+9	; 0x09
     fea:	9a 85       	ldd	r25, Y+10	; 0x0a
     fec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ff0:	dc 01       	movw	r26, r24
     ff2:	cb 01       	movw	r24, r22
     ff4:	9e 83       	std	Y+6, r25	; 0x06
     ff6:	8d 83       	std	Y+5, r24	; 0x05
     ff8:	8d 81       	ldd	r24, Y+5	; 0x05
     ffa:	9e 81       	ldd	r25, Y+6	; 0x06
     ffc:	9a 83       	std	Y+2, r25	; 0x02
     ffe:	89 83       	std	Y+1, r24	; 0x01
    1000:	89 81       	ldd	r24, Y+1	; 0x01
    1002:	9a 81       	ldd	r25, Y+2	; 0x02
    1004:	01 97       	sbiw	r24, 0x01	; 1
    1006:	f1 f7       	brne	.-4      	; 0x1004 <LCD_Initialize+0x4be>
    1008:	9a 83       	std	Y+2, r25	; 0x02
    100a:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(15);
}
    100c:	ca 5b       	subi	r28, 0xBA	; 186
    100e:	df 4f       	sbci	r29, 0xFF	; 255
    1010:	0f b6       	in	r0, 0x3f	; 63
    1012:	f8 94       	cli
    1014:	de bf       	out	0x3e, r29	; 62
    1016:	0f be       	out	0x3f, r0	; 63
    1018:	cd bf       	out	0x3d, r28	; 61
    101a:	cf 91       	pop	r28
    101c:	df 91       	pop	r29
    101e:	1f 91       	pop	r17
    1020:	0f 91       	pop	r16
    1022:	08 95       	ret

00001024 <LCD_SENDCOMMAND>:

void LCD_SENDCOMMAND(char command){
    1024:	df 93       	push	r29
    1026:	cf 93       	push	r28
    1028:	cd b7       	in	r28, 0x3d	; 61
    102a:	de b7       	in	r29, 0x3e	; 62
    102c:	6d 97       	sbiw	r28, 0x1d	; 29
    102e:	0f b6       	in	r0, 0x3f	; 63
    1030:	f8 94       	cli
    1032:	de bf       	out	0x3e, r29	; 62
    1034:	0f be       	out	0x3f, r0	; 63
    1036:	cd bf       	out	0x3d, r28	; 61
    1038:	8d 8f       	std	Y+29, r24	; 0x1d

	CLR_BIT(PORTB,RS);
    103a:	a8 e3       	ldi	r26, 0x38	; 56
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e8 e3       	ldi	r30, 0x38	; 56
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	8e 7f       	andi	r24, 0xFE	; 254
    1046:	8c 93       	st	X, r24
	CLR_BIT(PORTB,RW);
    1048:	a8 e3       	ldi	r26, 0x38	; 56
    104a:	b0 e0       	ldi	r27, 0x00	; 0
    104c:	e8 e3       	ldi	r30, 0x38	; 56
    104e:	f0 e0       	ldi	r31, 0x00	; 0
    1050:	80 81       	ld	r24, Z
    1052:	8d 7f       	andi	r24, 0xFD	; 253
    1054:	8c 93       	st	X, r24
    SET_BIT(PORTB,E);
    1056:	a8 e3       	ldi	r26, 0x38	; 56
    1058:	b0 e0       	ldi	r27, 0x00	; 0
    105a:	e8 e3       	ldi	r30, 0x38	; 56
    105c:	f0 e0       	ldi	r31, 0x00	; 0
    105e:	80 81       	ld	r24, Z
    1060:	84 60       	ori	r24, 0x04	; 4
    1062:	8c 93       	st	X, r24
	PORTA=command;
    1064:	eb e3       	ldi	r30, 0x3B	; 59
    1066:	f0 e0       	ldi	r31, 0x00	; 0
    1068:	8d 8d       	ldd	r24, Y+29	; 0x1d
    106a:	80 83       	st	Z, r24
	CLR_BIT(PORTB,E);
    106c:	a8 e3       	ldi	r26, 0x38	; 56
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e8 e3       	ldi	r30, 0x38	; 56
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	80 81       	ld	r24, Z
    1076:	8b 7f       	andi	r24, 0xFB	; 251
    1078:	8c 93       	st	X, r24
    107a:	80 e0       	ldi	r24, 0x00	; 0
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	a0 e8       	ldi	r26, 0x80	; 128
    1080:	bf e3       	ldi	r27, 0x3F	; 63
    1082:	89 8f       	std	Y+25, r24	; 0x19
    1084:	9a 8f       	std	Y+26, r25	; 0x1a
    1086:	ab 8f       	std	Y+27, r26	; 0x1b
    1088:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    108a:	69 8d       	ldd	r22, Y+25	; 0x19
    108c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    108e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1090:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1092:	20 e0       	ldi	r18, 0x00	; 0
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	4a ef       	ldi	r20, 0xFA	; 250
    1098:	54 e4       	ldi	r21, 0x44	; 68
    109a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	8d 8b       	std	Y+21, r24	; 0x15
    10a4:	9e 8b       	std	Y+22, r25	; 0x16
    10a6:	af 8b       	std	Y+23, r26	; 0x17
    10a8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    10aa:	6d 89       	ldd	r22, Y+21	; 0x15
    10ac:	7e 89       	ldd	r23, Y+22	; 0x16
    10ae:	8f 89       	ldd	r24, Y+23	; 0x17
    10b0:	98 8d       	ldd	r25, Y+24	; 0x18
    10b2:	20 e0       	ldi	r18, 0x00	; 0
    10b4:	30 e0       	ldi	r19, 0x00	; 0
    10b6:	40 e8       	ldi	r20, 0x80	; 128
    10b8:	5f e3       	ldi	r21, 0x3F	; 63
    10ba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    10be:	88 23       	and	r24, r24
    10c0:	2c f4       	brge	.+10     	; 0x10cc <LCD_SENDCOMMAND+0xa8>
		__ticks = 1;
    10c2:	81 e0       	ldi	r24, 0x01	; 1
    10c4:	90 e0       	ldi	r25, 0x00	; 0
    10c6:	9c 8b       	std	Y+20, r25	; 0x14
    10c8:	8b 8b       	std	Y+19, r24	; 0x13
    10ca:	3f c0       	rjmp	.+126    	; 0x114a <LCD_SENDCOMMAND+0x126>
	else if (__tmp > 65535)
    10cc:	6d 89       	ldd	r22, Y+21	; 0x15
    10ce:	7e 89       	ldd	r23, Y+22	; 0x16
    10d0:	8f 89       	ldd	r24, Y+23	; 0x17
    10d2:	98 8d       	ldd	r25, Y+24	; 0x18
    10d4:	20 e0       	ldi	r18, 0x00	; 0
    10d6:	3f ef       	ldi	r19, 0xFF	; 255
    10d8:	4f e7       	ldi	r20, 0x7F	; 127
    10da:	57 e4       	ldi	r21, 0x47	; 71
    10dc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10e0:	18 16       	cp	r1, r24
    10e2:	4c f5       	brge	.+82     	; 0x1136 <LCD_SENDCOMMAND+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10e4:	69 8d       	ldd	r22, Y+25	; 0x19
    10e6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10e8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10ea:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	30 e0       	ldi	r19, 0x00	; 0
    10f0:	40 e2       	ldi	r20, 0x20	; 32
    10f2:	51 e4       	ldi	r21, 0x41	; 65
    10f4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10f8:	dc 01       	movw	r26, r24
    10fa:	cb 01       	movw	r24, r22
    10fc:	bc 01       	movw	r22, r24
    10fe:	cd 01       	movw	r24, r26
    1100:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1104:	dc 01       	movw	r26, r24
    1106:	cb 01       	movw	r24, r22
    1108:	9c 8b       	std	Y+20, r25	; 0x14
    110a:	8b 8b       	std	Y+19, r24	; 0x13
    110c:	0f c0       	rjmp	.+30     	; 0x112c <LCD_SENDCOMMAND+0x108>
    110e:	88 ec       	ldi	r24, 0xC8	; 200
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9a 8b       	std	Y+18, r25	; 0x12
    1114:	89 8b       	std	Y+17, r24	; 0x11
    1116:	89 89       	ldd	r24, Y+17	; 0x11
    1118:	9a 89       	ldd	r25, Y+18	; 0x12
    111a:	01 97       	sbiw	r24, 0x01	; 1
    111c:	f1 f7       	brne	.-4      	; 0x111a <LCD_SENDCOMMAND+0xf6>
    111e:	9a 8b       	std	Y+18, r25	; 0x12
    1120:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1122:	8b 89       	ldd	r24, Y+19	; 0x13
    1124:	9c 89       	ldd	r25, Y+20	; 0x14
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	9c 8b       	std	Y+20, r25	; 0x14
    112a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    112c:	8b 89       	ldd	r24, Y+19	; 0x13
    112e:	9c 89       	ldd	r25, Y+20	; 0x14
    1130:	00 97       	sbiw	r24, 0x00	; 0
    1132:	69 f7       	brne	.-38     	; 0x110e <LCD_SENDCOMMAND+0xea>
    1134:	14 c0       	rjmp	.+40     	; 0x115e <LCD_SENDCOMMAND+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1136:	6d 89       	ldd	r22, Y+21	; 0x15
    1138:	7e 89       	ldd	r23, Y+22	; 0x16
    113a:	8f 89       	ldd	r24, Y+23	; 0x17
    113c:	98 8d       	ldd	r25, Y+24	; 0x18
    113e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1142:	dc 01       	movw	r26, r24
    1144:	cb 01       	movw	r24, r22
    1146:	9c 8b       	std	Y+20, r25	; 0x14
    1148:	8b 8b       	std	Y+19, r24	; 0x13
    114a:	8b 89       	ldd	r24, Y+19	; 0x13
    114c:	9c 89       	ldd	r25, Y+20	; 0x14
    114e:	98 8b       	std	Y+16, r25	; 0x10
    1150:	8f 87       	std	Y+15, r24	; 0x0f
    1152:	8f 85       	ldd	r24, Y+15	; 0x0f
    1154:	98 89       	ldd	r25, Y+16	; 0x10
    1156:	01 97       	sbiw	r24, 0x01	; 1
    1158:	f1 f7       	brne	.-4      	; 0x1156 <LCD_SENDCOMMAND+0x132>
    115a:	98 8b       	std	Y+16, r25	; 0x10
    115c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    SET_BIT(PORTB,E);
    115e:	a8 e3       	ldi	r26, 0x38	; 56
    1160:	b0 e0       	ldi	r27, 0x00	; 0
    1162:	e8 e3       	ldi	r30, 0x38	; 56
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	84 60       	ori	r24, 0x04	; 4
    116a:	8c 93       	st	X, r24
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	a0 ea       	ldi	r26, 0xA0	; 160
    1172:	b0 e4       	ldi	r27, 0x40	; 64
    1174:	8b 87       	std	Y+11, r24	; 0x0b
    1176:	9c 87       	std	Y+12, r25	; 0x0c
    1178:	ad 87       	std	Y+13, r26	; 0x0d
    117a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    117c:	6b 85       	ldd	r22, Y+11	; 0x0b
    117e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1180:	8d 85       	ldd	r24, Y+13	; 0x0d
    1182:	9e 85       	ldd	r25, Y+14	; 0x0e
    1184:	20 e0       	ldi	r18, 0x00	; 0
    1186:	30 e0       	ldi	r19, 0x00	; 0
    1188:	4a ef       	ldi	r20, 0xFA	; 250
    118a:	54 e4       	ldi	r21, 0x44	; 68
    118c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1190:	dc 01       	movw	r26, r24
    1192:	cb 01       	movw	r24, r22
    1194:	8f 83       	std	Y+7, r24	; 0x07
    1196:	98 87       	std	Y+8, r25	; 0x08
    1198:	a9 87       	std	Y+9, r26	; 0x09
    119a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    119c:	6f 81       	ldd	r22, Y+7	; 0x07
    119e:	78 85       	ldd	r23, Y+8	; 0x08
    11a0:	89 85       	ldd	r24, Y+9	; 0x09
    11a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	30 e0       	ldi	r19, 0x00	; 0
    11a8:	40 e8       	ldi	r20, 0x80	; 128
    11aa:	5f e3       	ldi	r21, 0x3F	; 63
    11ac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    11b0:	88 23       	and	r24, r24
    11b2:	2c f4       	brge	.+10     	; 0x11be <LCD_SENDCOMMAND+0x19a>
		__ticks = 1;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	9e 83       	std	Y+6, r25	; 0x06
    11ba:	8d 83       	std	Y+5, r24	; 0x05
    11bc:	3f c0       	rjmp	.+126    	; 0x123c <LCD_SENDCOMMAND+0x218>
	else if (__tmp > 65535)
    11be:	6f 81       	ldd	r22, Y+7	; 0x07
    11c0:	78 85       	ldd	r23, Y+8	; 0x08
    11c2:	89 85       	ldd	r24, Y+9	; 0x09
    11c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11c6:	20 e0       	ldi	r18, 0x00	; 0
    11c8:	3f ef       	ldi	r19, 0xFF	; 255
    11ca:	4f e7       	ldi	r20, 0x7F	; 127
    11cc:	57 e4       	ldi	r21, 0x47	; 71
    11ce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11d2:	18 16       	cp	r1, r24
    11d4:	4c f5       	brge	.+82     	; 0x1228 <LCD_SENDCOMMAND+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11da:	8d 85       	ldd	r24, Y+13	; 0x0d
    11dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11de:	20 e0       	ldi	r18, 0x00	; 0
    11e0:	30 e0       	ldi	r19, 0x00	; 0
    11e2:	40 e2       	ldi	r20, 0x20	; 32
    11e4:	51 e4       	ldi	r21, 0x41	; 65
    11e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ea:	dc 01       	movw	r26, r24
    11ec:	cb 01       	movw	r24, r22
    11ee:	bc 01       	movw	r22, r24
    11f0:	cd 01       	movw	r24, r26
    11f2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11f6:	dc 01       	movw	r26, r24
    11f8:	cb 01       	movw	r24, r22
    11fa:	9e 83       	std	Y+6, r25	; 0x06
    11fc:	8d 83       	std	Y+5, r24	; 0x05
    11fe:	0f c0       	rjmp	.+30     	; 0x121e <LCD_SENDCOMMAND+0x1fa>
    1200:	88 ec       	ldi	r24, 0xC8	; 200
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	9c 83       	std	Y+4, r25	; 0x04
    1206:	8b 83       	std	Y+3, r24	; 0x03
    1208:	8b 81       	ldd	r24, Y+3	; 0x03
    120a:	9c 81       	ldd	r25, Y+4	; 0x04
    120c:	01 97       	sbiw	r24, 0x01	; 1
    120e:	f1 f7       	brne	.-4      	; 0x120c <LCD_SENDCOMMAND+0x1e8>
    1210:	9c 83       	std	Y+4, r25	; 0x04
    1212:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1214:	8d 81       	ldd	r24, Y+5	; 0x05
    1216:	9e 81       	ldd	r25, Y+6	; 0x06
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	9e 83       	std	Y+6, r25	; 0x06
    121c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	00 97       	sbiw	r24, 0x00	; 0
    1224:	69 f7       	brne	.-38     	; 0x1200 <LCD_SENDCOMMAND+0x1dc>
    1226:	14 c0       	rjmp	.+40     	; 0x1250 <LCD_SENDCOMMAND+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1228:	6f 81       	ldd	r22, Y+7	; 0x07
    122a:	78 85       	ldd	r23, Y+8	; 0x08
    122c:	89 85       	ldd	r24, Y+9	; 0x09
    122e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1230:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1234:	dc 01       	movw	r26, r24
    1236:	cb 01       	movw	r24, r22
    1238:	9e 83       	std	Y+6, r25	; 0x06
    123a:	8d 83       	std	Y+5, r24	; 0x05
    123c:	8d 81       	ldd	r24, Y+5	; 0x05
    123e:	9e 81       	ldd	r25, Y+6	; 0x06
    1240:	9a 83       	std	Y+2, r25	; 0x02
    1242:	89 83       	std	Y+1, r24	; 0x01
    1244:	89 81       	ldd	r24, Y+1	; 0x01
    1246:	9a 81       	ldd	r25, Y+2	; 0x02
    1248:	01 97       	sbiw	r24, 0x01	; 1
    124a:	f1 f7       	brne	.-4      	; 0x1248 <LCD_SENDCOMMAND+0x224>
    124c:	9a 83       	std	Y+2, r25	; 0x02
    124e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    CLR_BIT(PORTB,E);
    1250:	a8 e3       	ldi	r26, 0x38	; 56
    1252:	b0 e0       	ldi	r27, 0x00	; 0
    1254:	e8 e3       	ldi	r30, 0x38	; 56
    1256:	f0 e0       	ldi	r31, 0x00	; 0
    1258:	80 81       	ld	r24, Z
    125a:	8b 7f       	andi	r24, 0xFB	; 251
    125c:	8c 93       	st	X, r24


}
    125e:	6d 96       	adiw	r28, 0x1d	; 29
    1260:	0f b6       	in	r0, 0x3f	; 63
    1262:	f8 94       	cli
    1264:	de bf       	out	0x3e, r29	; 62
    1266:	0f be       	out	0x3f, r0	; 63
    1268:	cd bf       	out	0x3d, r28	; 61
    126a:	cf 91       	pop	r28
    126c:	df 91       	pop	r29
    126e:	08 95       	ret

00001270 <LCD_SENDDATA>:
void LCD_SENDDATA(char data){
    1270:	df 93       	push	r29
    1272:	cf 93       	push	r28
    1274:	cd b7       	in	r28, 0x3d	; 61
    1276:	de b7       	in	r29, 0x3e	; 62
    1278:	6d 97       	sbiw	r28, 0x1d	; 29
    127a:	0f b6       	in	r0, 0x3f	; 63
    127c:	f8 94       	cli
    127e:	de bf       	out	0x3e, r29	; 62
    1280:	0f be       	out	0x3f, r0	; 63
    1282:	cd bf       	out	0x3d, r28	; 61
    1284:	8d 8f       	std	Y+29, r24	; 0x1d

	SET_BIT(PORTB,RS);
    1286:	a8 e3       	ldi	r26, 0x38	; 56
    1288:	b0 e0       	ldi	r27, 0x00	; 0
    128a:	e8 e3       	ldi	r30, 0x38	; 56
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	81 60       	ori	r24, 0x01	; 1
    1292:	8c 93       	st	X, r24
    CLR_BIT(PORTB,RW);
    1294:	a8 e3       	ldi	r26, 0x38	; 56
    1296:	b0 e0       	ldi	r27, 0x00	; 0
    1298:	e8 e3       	ldi	r30, 0x38	; 56
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	8d 7f       	andi	r24, 0xFD	; 253
    12a0:	8c 93       	st	X, r24
    SET_BIT(PORTB,E);
    12a2:	a8 e3       	ldi	r26, 0x38	; 56
    12a4:	b0 e0       	ldi	r27, 0x00	; 0
    12a6:	e8 e3       	ldi	r30, 0x38	; 56
    12a8:	f0 e0       	ldi	r31, 0x00	; 0
    12aa:	80 81       	ld	r24, Z
    12ac:	84 60       	ori	r24, 0x04	; 4
    12ae:	8c 93       	st	X, r24
	PORTA=data;
    12b0:	eb e3       	ldi	r30, 0x3B	; 59
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12b6:	80 83       	st	Z, r24
    CLR_BIT(PORTB,E);
    12b8:	a8 e3       	ldi	r26, 0x38	; 56
    12ba:	b0 e0       	ldi	r27, 0x00	; 0
    12bc:	e8 e3       	ldi	r30, 0x38	; 56
    12be:	f0 e0       	ldi	r31, 0x00	; 0
    12c0:	80 81       	ld	r24, Z
    12c2:	8b 7f       	andi	r24, 0xFB	; 251
    12c4:	8c 93       	st	X, r24
    12c6:	80 e0       	ldi	r24, 0x00	; 0
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    12ca:	a0 e8       	ldi	r26, 0x80	; 128
    12cc:	bf e3       	ldi	r27, 0x3F	; 63
    12ce:	89 8f       	std	Y+25, r24	; 0x19
    12d0:	9a 8f       	std	Y+26, r25	; 0x1a
    12d2:	ab 8f       	std	Y+27, r26	; 0x1b
    12d4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12d6:	69 8d       	ldd	r22, Y+25	; 0x19
    12d8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12da:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12dc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	4a ef       	ldi	r20, 0xFA	; 250
    12e4:	54 e4       	ldi	r21, 0x44	; 68
    12e6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ea:	dc 01       	movw	r26, r24
    12ec:	cb 01       	movw	r24, r22
    12ee:	8d 8b       	std	Y+21, r24	; 0x15
    12f0:	9e 8b       	std	Y+22, r25	; 0x16
    12f2:	af 8b       	std	Y+23, r26	; 0x17
    12f4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12f6:	6d 89       	ldd	r22, Y+21	; 0x15
    12f8:	7e 89       	ldd	r23, Y+22	; 0x16
    12fa:	8f 89       	ldd	r24, Y+23	; 0x17
    12fc:	98 8d       	ldd	r25, Y+24	; 0x18
    12fe:	20 e0       	ldi	r18, 0x00	; 0
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	40 e8       	ldi	r20, 0x80	; 128
    1304:	5f e3       	ldi	r21, 0x3F	; 63
    1306:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    130a:	88 23       	and	r24, r24
    130c:	2c f4       	brge	.+10     	; 0x1318 <LCD_SENDDATA+0xa8>
		__ticks = 1;
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	90 e0       	ldi	r25, 0x00	; 0
    1312:	9c 8b       	std	Y+20, r25	; 0x14
    1314:	8b 8b       	std	Y+19, r24	; 0x13
    1316:	3f c0       	rjmp	.+126    	; 0x1396 <LCD_SENDDATA+0x126>
	else if (__tmp > 65535)
    1318:	6d 89       	ldd	r22, Y+21	; 0x15
    131a:	7e 89       	ldd	r23, Y+22	; 0x16
    131c:	8f 89       	ldd	r24, Y+23	; 0x17
    131e:	98 8d       	ldd	r25, Y+24	; 0x18
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	3f ef       	ldi	r19, 0xFF	; 255
    1324:	4f e7       	ldi	r20, 0x7F	; 127
    1326:	57 e4       	ldi	r21, 0x47	; 71
    1328:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    132c:	18 16       	cp	r1, r24
    132e:	4c f5       	brge	.+82     	; 0x1382 <LCD_SENDDATA+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1330:	69 8d       	ldd	r22, Y+25	; 0x19
    1332:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1334:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1336:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1338:	20 e0       	ldi	r18, 0x00	; 0
    133a:	30 e0       	ldi	r19, 0x00	; 0
    133c:	40 e2       	ldi	r20, 0x20	; 32
    133e:	51 e4       	ldi	r21, 0x41	; 65
    1340:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1344:	dc 01       	movw	r26, r24
    1346:	cb 01       	movw	r24, r22
    1348:	bc 01       	movw	r22, r24
    134a:	cd 01       	movw	r24, r26
    134c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1350:	dc 01       	movw	r26, r24
    1352:	cb 01       	movw	r24, r22
    1354:	9c 8b       	std	Y+20, r25	; 0x14
    1356:	8b 8b       	std	Y+19, r24	; 0x13
    1358:	0f c0       	rjmp	.+30     	; 0x1378 <LCD_SENDDATA+0x108>
    135a:	88 ec       	ldi	r24, 0xC8	; 200
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	9a 8b       	std	Y+18, r25	; 0x12
    1360:	89 8b       	std	Y+17, r24	; 0x11
    1362:	89 89       	ldd	r24, Y+17	; 0x11
    1364:	9a 89       	ldd	r25, Y+18	; 0x12
    1366:	01 97       	sbiw	r24, 0x01	; 1
    1368:	f1 f7       	brne	.-4      	; 0x1366 <LCD_SENDDATA+0xf6>
    136a:	9a 8b       	std	Y+18, r25	; 0x12
    136c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    136e:	8b 89       	ldd	r24, Y+19	; 0x13
    1370:	9c 89       	ldd	r25, Y+20	; 0x14
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	9c 8b       	std	Y+20, r25	; 0x14
    1376:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1378:	8b 89       	ldd	r24, Y+19	; 0x13
    137a:	9c 89       	ldd	r25, Y+20	; 0x14
    137c:	00 97       	sbiw	r24, 0x00	; 0
    137e:	69 f7       	brne	.-38     	; 0x135a <LCD_SENDDATA+0xea>
    1380:	14 c0       	rjmp	.+40     	; 0x13aa <LCD_SENDDATA+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1382:	6d 89       	ldd	r22, Y+21	; 0x15
    1384:	7e 89       	ldd	r23, Y+22	; 0x16
    1386:	8f 89       	ldd	r24, Y+23	; 0x17
    1388:	98 8d       	ldd	r25, Y+24	; 0x18
    138a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    138e:	dc 01       	movw	r26, r24
    1390:	cb 01       	movw	r24, r22
    1392:	9c 8b       	std	Y+20, r25	; 0x14
    1394:	8b 8b       	std	Y+19, r24	; 0x13
    1396:	8b 89       	ldd	r24, Y+19	; 0x13
    1398:	9c 89       	ldd	r25, Y+20	; 0x14
    139a:	98 8b       	std	Y+16, r25	; 0x10
    139c:	8f 87       	std	Y+15, r24	; 0x0f
    139e:	8f 85       	ldd	r24, Y+15	; 0x0f
    13a0:	98 89       	ldd	r25, Y+16	; 0x10
    13a2:	01 97       	sbiw	r24, 0x01	; 1
    13a4:	f1 f7       	brne	.-4      	; 0x13a2 <LCD_SENDDATA+0x132>
    13a6:	98 8b       	std	Y+16, r25	; 0x10
    13a8:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    SET_BIT(PORTB,E);
    13aa:	a8 e3       	ldi	r26, 0x38	; 56
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	e8 e3       	ldi	r30, 0x38	; 56
    13b0:	f0 e0       	ldi	r31, 0x00	; 0
    13b2:	80 81       	ld	r24, Z
    13b4:	84 60       	ori	r24, 0x04	; 4
    13b6:	8c 93       	st	X, r24
    13b8:	80 e0       	ldi	r24, 0x00	; 0
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	a0 ea       	ldi	r26, 0xA0	; 160
    13be:	b0 e4       	ldi	r27, 0x40	; 64
    13c0:	8b 87       	std	Y+11, r24	; 0x0b
    13c2:	9c 87       	std	Y+12, r25	; 0x0c
    13c4:	ad 87       	std	Y+13, r26	; 0x0d
    13c6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    13cc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13ce:	9e 85       	ldd	r25, Y+14	; 0x0e
    13d0:	20 e0       	ldi	r18, 0x00	; 0
    13d2:	30 e0       	ldi	r19, 0x00	; 0
    13d4:	4a ef       	ldi	r20, 0xFA	; 250
    13d6:	54 e4       	ldi	r21, 0x44	; 68
    13d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13dc:	dc 01       	movw	r26, r24
    13de:	cb 01       	movw	r24, r22
    13e0:	8f 83       	std	Y+7, r24	; 0x07
    13e2:	98 87       	std	Y+8, r25	; 0x08
    13e4:	a9 87       	std	Y+9, r26	; 0x09
    13e6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13e8:	6f 81       	ldd	r22, Y+7	; 0x07
    13ea:	78 85       	ldd	r23, Y+8	; 0x08
    13ec:	89 85       	ldd	r24, Y+9	; 0x09
    13ee:	9a 85       	ldd	r25, Y+10	; 0x0a
    13f0:	20 e0       	ldi	r18, 0x00	; 0
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e8       	ldi	r20, 0x80	; 128
    13f6:	5f e3       	ldi	r21, 0x3F	; 63
    13f8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13fc:	88 23       	and	r24, r24
    13fe:	2c f4       	brge	.+10     	; 0x140a <LCD_SENDDATA+0x19a>
		__ticks = 1;
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	9e 83       	std	Y+6, r25	; 0x06
    1406:	8d 83       	std	Y+5, r24	; 0x05
    1408:	3f c0       	rjmp	.+126    	; 0x1488 <LCD_SENDDATA+0x218>
	else if (__tmp > 65535)
    140a:	6f 81       	ldd	r22, Y+7	; 0x07
    140c:	78 85       	ldd	r23, Y+8	; 0x08
    140e:	89 85       	ldd	r24, Y+9	; 0x09
    1410:	9a 85       	ldd	r25, Y+10	; 0x0a
    1412:	20 e0       	ldi	r18, 0x00	; 0
    1414:	3f ef       	ldi	r19, 0xFF	; 255
    1416:	4f e7       	ldi	r20, 0x7F	; 127
    1418:	57 e4       	ldi	r21, 0x47	; 71
    141a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    141e:	18 16       	cp	r1, r24
    1420:	4c f5       	brge	.+82     	; 0x1474 <LCD_SENDDATA+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1422:	6b 85       	ldd	r22, Y+11	; 0x0b
    1424:	7c 85       	ldd	r23, Y+12	; 0x0c
    1426:	8d 85       	ldd	r24, Y+13	; 0x0d
    1428:	9e 85       	ldd	r25, Y+14	; 0x0e
    142a:	20 e0       	ldi	r18, 0x00	; 0
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	40 e2       	ldi	r20, 0x20	; 32
    1430:	51 e4       	ldi	r21, 0x41	; 65
    1432:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1436:	dc 01       	movw	r26, r24
    1438:	cb 01       	movw	r24, r22
    143a:	bc 01       	movw	r22, r24
    143c:	cd 01       	movw	r24, r26
    143e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1442:	dc 01       	movw	r26, r24
    1444:	cb 01       	movw	r24, r22
    1446:	9e 83       	std	Y+6, r25	; 0x06
    1448:	8d 83       	std	Y+5, r24	; 0x05
    144a:	0f c0       	rjmp	.+30     	; 0x146a <LCD_SENDDATA+0x1fa>
    144c:	88 ec       	ldi	r24, 0xC8	; 200
    144e:	90 e0       	ldi	r25, 0x00	; 0
    1450:	9c 83       	std	Y+4, r25	; 0x04
    1452:	8b 83       	std	Y+3, r24	; 0x03
    1454:	8b 81       	ldd	r24, Y+3	; 0x03
    1456:	9c 81       	ldd	r25, Y+4	; 0x04
    1458:	01 97       	sbiw	r24, 0x01	; 1
    145a:	f1 f7       	brne	.-4      	; 0x1458 <LCD_SENDDATA+0x1e8>
    145c:	9c 83       	std	Y+4, r25	; 0x04
    145e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1460:	8d 81       	ldd	r24, Y+5	; 0x05
    1462:	9e 81       	ldd	r25, Y+6	; 0x06
    1464:	01 97       	sbiw	r24, 0x01	; 1
    1466:	9e 83       	std	Y+6, r25	; 0x06
    1468:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    146a:	8d 81       	ldd	r24, Y+5	; 0x05
    146c:	9e 81       	ldd	r25, Y+6	; 0x06
    146e:	00 97       	sbiw	r24, 0x00	; 0
    1470:	69 f7       	brne	.-38     	; 0x144c <LCD_SENDDATA+0x1dc>
    1472:	14 c0       	rjmp	.+40     	; 0x149c <LCD_SENDDATA+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1474:	6f 81       	ldd	r22, Y+7	; 0x07
    1476:	78 85       	ldd	r23, Y+8	; 0x08
    1478:	89 85       	ldd	r24, Y+9	; 0x09
    147a:	9a 85       	ldd	r25, Y+10	; 0x0a
    147c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1480:	dc 01       	movw	r26, r24
    1482:	cb 01       	movw	r24, r22
    1484:	9e 83       	std	Y+6, r25	; 0x06
    1486:	8d 83       	std	Y+5, r24	; 0x05
    1488:	8d 81       	ldd	r24, Y+5	; 0x05
    148a:	9e 81       	ldd	r25, Y+6	; 0x06
    148c:	9a 83       	std	Y+2, r25	; 0x02
    148e:	89 83       	std	Y+1, r24	; 0x01
    1490:	89 81       	ldd	r24, Y+1	; 0x01
    1492:	9a 81       	ldd	r25, Y+2	; 0x02
    1494:	01 97       	sbiw	r24, 0x01	; 1
    1496:	f1 f7       	brne	.-4      	; 0x1494 <LCD_SENDDATA+0x224>
    1498:	9a 83       	std	Y+2, r25	; 0x02
    149a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
//    CLEAR_BIT(PORTB,E);
}
    149c:	6d 96       	adiw	r28, 0x1d	; 29
    149e:	0f b6       	in	r0, 0x3f	; 63
    14a0:	f8 94       	cli
    14a2:	de bf       	out	0x3e, r29	; 62
    14a4:	0f be       	out	0x3f, r0	; 63
    14a6:	cd bf       	out	0x3d, r28	; 61
    14a8:	cf 91       	pop	r28
    14aa:	df 91       	pop	r29
    14ac:	08 95       	ret

000014ae <LCD_SENDSTR>:
void LCD_SENDSTR(char *PTR){
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <LCD_SENDSTR+0x6>
    14b4:	00 d0       	rcall	.+0      	; 0x14b6 <LCD_SENDSTR+0x8>
    14b6:	cd b7       	in	r28, 0x3d	; 61
    14b8:	de b7       	in	r29, 0x3e	; 62
    14ba:	9c 83       	std	Y+4, r25	; 0x04
    14bc:	8b 83       	std	Y+3, r24	; 0x03
	int count=0;
    14be:	1a 82       	std	Y+2, r1	; 0x02
    14c0:	19 82       	std	Y+1, r1	; 0x01
while (1){

if(PTR[count]=='\0'){
    14c2:	29 81       	ldd	r18, Y+1	; 0x01
    14c4:	3a 81       	ldd	r19, Y+2	; 0x02
    14c6:	8b 81       	ldd	r24, Y+3	; 0x03
    14c8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ca:	fc 01       	movw	r30, r24
    14cc:	e2 0f       	add	r30, r18
    14ce:	f3 1f       	adc	r31, r19
    14d0:	80 81       	ld	r24, Z
    14d2:	88 23       	and	r24, r24
    14d4:	81 f0       	breq	.+32     	; 0x14f6 <LCD_SENDSTR+0x48>

	break;
}
	LCD_SENDDATA(PTR[count]);
    14d6:	29 81       	ldd	r18, Y+1	; 0x01
    14d8:	3a 81       	ldd	r19, Y+2	; 0x02
    14da:	8b 81       	ldd	r24, Y+3	; 0x03
    14dc:	9c 81       	ldd	r25, Y+4	; 0x04
    14de:	fc 01       	movw	r30, r24
    14e0:	e2 0f       	add	r30, r18
    14e2:	f3 1f       	adc	r31, r19
    14e4:	80 81       	ld	r24, Z
    14e6:	0e 94 38 09 	call	0x1270	; 0x1270 <LCD_SENDDATA>
	count++;
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	01 96       	adiw	r24, 0x01	; 1
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
    14f4:	e6 cf       	rjmp	.-52     	; 0x14c2 <LCD_SENDSTR+0x14>

}

}
    14f6:	0f 90       	pop	r0
    14f8:	0f 90       	pop	r0
    14fa:	0f 90       	pop	r0
    14fc:	0f 90       	pop	r0
    14fe:	cf 91       	pop	r28
    1500:	df 91       	pop	r29
    1502:	08 95       	ret

00001504 <LCD_SET_COURSER>:

void LCD_SET_COURSER(unsigned char X_POSITION,unsigned char Y_POSITION)
{
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	00 d0       	rcall	.+0      	; 0x150a <LCD_SET_COURSER+0x6>
    150a:	00 d0       	rcall	.+0      	; 0x150c <LCD_SET_COURSER+0x8>
    150c:	cd b7       	in	r28, 0x3d	; 61
    150e:	de b7       	in	r29, 0x3e	; 62
    1510:	8b 83       	std	Y+3, r24	; 0x03
    1512:	6c 83       	std	Y+4, r22	; 0x04
	int ADD;
	if(X_POSITION==0){
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	88 23       	and	r24, r24
    1518:	29 f4       	brne	.+10     	; 0x1524 <LCD_SET_COURSER+0x20>
		ADD=0X80;
    151a:	80 e8       	ldi	r24, 0x80	; 128
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
    1522:	07 c0       	rjmp	.+14     	; 0x1532 <LCD_SET_COURSER+0x2e>
	}
	else if (X_POSITION==1){
    1524:	8b 81       	ldd	r24, Y+3	; 0x03
    1526:	81 30       	cpi	r24, 0x01	; 1
    1528:	21 f4       	brne	.+8      	; 0x1532 <LCD_SET_COURSER+0x2e>
		ADD=0XC0;
    152a:	80 ec       	ldi	r24, 0xC0	; 192
    152c:	90 e0       	ldi	r25, 0x00	; 0
    152e:	9a 83       	std	Y+2, r25	; 0x02
    1530:	89 83       	std	Y+1, r24	; 0x01
	}
	if (Y_POSITION<16){
    1532:	8c 81       	ldd	r24, Y+4	; 0x04
    1534:	80 31       	cpi	r24, 0x10	; 16
    1536:	48 f4       	brcc	.+18     	; 0x154a <LCD_SET_COURSER+0x46>

				ADD +=Y_POSITION;
    1538:	8c 81       	ldd	r24, Y+4	; 0x04
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	89 81       	ldd	r24, Y+1	; 0x01
    1540:	9a 81       	ldd	r25, Y+2	; 0x02
    1542:	82 0f       	add	r24, r18
    1544:	93 1f       	adc	r25, r19
    1546:	9a 83       	std	Y+2, r25	; 0x02
    1548:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_SENDCOMMAND(ADD);
    154a:	89 81       	ldd	r24, Y+1	; 0x01
    154c:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>


}
    1550:	0f 90       	pop	r0
    1552:	0f 90       	pop	r0
    1554:	0f 90       	pop	r0
    1556:	0f 90       	pop	r0
    1558:	cf 91       	pop	r28
    155a:	df 91       	pop	r29
    155c:	08 95       	ret

0000155e <DIO_SetPortDirection>:
#include "../LIB/BIT_MATH.h"
#include "DIO_Types.h"
#include "DIO_REG.h"

void DIO_SetPortDirection(DIO_PORTID port_ID ,DIO_DIRECTION direction)
{
    155e:	df 93       	push	r29
    1560:	cf 93       	push	r28
    1562:	00 d0       	rcall	.+0      	; 0x1564 <DIO_SetPortDirection+0x6>
    1564:	00 d0       	rcall	.+0      	; 0x1566 <DIO_SetPortDirection+0x8>
    1566:	00 d0       	rcall	.+0      	; 0x1568 <DIO_SetPortDirection+0xa>
    1568:	cd b7       	in	r28, 0x3d	; 61
    156a:	de b7       	in	r29, 0x3e	; 62
    156c:	89 83       	std	Y+1, r24	; 0x01
    156e:	6a 83       	std	Y+2, r22	; 0x02

if (output==direction){
    1570:	8a 81       	ldd	r24, Y+2	; 0x02
    1572:	81 30       	cpi	r24, 0x01	; 1
    1574:	99 f5       	brne	.+102    	; 0x15dc <DIO_SetPortDirection+0x7e>
	switch(port_ID){
    1576:	89 81       	ldd	r24, Y+1	; 0x01
    1578:	28 2f       	mov	r18, r24
    157a:	30 e0       	ldi	r19, 0x00	; 0
    157c:	3e 83       	std	Y+6, r19	; 0x06
    157e:	2d 83       	std	Y+5, r18	; 0x05
    1580:	8d 81       	ldd	r24, Y+5	; 0x05
    1582:	9e 81       	ldd	r25, Y+6	; 0x06
    1584:	81 30       	cpi	r24, 0x01	; 1
    1586:	91 05       	cpc	r25, r1
    1588:	d1 f0       	breq	.+52     	; 0x15be <DIO_SetPortDirection+0x60>
    158a:	2d 81       	ldd	r18, Y+5	; 0x05
    158c:	3e 81       	ldd	r19, Y+6	; 0x06
    158e:	22 30       	cpi	r18, 0x02	; 2
    1590:	31 05       	cpc	r19, r1
    1592:	2c f4       	brge	.+10     	; 0x159e <DIO_SetPortDirection+0x40>
    1594:	8d 81       	ldd	r24, Y+5	; 0x05
    1596:	9e 81       	ldd	r25, Y+6	; 0x06
    1598:	00 97       	sbiw	r24, 0x00	; 0
    159a:	61 f0       	breq	.+24     	; 0x15b4 <DIO_SetPortDirection+0x56>
    159c:	50 c0       	rjmp	.+160    	; 0x163e <DIO_SetPortDirection+0xe0>
    159e:	2d 81       	ldd	r18, Y+5	; 0x05
    15a0:	3e 81       	ldd	r19, Y+6	; 0x06
    15a2:	22 30       	cpi	r18, 0x02	; 2
    15a4:	31 05       	cpc	r19, r1
    15a6:	81 f0       	breq	.+32     	; 0x15c8 <DIO_SetPortDirection+0x6a>
    15a8:	8d 81       	ldd	r24, Y+5	; 0x05
    15aa:	9e 81       	ldd	r25, Y+6	; 0x06
    15ac:	83 30       	cpi	r24, 0x03	; 3
    15ae:	91 05       	cpc	r25, r1
    15b0:	81 f0       	breq	.+32     	; 0x15d2 <DIO_SetPortDirection+0x74>
    15b2:	45 c0       	rjmp	.+138    	; 0x163e <DIO_SetPortDirection+0xe0>

	case portA: DDRA_REG = 0xFF; break;
    15b4:	ea e3       	ldi	r30, 0x3A	; 58
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	8f ef       	ldi	r24, 0xFF	; 255
    15ba:	80 83       	st	Z, r24
    15bc:	40 c0       	rjmp	.+128    	; 0x163e <DIO_SetPortDirection+0xe0>
	case portB: DDRB_REG = 0xFF; break;
    15be:	e7 e3       	ldi	r30, 0x37	; 55
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	8f ef       	ldi	r24, 0xFF	; 255
    15c4:	80 83       	st	Z, r24
    15c6:	3b c0       	rjmp	.+118    	; 0x163e <DIO_SetPortDirection+0xe0>
	case portC: DDRC_REG = 0xFF; break;
    15c8:	e4 e3       	ldi	r30, 0x34	; 52
    15ca:	f0 e0       	ldi	r31, 0x00	; 0
    15cc:	8f ef       	ldi	r24, 0xFF	; 255
    15ce:	80 83       	st	Z, r24
    15d0:	36 c0       	rjmp	.+108    	; 0x163e <DIO_SetPortDirection+0xe0>
	case portD: DDRD_REG = 0xFF; break;
    15d2:	e1 e3       	ldi	r30, 0x31	; 49
    15d4:	f0 e0       	ldi	r31, 0x00	; 0
    15d6:	8f ef       	ldi	r24, 0xFF	; 255
    15d8:	80 83       	st	Z, r24
    15da:	31 c0       	rjmp	.+98     	; 0x163e <DIO_SetPortDirection+0xe0>
	}
	}
	else if (input==direction){
    15dc:	8a 81       	ldd	r24, Y+2	; 0x02
    15de:	88 23       	and	r24, r24
    15e0:	71 f5       	brne	.+92     	; 0x163e <DIO_SetPortDirection+0xe0>
		switch(port_ID){
    15e2:	89 81       	ldd	r24, Y+1	; 0x01
    15e4:	28 2f       	mov	r18, r24
    15e6:	30 e0       	ldi	r19, 0x00	; 0
    15e8:	3c 83       	std	Y+4, r19	; 0x04
    15ea:	2b 83       	std	Y+3, r18	; 0x03
    15ec:	8b 81       	ldd	r24, Y+3	; 0x03
    15ee:	9c 81       	ldd	r25, Y+4	; 0x04
    15f0:	81 30       	cpi	r24, 0x01	; 1
    15f2:	91 05       	cpc	r25, r1
    15f4:	c9 f0       	breq	.+50     	; 0x1628 <DIO_SetPortDirection+0xca>
    15f6:	2b 81       	ldd	r18, Y+3	; 0x03
    15f8:	3c 81       	ldd	r19, Y+4	; 0x04
    15fa:	22 30       	cpi	r18, 0x02	; 2
    15fc:	31 05       	cpc	r19, r1
    15fe:	2c f4       	brge	.+10     	; 0x160a <DIO_SetPortDirection+0xac>
    1600:	8b 81       	ldd	r24, Y+3	; 0x03
    1602:	9c 81       	ldd	r25, Y+4	; 0x04
    1604:	00 97       	sbiw	r24, 0x00	; 0
    1606:	61 f0       	breq	.+24     	; 0x1620 <DIO_SetPortDirection+0xc2>
    1608:	1a c0       	rjmp	.+52     	; 0x163e <DIO_SetPortDirection+0xe0>
    160a:	2b 81       	ldd	r18, Y+3	; 0x03
    160c:	3c 81       	ldd	r19, Y+4	; 0x04
    160e:	22 30       	cpi	r18, 0x02	; 2
    1610:	31 05       	cpc	r19, r1
    1612:	71 f0       	breq	.+28     	; 0x1630 <DIO_SetPortDirection+0xd2>
    1614:	8b 81       	ldd	r24, Y+3	; 0x03
    1616:	9c 81       	ldd	r25, Y+4	; 0x04
    1618:	83 30       	cpi	r24, 0x03	; 3
    161a:	91 05       	cpc	r25, r1
    161c:	69 f0       	breq	.+26     	; 0x1638 <DIO_SetPortDirection+0xda>
    161e:	0f c0       	rjmp	.+30     	; 0x163e <DIO_SetPortDirection+0xe0>

	case portA: DDRA_REG = 0x00; break;
    1620:	ea e3       	ldi	r30, 0x3A	; 58
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	10 82       	st	Z, r1
    1626:	0b c0       	rjmp	.+22     	; 0x163e <DIO_SetPortDirection+0xe0>
	case portB: DDRB_REG = 0x00; break;
    1628:	e7 e3       	ldi	r30, 0x37	; 55
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	10 82       	st	Z, r1
    162e:	07 c0       	rjmp	.+14     	; 0x163e <DIO_SetPortDirection+0xe0>
	case portC: DDRC_REG = 0x00; break;
    1630:	e4 e3       	ldi	r30, 0x34	; 52
    1632:	f0 e0       	ldi	r31, 0x00	; 0
    1634:	10 82       	st	Z, r1
    1636:	03 c0       	rjmp	.+6      	; 0x163e <DIO_SetPortDirection+0xe0>
	case portD: DDRD_REG = 0x00; break;
    1638:	e1 e3       	ldi	r30, 0x31	; 49
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	10 82       	st	Z, r1

	}

    }

}
    163e:	26 96       	adiw	r28, 0x06	; 6
    1640:	0f b6       	in	r0, 0x3f	; 63
    1642:	f8 94       	cli
    1644:	de bf       	out	0x3e, r29	; 62
    1646:	0f be       	out	0x3f, r0	; 63
    1648:	cd bf       	out	0x3d, r28	; 61
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <DIO_SetPortValue>:
void DIO_SetPortValue(DIO_PORTID port_ID ,unsigned char value){
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	00 d0       	rcall	.+0      	; 0x1656 <DIO_SetPortValue+0x6>
    1656:	00 d0       	rcall	.+0      	; 0x1658 <DIO_SetPortValue+0x8>
    1658:	cd b7       	in	r28, 0x3d	; 61
    165a:	de b7       	in	r29, 0x3e	; 62
    165c:	89 83       	std	Y+1, r24	; 0x01
    165e:	6a 83       	std	Y+2, r22	; 0x02

	switch(port_ID){
    1660:	89 81       	ldd	r24, Y+1	; 0x01
    1662:	28 2f       	mov	r18, r24
    1664:	30 e0       	ldi	r19, 0x00	; 0
    1666:	3c 83       	std	Y+4, r19	; 0x04
    1668:	2b 83       	std	Y+3, r18	; 0x03
    166a:	8b 81       	ldd	r24, Y+3	; 0x03
    166c:	9c 81       	ldd	r25, Y+4	; 0x04
    166e:	81 30       	cpi	r24, 0x01	; 1
    1670:	91 05       	cpc	r25, r1
    1672:	d1 f0       	breq	.+52     	; 0x16a8 <DIO_SetPortValue+0x58>
    1674:	2b 81       	ldd	r18, Y+3	; 0x03
    1676:	3c 81       	ldd	r19, Y+4	; 0x04
    1678:	22 30       	cpi	r18, 0x02	; 2
    167a:	31 05       	cpc	r19, r1
    167c:	2c f4       	brge	.+10     	; 0x1688 <DIO_SetPortValue+0x38>
    167e:	8b 81       	ldd	r24, Y+3	; 0x03
    1680:	9c 81       	ldd	r25, Y+4	; 0x04
    1682:	00 97       	sbiw	r24, 0x00	; 0
    1684:	61 f0       	breq	.+24     	; 0x169e <DIO_SetPortValue+0x4e>
    1686:	1e c0       	rjmp	.+60     	; 0x16c4 <DIO_SetPortValue+0x74>
    1688:	2b 81       	ldd	r18, Y+3	; 0x03
    168a:	3c 81       	ldd	r19, Y+4	; 0x04
    168c:	22 30       	cpi	r18, 0x02	; 2
    168e:	31 05       	cpc	r19, r1
    1690:	81 f0       	breq	.+32     	; 0x16b2 <DIO_SetPortValue+0x62>
    1692:	8b 81       	ldd	r24, Y+3	; 0x03
    1694:	9c 81       	ldd	r25, Y+4	; 0x04
    1696:	83 30       	cpi	r24, 0x03	; 3
    1698:	91 05       	cpc	r25, r1
    169a:	81 f0       	breq	.+32     	; 0x16bc <DIO_SetPortValue+0x6c>
    169c:	13 c0       	rjmp	.+38     	; 0x16c4 <DIO_SetPortValue+0x74>

		case portA: PORTA_REG = value; break;
    169e:	eb e3       	ldi	r30, 0x3B	; 59
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	80 83       	st	Z, r24
    16a6:	0e c0       	rjmp	.+28     	; 0x16c4 <DIO_SetPortValue+0x74>
		case portB: PORTB_REG = value; break;
    16a8:	e8 e3       	ldi	r30, 0x38	; 56
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	8a 81       	ldd	r24, Y+2	; 0x02
    16ae:	80 83       	st	Z, r24
    16b0:	09 c0       	rjmp	.+18     	; 0x16c4 <DIO_SetPortValue+0x74>
		case portC: PORTC_REG = value; break;
    16b2:	e5 e3       	ldi	r30, 0x35	; 53
    16b4:	f0 e0       	ldi	r31, 0x00	; 0
    16b6:	8a 81       	ldd	r24, Y+2	; 0x02
    16b8:	80 83       	st	Z, r24
    16ba:	04 c0       	rjmp	.+8      	; 0x16c4 <DIO_SetPortValue+0x74>
		case portD: PORTD_REG = value; break;
    16bc:	e2 e3       	ldi	r30, 0x32	; 50
    16be:	f0 e0       	ldi	r31, 0x00	; 0
    16c0:	8a 81       	ldd	r24, Y+2	; 0x02
    16c2:	80 83       	st	Z, r24
		}

}
    16c4:	0f 90       	pop	r0
    16c6:	0f 90       	pop	r0
    16c8:	0f 90       	pop	r0
    16ca:	0f 90       	pop	r0
    16cc:	cf 91       	pop	r28
    16ce:	df 91       	pop	r29
    16d0:	08 95       	ret

000016d2 <DIO_SetPinDirection>:
void DIO_SetPinDirection(DIO_PORTID port_ID ,DIO_PINID Pin,DIO_DIRECTION direction){
    16d2:	df 93       	push	r29
    16d4:	cf 93       	push	r28
    16d6:	cd b7       	in	r28, 0x3d	; 61
    16d8:	de b7       	in	r29, 0x3e	; 62
    16da:	27 97       	sbiw	r28, 0x07	; 7
    16dc:	0f b6       	in	r0, 0x3f	; 63
    16de:	f8 94       	cli
    16e0:	de bf       	out	0x3e, r29	; 62
    16e2:	0f be       	out	0x3f, r0	; 63
    16e4:	cd bf       	out	0x3d, r28	; 61
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	6a 83       	std	Y+2, r22	; 0x02
    16ea:	4b 83       	std	Y+3, r20	; 0x03

	if(port_ID<=portD && Pin<=pin7) {
    16ec:	89 81       	ldd	r24, Y+1	; 0x01
    16ee:	84 30       	cpi	r24, 0x04	; 4
    16f0:	08 f0       	brcs	.+2      	; 0x16f4 <DIO_SetPinDirection+0x22>
    16f2:	ee c0       	rjmp	.+476    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
    16f4:	8a 81       	ldd	r24, Y+2	; 0x02
    16f6:	88 30       	cpi	r24, 0x08	; 8
    16f8:	08 f0       	brcs	.+2      	; 0x16fc <DIO_SetPinDirection+0x2a>
    16fa:	ea c0       	rjmp	.+468    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
		if(output==direction) {
    16fc:	8b 81       	ldd	r24, Y+3	; 0x03
    16fe:	81 30       	cpi	r24, 0x01	; 1
    1700:	09 f0       	breq	.+2      	; 0x1704 <DIO_SetPinDirection+0x32>
    1702:	6f c0       	rjmp	.+222    	; 0x17e2 <DIO_SetPinDirection+0x110>

		switch(port_ID){
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	3f 83       	std	Y+7, r19	; 0x07
    170c:	2e 83       	std	Y+6, r18	; 0x06
    170e:	8e 81       	ldd	r24, Y+6	; 0x06
    1710:	9f 81       	ldd	r25, Y+7	; 0x07
    1712:	81 30       	cpi	r24, 0x01	; 1
    1714:	91 05       	cpc	r25, r1
    1716:	49 f1       	breq	.+82     	; 0x176a <DIO_SetPinDirection+0x98>
    1718:	2e 81       	ldd	r18, Y+6	; 0x06
    171a:	3f 81       	ldd	r19, Y+7	; 0x07
    171c:	22 30       	cpi	r18, 0x02	; 2
    171e:	31 05       	cpc	r19, r1
    1720:	2c f4       	brge	.+10     	; 0x172c <DIO_SetPinDirection+0x5a>
    1722:	8e 81       	ldd	r24, Y+6	; 0x06
    1724:	9f 81       	ldd	r25, Y+7	; 0x07
    1726:	00 97       	sbiw	r24, 0x00	; 0
    1728:	61 f0       	breq	.+24     	; 0x1742 <DIO_SetPinDirection+0x70>
    172a:	d2 c0       	rjmp	.+420    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
    172c:	2e 81       	ldd	r18, Y+6	; 0x06
    172e:	3f 81       	ldd	r19, Y+7	; 0x07
    1730:	22 30       	cpi	r18, 0x02	; 2
    1732:	31 05       	cpc	r19, r1
    1734:	71 f1       	breq	.+92     	; 0x1792 <DIO_SetPinDirection+0xc0>
    1736:	8e 81       	ldd	r24, Y+6	; 0x06
    1738:	9f 81       	ldd	r25, Y+7	; 0x07
    173a:	83 30       	cpi	r24, 0x03	; 3
    173c:	91 05       	cpc	r25, r1
    173e:	e9 f1       	breq	.+122    	; 0x17ba <DIO_SetPinDirection+0xe8>
    1740:	c7 c0       	rjmp	.+398    	; 0x18d0 <DIO_SetPinDirection+0x1fe>

		    case portA: SET_BIT(DDRA_REG,Pin); break;
    1742:	aa e3       	ldi	r26, 0x3A	; 58
    1744:	b0 e0       	ldi	r27, 0x00	; 0
    1746:	ea e3       	ldi	r30, 0x3A	; 58
    1748:	f0 e0       	ldi	r31, 0x00	; 0
    174a:	80 81       	ld	r24, Z
    174c:	48 2f       	mov	r20, r24
    174e:	8a 81       	ldd	r24, Y+2	; 0x02
    1750:	28 2f       	mov	r18, r24
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	02 2e       	mov	r0, r18
    175a:	02 c0       	rjmp	.+4      	; 0x1760 <DIO_SetPinDirection+0x8e>
    175c:	88 0f       	add	r24, r24
    175e:	99 1f       	adc	r25, r25
    1760:	0a 94       	dec	r0
    1762:	e2 f7       	brpl	.-8      	; 0x175c <DIO_SetPinDirection+0x8a>
    1764:	84 2b       	or	r24, r20
    1766:	8c 93       	st	X, r24
    1768:	b3 c0       	rjmp	.+358    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
		    case portB: SET_BIT(DDRB_REG,Pin); break;
    176a:	a7 e3       	ldi	r26, 0x37	; 55
    176c:	b0 e0       	ldi	r27, 0x00	; 0
    176e:	e7 e3       	ldi	r30, 0x37	; 55
    1770:	f0 e0       	ldi	r31, 0x00	; 0
    1772:	80 81       	ld	r24, Z
    1774:	48 2f       	mov	r20, r24
    1776:	8a 81       	ldd	r24, Y+2	; 0x02
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	02 2e       	mov	r0, r18
    1782:	02 c0       	rjmp	.+4      	; 0x1788 <DIO_SetPinDirection+0xb6>
    1784:	88 0f       	add	r24, r24
    1786:	99 1f       	adc	r25, r25
    1788:	0a 94       	dec	r0
    178a:	e2 f7       	brpl	.-8      	; 0x1784 <DIO_SetPinDirection+0xb2>
    178c:	84 2b       	or	r24, r20
    178e:	8c 93       	st	X, r24
    1790:	9f c0       	rjmp	.+318    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
		    case portC: SET_BIT(DDRC_REG,Pin); break;
    1792:	a4 e3       	ldi	r26, 0x34	; 52
    1794:	b0 e0       	ldi	r27, 0x00	; 0
    1796:	e4 e3       	ldi	r30, 0x34	; 52
    1798:	f0 e0       	ldi	r31, 0x00	; 0
    179a:	80 81       	ld	r24, Z
    179c:	48 2f       	mov	r20, r24
    179e:	8a 81       	ldd	r24, Y+2	; 0x02
    17a0:	28 2f       	mov	r18, r24
    17a2:	30 e0       	ldi	r19, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	02 2e       	mov	r0, r18
    17aa:	02 c0       	rjmp	.+4      	; 0x17b0 <DIO_SetPinDirection+0xde>
    17ac:	88 0f       	add	r24, r24
    17ae:	99 1f       	adc	r25, r25
    17b0:	0a 94       	dec	r0
    17b2:	e2 f7       	brpl	.-8      	; 0x17ac <DIO_SetPinDirection+0xda>
    17b4:	84 2b       	or	r24, r20
    17b6:	8c 93       	st	X, r24
    17b8:	8b c0       	rjmp	.+278    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
		    case portD: SET_BIT(DDRD_REG,Pin); break;
    17ba:	a1 e3       	ldi	r26, 0x31	; 49
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e1 e3       	ldi	r30, 0x31	; 49
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	48 2f       	mov	r20, r24
    17c6:	8a 81       	ldd	r24, Y+2	; 0x02
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	02 2e       	mov	r0, r18
    17d2:	02 c0       	rjmp	.+4      	; 0x17d8 <DIO_SetPinDirection+0x106>
    17d4:	88 0f       	add	r24, r24
    17d6:	99 1f       	adc	r25, r25
    17d8:	0a 94       	dec	r0
    17da:	e2 f7       	brpl	.-8      	; 0x17d4 <DIO_SetPinDirection+0x102>
    17dc:	84 2b       	or	r24, r20
    17de:	8c 93       	st	X, r24
    17e0:	77 c0       	rjmp	.+238    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
				}

		}
		else if (input==direction){
    17e2:	8b 81       	ldd	r24, Y+3	; 0x03
    17e4:	88 23       	and	r24, r24
    17e6:	09 f0       	breq	.+2      	; 0x17ea <DIO_SetPinDirection+0x118>
    17e8:	73 c0       	rjmp	.+230    	; 0x18d0 <DIO_SetPinDirection+0x1fe>

			switch(port_ID){
    17ea:	89 81       	ldd	r24, Y+1	; 0x01
    17ec:	28 2f       	mov	r18, r24
    17ee:	30 e0       	ldi	r19, 0x00	; 0
    17f0:	3d 83       	std	Y+5, r19	; 0x05
    17f2:	2c 83       	std	Y+4, r18	; 0x04
    17f4:	8c 81       	ldd	r24, Y+4	; 0x04
    17f6:	9d 81       	ldd	r25, Y+5	; 0x05
    17f8:	81 30       	cpi	r24, 0x01	; 1
    17fa:	91 05       	cpc	r25, r1
    17fc:	59 f1       	breq	.+86     	; 0x1854 <DIO_SetPinDirection+0x182>
    17fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1800:	3d 81       	ldd	r19, Y+5	; 0x05
    1802:	22 30       	cpi	r18, 0x02	; 2
    1804:	31 05       	cpc	r19, r1
    1806:	2c f4       	brge	.+10     	; 0x1812 <DIO_SetPinDirection+0x140>
    1808:	8c 81       	ldd	r24, Y+4	; 0x04
    180a:	9d 81       	ldd	r25, Y+5	; 0x05
    180c:	00 97       	sbiw	r24, 0x00	; 0
    180e:	69 f0       	breq	.+26     	; 0x182a <DIO_SetPinDirection+0x158>
    1810:	5f c0       	rjmp	.+190    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
    1812:	2c 81       	ldd	r18, Y+4	; 0x04
    1814:	3d 81       	ldd	r19, Y+5	; 0x05
    1816:	22 30       	cpi	r18, 0x02	; 2
    1818:	31 05       	cpc	r19, r1
    181a:	89 f1       	breq	.+98     	; 0x187e <DIO_SetPinDirection+0x1ac>
    181c:	8c 81       	ldd	r24, Y+4	; 0x04
    181e:	9d 81       	ldd	r25, Y+5	; 0x05
    1820:	83 30       	cpi	r24, 0x03	; 3
    1822:	91 05       	cpc	r25, r1
    1824:	09 f4       	brne	.+2      	; 0x1828 <DIO_SetPinDirection+0x156>
    1826:	40 c0       	rjmp	.+128    	; 0x18a8 <DIO_SetPinDirection+0x1d6>
    1828:	53 c0       	rjmp	.+166    	; 0x18d0 <DIO_SetPinDirection+0x1fe>

			case portA: CLR_BIT(DDRA_REG,Pin); break;
    182a:	aa e3       	ldi	r26, 0x3A	; 58
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	ea e3       	ldi	r30, 0x3A	; 58
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <DIO_SetPinDirection+0x176>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <DIO_SetPinDirection+0x172>
    184c:	80 95       	com	r24
    184e:	84 23       	and	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	3e c0       	rjmp	.+124    	; 0x18d0 <DIO_SetPinDirection+0x1fe>
			case portB: CLR_BIT(DDRB_REG,Pin); break;
    1854:	a7 e3       	ldi	r26, 0x37	; 55
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e7 e3       	ldi	r30, 0x37	; 55
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8a 81       	ldd	r24, Y+2	; 0x02
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_SetPinDirection+0x1a0>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_SetPinDirection+0x19c>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	29 c0       	rjmp	.+82     	; 0x18d0 <DIO_SetPinDirection+0x1fe>
			case portC: CLR_BIT(DDRC_REG,Pin); break;
    187e:	a4 e3       	ldi	r26, 0x34	; 52
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e4 e3       	ldi	r30, 0x34	; 52
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <DIO_SetPinDirection+0x1ca>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <DIO_SetPinDirection+0x1c6>
    18a0:	80 95       	com	r24
    18a2:	84 23       	and	r24, r20
    18a4:	8c 93       	st	X, r24
    18a6:	14 c0       	rjmp	.+40     	; 0x18d0 <DIO_SetPinDirection+0x1fe>
			case portD: CLR_BIT(DDRD_REG,Pin); break;
    18a8:	a1 e3       	ldi	r26, 0x31	; 49
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e1 e3       	ldi	r30, 0x31	; 49
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	48 2f       	mov	r20, r24
    18b4:	8a 81       	ldd	r24, Y+2	; 0x02
    18b6:	28 2f       	mov	r18, r24
    18b8:	30 e0       	ldi	r19, 0x00	; 0
    18ba:	81 e0       	ldi	r24, 0x01	; 1
    18bc:	90 e0       	ldi	r25, 0x00	; 0
    18be:	02 2e       	mov	r0, r18
    18c0:	02 c0       	rjmp	.+4      	; 0x18c6 <DIO_SetPinDirection+0x1f4>
    18c2:	88 0f       	add	r24, r24
    18c4:	99 1f       	adc	r25, r25
    18c6:	0a 94       	dec	r0
    18c8:	e2 f7       	brpl	.-8      	; 0x18c2 <DIO_SetPinDirection+0x1f0>
    18ca:	80 95       	com	r24
    18cc:	84 23       	and	r24, r20
    18ce:	8c 93       	st	X, r24
							}
    }
    }
    }
    18d0:	27 96       	adiw	r28, 0x07	; 7
    18d2:	0f b6       	in	r0, 0x3f	; 63
    18d4:	f8 94       	cli
    18d6:	de bf       	out	0x3e, r29	; 62
    18d8:	0f be       	out	0x3f, r0	; 63
    18da:	cd bf       	out	0x3d, r28	; 61
    18dc:	cf 91       	pop	r28
    18de:	df 91       	pop	r29
    18e0:	08 95       	ret

000018e2 <DIO_SetPinValue>:
void DIO_SetPinValue(DIO_PORTID port_ID ,DIO_PINID Pin_ID,DIO_VALUE value)
{
    18e2:	df 93       	push	r29
    18e4:	cf 93       	push	r28
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
    18ea:	27 97       	sbiw	r28, 0x07	; 7
    18ec:	0f b6       	in	r0, 0x3f	; 63
    18ee:	f8 94       	cli
    18f0:	de bf       	out	0x3e, r29	; 62
    18f2:	0f be       	out	0x3f, r0	; 63
    18f4:	cd bf       	out	0x3d, r28	; 61
    18f6:	89 83       	std	Y+1, r24	; 0x01
    18f8:	6a 83       	std	Y+2, r22	; 0x02
    18fa:	4b 83       	std	Y+3, r20	; 0x03
	if(port_ID<=portD && Pin_ID<=pin7) {
    18fc:	89 81       	ldd	r24, Y+1	; 0x01
    18fe:	84 30       	cpi	r24, 0x04	; 4
    1900:	08 f0       	brcs	.+2      	; 0x1904 <DIO_SetPinValue+0x22>
    1902:	ee c0       	rjmp	.+476    	; 0x1ae0 <DIO_SetPinValue+0x1fe>
    1904:	8a 81       	ldd	r24, Y+2	; 0x02
    1906:	88 30       	cpi	r24, 0x08	; 8
    1908:	08 f0       	brcs	.+2      	; 0x190c <DIO_SetPinValue+0x2a>
    190a:	ea c0       	rjmp	.+468    	; 0x1ae0 <DIO_SetPinValue+0x1fe>
			if(HIGH==value) {
    190c:	8b 81       	ldd	r24, Y+3	; 0x03
    190e:	81 30       	cpi	r24, 0x01	; 1
    1910:	09 f0       	breq	.+2      	; 0x1914 <DIO_SetPinValue+0x32>
    1912:	6f c0       	rjmp	.+222    	; 0x19f2 <DIO_SetPinValue+0x110>

			switch(port_ID){
    1914:	89 81       	ldd	r24, Y+1	; 0x01
    1916:	28 2f       	mov	r18, r24
    1918:	30 e0       	ldi	r19, 0x00	; 0
    191a:	3f 83       	std	Y+7, r19	; 0x07
    191c:	2e 83       	std	Y+6, r18	; 0x06
    191e:	8e 81       	ldd	r24, Y+6	; 0x06
    1920:	9f 81       	ldd	r25, Y+7	; 0x07
    1922:	81 30       	cpi	r24, 0x01	; 1
    1924:	91 05       	cpc	r25, r1
    1926:	49 f1       	breq	.+82     	; 0x197a <DIO_SetPinValue+0x98>
    1928:	2e 81       	ldd	r18, Y+6	; 0x06
    192a:	3f 81       	ldd	r19, Y+7	; 0x07
    192c:	22 30       	cpi	r18, 0x02	; 2
    192e:	31 05       	cpc	r19, r1
    1930:	2c f4       	brge	.+10     	; 0x193c <DIO_SetPinValue+0x5a>
    1932:	8e 81       	ldd	r24, Y+6	; 0x06
    1934:	9f 81       	ldd	r25, Y+7	; 0x07
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	61 f0       	breq	.+24     	; 0x1952 <DIO_SetPinValue+0x70>
    193a:	d2 c0       	rjmp	.+420    	; 0x1ae0 <DIO_SetPinValue+0x1fe>
    193c:	2e 81       	ldd	r18, Y+6	; 0x06
    193e:	3f 81       	ldd	r19, Y+7	; 0x07
    1940:	22 30       	cpi	r18, 0x02	; 2
    1942:	31 05       	cpc	r19, r1
    1944:	71 f1       	breq	.+92     	; 0x19a2 <DIO_SetPinValue+0xc0>
    1946:	8e 81       	ldd	r24, Y+6	; 0x06
    1948:	9f 81       	ldd	r25, Y+7	; 0x07
    194a:	83 30       	cpi	r24, 0x03	; 3
    194c:	91 05       	cpc	r25, r1
    194e:	e9 f1       	breq	.+122    	; 0x19ca <DIO_SetPinValue+0xe8>
    1950:	c7 c0       	rjmp	.+398    	; 0x1ae0 <DIO_SetPinValue+0x1fe>

		 case portA: SET_BIT(PORTA_REG,Pin_ID); break;
    1952:	ab e3       	ldi	r26, 0x3B	; 59
    1954:	b0 e0       	ldi	r27, 0x00	; 0
    1956:	eb e3       	ldi	r30, 0x3B	; 59
    1958:	f0 e0       	ldi	r31, 0x00	; 0
    195a:	80 81       	ld	r24, Z
    195c:	48 2f       	mov	r20, r24
    195e:	8a 81       	ldd	r24, Y+2	; 0x02
    1960:	28 2f       	mov	r18, r24
    1962:	30 e0       	ldi	r19, 0x00	; 0
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	90 e0       	ldi	r25, 0x00	; 0
    1968:	02 2e       	mov	r0, r18
    196a:	02 c0       	rjmp	.+4      	; 0x1970 <DIO_SetPinValue+0x8e>
    196c:	88 0f       	add	r24, r24
    196e:	99 1f       	adc	r25, r25
    1970:	0a 94       	dec	r0
    1972:	e2 f7       	brpl	.-8      	; 0x196c <DIO_SetPinValue+0x8a>
    1974:	84 2b       	or	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	b3 c0       	rjmp	.+358    	; 0x1ae0 <DIO_SetPinValue+0x1fe>
		 case portB: SET_BIT(PORTB_REG,Pin_ID); break;
    197a:	a8 e3       	ldi	r26, 0x38	; 56
    197c:	b0 e0       	ldi	r27, 0x00	; 0
    197e:	e8 e3       	ldi	r30, 0x38	; 56
    1980:	f0 e0       	ldi	r31, 0x00	; 0
    1982:	80 81       	ld	r24, Z
    1984:	48 2f       	mov	r20, r24
    1986:	8a 81       	ldd	r24, Y+2	; 0x02
    1988:	28 2f       	mov	r18, r24
    198a:	30 e0       	ldi	r19, 0x00	; 0
    198c:	81 e0       	ldi	r24, 0x01	; 1
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	02 2e       	mov	r0, r18
    1992:	02 c0       	rjmp	.+4      	; 0x1998 <DIO_SetPinValue+0xb6>
    1994:	88 0f       	add	r24, r24
    1996:	99 1f       	adc	r25, r25
    1998:	0a 94       	dec	r0
    199a:	e2 f7       	brpl	.-8      	; 0x1994 <DIO_SetPinValue+0xb2>
    199c:	84 2b       	or	r24, r20
    199e:	8c 93       	st	X, r24
    19a0:	9f c0       	rjmp	.+318    	; 0x1ae0 <DIO_SetPinValue+0x1fe>
		 case portC: SET_BIT(PORTC_REG,Pin_ID); break;
    19a2:	a5 e3       	ldi	r26, 0x35	; 53
    19a4:	b0 e0       	ldi	r27, 0x00	; 0
    19a6:	e5 e3       	ldi	r30, 0x35	; 53
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	80 81       	ld	r24, Z
    19ac:	48 2f       	mov	r20, r24
    19ae:	8a 81       	ldd	r24, Y+2	; 0x02
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	81 e0       	ldi	r24, 0x01	; 1
    19b6:	90 e0       	ldi	r25, 0x00	; 0
    19b8:	02 2e       	mov	r0, r18
    19ba:	02 c0       	rjmp	.+4      	; 0x19c0 <DIO_SetPinValue+0xde>
    19bc:	88 0f       	add	r24, r24
    19be:	99 1f       	adc	r25, r25
    19c0:	0a 94       	dec	r0
    19c2:	e2 f7       	brpl	.-8      	; 0x19bc <DIO_SetPinValue+0xda>
    19c4:	84 2b       	or	r24, r20
    19c6:	8c 93       	st	X, r24
    19c8:	8b c0       	rjmp	.+278    	; 0x1ae0 <DIO_SetPinValue+0x1fe>
		 case portD: SET_BIT(PORTD_REG,Pin_ID); break;
    19ca:	a2 e3       	ldi	r26, 0x32	; 50
    19cc:	b0 e0       	ldi	r27, 0x00	; 0
    19ce:	e2 e3       	ldi	r30, 0x32	; 50
    19d0:	f0 e0       	ldi	r31, 0x00	; 0
    19d2:	80 81       	ld	r24, Z
    19d4:	48 2f       	mov	r20, r24
    19d6:	8a 81       	ldd	r24, Y+2	; 0x02
    19d8:	28 2f       	mov	r18, r24
    19da:	30 e0       	ldi	r19, 0x00	; 0
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	02 2e       	mov	r0, r18
    19e2:	02 c0       	rjmp	.+4      	; 0x19e8 <DIO_SetPinValue+0x106>
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	0a 94       	dec	r0
    19ea:	e2 f7       	brpl	.-8      	; 0x19e4 <DIO_SetPinValue+0x102>
    19ec:	84 2b       	or	r24, r20
    19ee:	8c 93       	st	X, r24
    19f0:	77 c0       	rjmp	.+238    	; 0x1ae0 <DIO_SetPinValue+0x1fe>

	}
	}
			else if (LOW==value){
    19f2:	8b 81       	ldd	r24, Y+3	; 0x03
    19f4:	88 23       	and	r24, r24
    19f6:	09 f0       	breq	.+2      	; 0x19fa <DIO_SetPinValue+0x118>
    19f8:	73 c0       	rjmp	.+230    	; 0x1ae0 <DIO_SetPinValue+0x1fe>

				switch(port_ID){
    19fa:	89 81       	ldd	r24, Y+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	30 e0       	ldi	r19, 0x00	; 0
    1a00:	3d 83       	std	Y+5, r19	; 0x05
    1a02:	2c 83       	std	Y+4, r18	; 0x04
    1a04:	8c 81       	ldd	r24, Y+4	; 0x04
    1a06:	9d 81       	ldd	r25, Y+5	; 0x05
    1a08:	81 30       	cpi	r24, 0x01	; 1
    1a0a:	91 05       	cpc	r25, r1
    1a0c:	59 f1       	breq	.+86     	; 0x1a64 <DIO_SetPinValue+0x182>
    1a0e:	2c 81       	ldd	r18, Y+4	; 0x04
    1a10:	3d 81       	ldd	r19, Y+5	; 0x05
    1a12:	22 30       	cpi	r18, 0x02	; 2
    1a14:	31 05       	cpc	r19, r1
    1a16:	2c f4       	brge	.+10     	; 0x1a22 <DIO_SetPinValue+0x140>
    1a18:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a1c:	00 97       	sbiw	r24, 0x00	; 0
    1a1e:	69 f0       	breq	.+26     	; 0x1a3a <DIO_SetPinValue+0x158>
    1a20:	5f c0       	rjmp	.+190    	; 0x1ae0 <DIO_SetPinValue+0x1fe>
    1a22:	2c 81       	ldd	r18, Y+4	; 0x04
    1a24:	3d 81       	ldd	r19, Y+5	; 0x05
    1a26:	22 30       	cpi	r18, 0x02	; 2
    1a28:	31 05       	cpc	r19, r1
    1a2a:	89 f1       	breq	.+98     	; 0x1a8e <DIO_SetPinValue+0x1ac>
    1a2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a30:	83 30       	cpi	r24, 0x03	; 3
    1a32:	91 05       	cpc	r25, r1
    1a34:	09 f4       	brne	.+2      	; 0x1a38 <DIO_SetPinValue+0x156>
    1a36:	40 c0       	rjmp	.+128    	; 0x1ab8 <DIO_SetPinValue+0x1d6>
    1a38:	53 c0       	rjmp	.+166    	; 0x1ae0 <DIO_SetPinValue+0x1fe>

		 case portA: CLR_BIT(PORTA_REG,Pin_ID); break;
    1a3a:	ab e3       	ldi	r26, 0x3B	; 59
    1a3c:	b0 e0       	ldi	r27, 0x00	; 0
    1a3e:	eb e3       	ldi	r30, 0x3B	; 59
    1a40:	f0 e0       	ldi	r31, 0x00	; 0
    1a42:	80 81       	ld	r24, Z
    1a44:	48 2f       	mov	r20, r24
    1a46:	8a 81       	ldd	r24, Y+2	; 0x02
    1a48:	28 2f       	mov	r18, r24
    1a4a:	30 e0       	ldi	r19, 0x00	; 0
    1a4c:	81 e0       	ldi	r24, 0x01	; 1
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	02 2e       	mov	r0, r18
    1a52:	02 c0       	rjmp	.+4      	; 0x1a58 <DIO_SetPinValue+0x176>
    1a54:	88 0f       	add	r24, r24
    1a56:	99 1f       	adc	r25, r25
    1a58:	0a 94       	dec	r0
    1a5a:	e2 f7       	brpl	.-8      	; 0x1a54 <DIO_SetPinValue+0x172>
    1a5c:	80 95       	com	r24
    1a5e:	84 23       	and	r24, r20
    1a60:	8c 93       	st	X, r24
    1a62:	3e c0       	rjmp	.+124    	; 0x1ae0 <DIO_SetPinValue+0x1fe>
		 case portB: CLR_BIT(PORTB_REG,Pin_ID); break;
    1a64:	a8 e3       	ldi	r26, 0x38	; 56
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e8 e3       	ldi	r30, 0x38	; 56
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	48 2f       	mov	r20, r24
    1a70:	8a 81       	ldd	r24, Y+2	; 0x02
    1a72:	28 2f       	mov	r18, r24
    1a74:	30 e0       	ldi	r19, 0x00	; 0
    1a76:	81 e0       	ldi	r24, 0x01	; 1
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	02 2e       	mov	r0, r18
    1a7c:	02 c0       	rjmp	.+4      	; 0x1a82 <DIO_SetPinValue+0x1a0>
    1a7e:	88 0f       	add	r24, r24
    1a80:	99 1f       	adc	r25, r25
    1a82:	0a 94       	dec	r0
    1a84:	e2 f7       	brpl	.-8      	; 0x1a7e <DIO_SetPinValue+0x19c>
    1a86:	80 95       	com	r24
    1a88:	84 23       	and	r24, r20
    1a8a:	8c 93       	st	X, r24
    1a8c:	29 c0       	rjmp	.+82     	; 0x1ae0 <DIO_SetPinValue+0x1fe>
		 case portC: CLR_BIT(PORTC_REG,Pin_ID); break;
    1a8e:	a5 e3       	ldi	r26, 0x35	; 53
    1a90:	b0 e0       	ldi	r27, 0x00	; 0
    1a92:	e5 e3       	ldi	r30, 0x35	; 53
    1a94:	f0 e0       	ldi	r31, 0x00	; 0
    1a96:	80 81       	ld	r24, Z
    1a98:	48 2f       	mov	r20, r24
    1a9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a9c:	28 2f       	mov	r18, r24
    1a9e:	30 e0       	ldi	r19, 0x00	; 0
    1aa0:	81 e0       	ldi	r24, 0x01	; 1
    1aa2:	90 e0       	ldi	r25, 0x00	; 0
    1aa4:	02 2e       	mov	r0, r18
    1aa6:	02 c0       	rjmp	.+4      	; 0x1aac <DIO_SetPinValue+0x1ca>
    1aa8:	88 0f       	add	r24, r24
    1aaa:	99 1f       	adc	r25, r25
    1aac:	0a 94       	dec	r0
    1aae:	e2 f7       	brpl	.-8      	; 0x1aa8 <DIO_SetPinValue+0x1c6>
    1ab0:	80 95       	com	r24
    1ab2:	84 23       	and	r24, r20
    1ab4:	8c 93       	st	X, r24
    1ab6:	14 c0       	rjmp	.+40     	; 0x1ae0 <DIO_SetPinValue+0x1fe>
		 case portD: CLR_BIT(PORTD_REG,Pin_ID); break;
    1ab8:	a2 e3       	ldi	r26, 0x32	; 50
    1aba:	b0 e0       	ldi	r27, 0x00	; 0
    1abc:	e2 e3       	ldi	r30, 0x32	; 50
    1abe:	f0 e0       	ldi	r31, 0x00	; 0
    1ac0:	80 81       	ld	r24, Z
    1ac2:	48 2f       	mov	r20, r24
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	28 2f       	mov	r18, r24
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	90 e0       	ldi	r25, 0x00	; 0
    1ace:	02 2e       	mov	r0, r18
    1ad0:	02 c0       	rjmp	.+4      	; 0x1ad6 <DIO_SetPinValue+0x1f4>
    1ad2:	88 0f       	add	r24, r24
    1ad4:	99 1f       	adc	r25, r25
    1ad6:	0a 94       	dec	r0
    1ad8:	e2 f7       	brpl	.-8      	; 0x1ad2 <DIO_SetPinValue+0x1f0>
    1ada:	80 95       	com	r24
    1adc:	84 23       	and	r24, r20
    1ade:	8c 93       	st	X, r24

	}
	}
	}
    }
    1ae0:	27 96       	adiw	r28, 0x07	; 7
    1ae2:	0f b6       	in	r0, 0x3f	; 63
    1ae4:	f8 94       	cli
    1ae6:	de bf       	out	0x3e, r29	; 62
    1ae8:	0f be       	out	0x3f, r0	; 63
    1aea:	cd bf       	out	0x3d, r28	; 61
    1aec:	cf 91       	pop	r28
    1aee:	df 91       	pop	r29
    1af0:	08 95       	ret

00001af2 <DIO_GetPinvalue>:
DIO_VALUE DIO_GetPinvalue(DIO_PORTID port_ID ,DIO_PINID Pin_ID)
{
    1af2:	df 93       	push	r29
    1af4:	cf 93       	push	r28
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <DIO_GetPinvalue+0x6>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <DIO_GetPinvalue+0x8>
    1afa:	0f 92       	push	r0
    1afc:	cd b7       	in	r28, 0x3d	; 61
    1afe:	de b7       	in	r29, 0x3e	; 62
    1b00:	8a 83       	std	Y+2, r24	; 0x02
    1b02:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE Pinvalue ;
	if(port_ID<=portD && Pin_ID<=pin7) {
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	84 30       	cpi	r24, 0x04	; 4
    1b08:	08 f0       	brcs	.+2      	; 0x1b0c <DIO_GetPinvalue+0x1a>
    1b0a:	6b c0       	rjmp	.+214    	; 0x1be2 <DIO_GetPinvalue+0xf0>
    1b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b0e:	88 30       	cpi	r24, 0x08	; 8
    1b10:	08 f0       	brcs	.+2      	; 0x1b14 <DIO_GetPinvalue+0x22>
    1b12:	67 c0       	rjmp	.+206    	; 0x1be2 <DIO_GetPinvalue+0xf0>

				switch(port_ID){
    1b14:	8a 81       	ldd	r24, Y+2	; 0x02
    1b16:	28 2f       	mov	r18, r24
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	3d 83       	std	Y+5, r19	; 0x05
    1b1c:	2c 83       	std	Y+4, r18	; 0x04
    1b1e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b20:	5d 81       	ldd	r21, Y+5	; 0x05
    1b22:	41 30       	cpi	r20, 0x01	; 1
    1b24:	51 05       	cpc	r21, r1
    1b26:	41 f1       	breq	.+80     	; 0x1b78 <DIO_GetPinvalue+0x86>
    1b28:	8c 81       	ldd	r24, Y+4	; 0x04
    1b2a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b2c:	82 30       	cpi	r24, 0x02	; 2
    1b2e:	91 05       	cpc	r25, r1
    1b30:	34 f4       	brge	.+12     	; 0x1b3e <DIO_GetPinvalue+0x4c>
    1b32:	2c 81       	ldd	r18, Y+4	; 0x04
    1b34:	3d 81       	ldd	r19, Y+5	; 0x05
    1b36:	21 15       	cp	r18, r1
    1b38:	31 05       	cpc	r19, r1
    1b3a:	61 f0       	breq	.+24     	; 0x1b54 <DIO_GetPinvalue+0x62>
    1b3c:	52 c0       	rjmp	.+164    	; 0x1be2 <DIO_GetPinvalue+0xf0>
    1b3e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b40:	5d 81       	ldd	r21, Y+5	; 0x05
    1b42:	42 30       	cpi	r20, 0x02	; 2
    1b44:	51 05       	cpc	r21, r1
    1b46:	51 f1       	breq	.+84     	; 0x1b9c <DIO_GetPinvalue+0xaa>
    1b48:	8c 81       	ldd	r24, Y+4	; 0x04
    1b4a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b4c:	83 30       	cpi	r24, 0x03	; 3
    1b4e:	91 05       	cpc	r25, r1
    1b50:	b9 f1       	breq	.+110    	; 0x1bc0 <DIO_GetPinvalue+0xce>
    1b52:	47 c0       	rjmp	.+142    	; 0x1be2 <DIO_GetPinvalue+0xf0>

			 case portA: Pinvalue=GET_BIT(PORTA_REG,Pin_ID); break;
    1b54:	eb e3       	ldi	r30, 0x3B	; 59
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	28 2f       	mov	r18, r24
    1b5c:	30 e0       	ldi	r19, 0x00	; 0
    1b5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b60:	88 2f       	mov	r24, r24
    1b62:	90 e0       	ldi	r25, 0x00	; 0
    1b64:	a9 01       	movw	r20, r18
    1b66:	02 c0       	rjmp	.+4      	; 0x1b6c <DIO_GetPinvalue+0x7a>
    1b68:	55 95       	asr	r21
    1b6a:	47 95       	ror	r20
    1b6c:	8a 95       	dec	r24
    1b6e:	e2 f7       	brpl	.-8      	; 0x1b68 <DIO_GetPinvalue+0x76>
    1b70:	ca 01       	movw	r24, r20
    1b72:	81 70       	andi	r24, 0x01	; 1
    1b74:	89 83       	std	Y+1, r24	; 0x01
    1b76:	35 c0       	rjmp	.+106    	; 0x1be2 <DIO_GetPinvalue+0xf0>
			 case portB: Pinvalue=GET_BIT(PORTB_REG,Pin_ID); break;
    1b78:	e8 e3       	ldi	r30, 0x38	; 56
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	8b 81       	ldd	r24, Y+3	; 0x03
    1b84:	88 2f       	mov	r24, r24
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	a9 01       	movw	r20, r18
    1b8a:	02 c0       	rjmp	.+4      	; 0x1b90 <DIO_GetPinvalue+0x9e>
    1b8c:	55 95       	asr	r21
    1b8e:	47 95       	ror	r20
    1b90:	8a 95       	dec	r24
    1b92:	e2 f7       	brpl	.-8      	; 0x1b8c <DIO_GetPinvalue+0x9a>
    1b94:	ca 01       	movw	r24, r20
    1b96:	81 70       	andi	r24, 0x01	; 1
    1b98:	89 83       	std	Y+1, r24	; 0x01
    1b9a:	23 c0       	rjmp	.+70     	; 0x1be2 <DIO_GetPinvalue+0xf0>
			 case portC:Pinvalue= GET_BIT(PORTC_REG,Pin_ID); break;
    1b9c:	e5 e3       	ldi	r30, 0x35	; 53
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 81       	ld	r24, Z
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	30 e0       	ldi	r19, 0x00	; 0
    1ba6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ba8:	88 2f       	mov	r24, r24
    1baa:	90 e0       	ldi	r25, 0x00	; 0
    1bac:	a9 01       	movw	r20, r18
    1bae:	02 c0       	rjmp	.+4      	; 0x1bb4 <DIO_GetPinvalue+0xc2>
    1bb0:	55 95       	asr	r21
    1bb2:	47 95       	ror	r20
    1bb4:	8a 95       	dec	r24
    1bb6:	e2 f7       	brpl	.-8      	; 0x1bb0 <DIO_GetPinvalue+0xbe>
    1bb8:	ca 01       	movw	r24, r20
    1bba:	81 70       	andi	r24, 0x01	; 1
    1bbc:	89 83       	std	Y+1, r24	; 0x01
    1bbe:	11 c0       	rjmp	.+34     	; 0x1be2 <DIO_GetPinvalue+0xf0>
			 case portD: Pinvalue=GET_BIT(PORTD_REG,Pin_ID); break;
    1bc0:	e2 e3       	ldi	r30, 0x32	; 50
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	28 2f       	mov	r18, r24
    1bc8:	30 e0       	ldi	r19, 0x00	; 0
    1bca:	8b 81       	ldd	r24, Y+3	; 0x03
    1bcc:	88 2f       	mov	r24, r24
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	a9 01       	movw	r20, r18
    1bd2:	02 c0       	rjmp	.+4      	; 0x1bd8 <DIO_GetPinvalue+0xe6>
    1bd4:	55 95       	asr	r21
    1bd6:	47 95       	ror	r20
    1bd8:	8a 95       	dec	r24
    1bda:	e2 f7       	brpl	.-8      	; 0x1bd4 <DIO_GetPinvalue+0xe2>
    1bdc:	ca 01       	movw	r24, r20
    1bde:	81 70       	andi	r24, 0x01	; 1
    1be0:	89 83       	std	Y+1, r24	; 0x01

	}
	}

	return Pinvalue;
    1be2:	89 81       	ldd	r24, Y+1	; 0x01
    }
    1be4:	0f 90       	pop	r0
    1be6:	0f 90       	pop	r0
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	0f 90       	pop	r0
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	08 95       	ret

00001bf4 <LCD>:
 *  Created on: Aug 2, 2023
 *      Author: abdel
 */
#include "../DIO/DIO.h"
#include <util/delay.h>
void LCD(void){
    1bf4:	df 93       	push	r29
    1bf6:	cf 93       	push	r28
    1bf8:	cd b7       	in	r28, 0x3d	; 61
    1bfa:	de b7       	in	r29, 0x3e	; 62
    1bfc:	6c 97       	sbiw	r28, 0x1c	; 28
    1bfe:	0f b6       	in	r0, 0x3f	; 63
    1c00:	f8 94       	cli
    1c02:	de bf       	out	0x3e, r29	; 62
    1c04:	0f be       	out	0x3f, r0	; 63
    1c06:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPortDirection(portA,output);
    1c08:	80 e0       	ldi	r24, 0x00	; 0
    1c0a:	61 e0       	ldi	r22, 0x01	; 1
    1c0c:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_SetPortDirection>
	DIO_SetPinDirection(portB,pin0,output);
    1c10:	81 e0       	ldi	r24, 0x01	; 1
    1c12:	60 e0       	ldi	r22, 0x00	; 0
    1c14:	41 e0       	ldi	r20, 0x01	; 1
    1c16:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portB,pin1,output);
    1c1a:	81 e0       	ldi	r24, 0x01	; 1
    1c1c:	61 e0       	ldi	r22, 0x01	; 1
    1c1e:	41 e0       	ldi	r20, 0x01	; 1
    1c20:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portB,pin2,output);
    1c24:	81 e0       	ldi	r24, 0x01	; 1
    1c26:	62 e0       	ldi	r22, 0x02	; 2
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
    LCD_Initialize();
    1c2e:	0e 94 a3 05 	call	0xb46	; 0xb46 <LCD_Initialize>
//    _delay_ms(700);
//    LCD_SENDCOMMAND(0x01);
//    LCD_SENDSTR(" CODE:CEE224 ");
//    _delay_ms(700);
//    LCD_SENDCOMMAND(0x01);
    LCD_SENDSTR("   RFID Based    ");
    1c32:	80 e6       	ldi	r24, 0x60	; 96
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
    1c3a:	80 e0       	ldi	r24, 0x00	; 0
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	af e2       	ldi	r26, 0x2F	; 47
    1c40:	b4 e4       	ldi	r27, 0x44	; 68
    1c42:	89 8f       	std	Y+25, r24	; 0x19
    1c44:	9a 8f       	std	Y+26, r25	; 0x1a
    1c46:	ab 8f       	std	Y+27, r26	; 0x1b
    1c48:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c4a:	69 8d       	ldd	r22, Y+25	; 0x19
    1c4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1c4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1c50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	30 e0       	ldi	r19, 0x00	; 0
    1c56:	4a ef       	ldi	r20, 0xFA	; 250
    1c58:	54 e4       	ldi	r21, 0x44	; 68
    1c5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c5e:	dc 01       	movw	r26, r24
    1c60:	cb 01       	movw	r24, r22
    1c62:	8d 8b       	std	Y+21, r24	; 0x15
    1c64:	9e 8b       	std	Y+22, r25	; 0x16
    1c66:	af 8b       	std	Y+23, r26	; 0x17
    1c68:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1c6a:	6d 89       	ldd	r22, Y+21	; 0x15
    1c6c:	7e 89       	ldd	r23, Y+22	; 0x16
    1c6e:	8f 89       	ldd	r24, Y+23	; 0x17
    1c70:	98 8d       	ldd	r25, Y+24	; 0x18
    1c72:	20 e0       	ldi	r18, 0x00	; 0
    1c74:	30 e0       	ldi	r19, 0x00	; 0
    1c76:	40 e8       	ldi	r20, 0x80	; 128
    1c78:	5f e3       	ldi	r21, 0x3F	; 63
    1c7a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1c7e:	88 23       	and	r24, r24
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <LCD+0x98>
		__ticks = 1;
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	90 e0       	ldi	r25, 0x00	; 0
    1c86:	9c 8b       	std	Y+20, r25	; 0x14
    1c88:	8b 8b       	std	Y+19, r24	; 0x13
    1c8a:	3f c0       	rjmp	.+126    	; 0x1d0a <LCD+0x116>
	else if (__tmp > 65535)
    1c8c:	6d 89       	ldd	r22, Y+21	; 0x15
    1c8e:	7e 89       	ldd	r23, Y+22	; 0x16
    1c90:	8f 89       	ldd	r24, Y+23	; 0x17
    1c92:	98 8d       	ldd	r25, Y+24	; 0x18
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	3f ef       	ldi	r19, 0xFF	; 255
    1c98:	4f e7       	ldi	r20, 0x7F	; 127
    1c9a:	57 e4       	ldi	r21, 0x47	; 71
    1c9c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ca0:	18 16       	cp	r1, r24
    1ca2:	4c f5       	brge	.+82     	; 0x1cf6 <LCD+0x102>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ca4:	69 8d       	ldd	r22, Y+25	; 0x19
    1ca6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1ca8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1caa:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1cac:	20 e0       	ldi	r18, 0x00	; 0
    1cae:	30 e0       	ldi	r19, 0x00	; 0
    1cb0:	40 e2       	ldi	r20, 0x20	; 32
    1cb2:	51 e4       	ldi	r21, 0x41	; 65
    1cb4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb8:	dc 01       	movw	r26, r24
    1cba:	cb 01       	movw	r24, r22
    1cbc:	bc 01       	movw	r22, r24
    1cbe:	cd 01       	movw	r24, r26
    1cc0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cc4:	dc 01       	movw	r26, r24
    1cc6:	cb 01       	movw	r24, r22
    1cc8:	9c 8b       	std	Y+20, r25	; 0x14
    1cca:	8b 8b       	std	Y+19, r24	; 0x13
    1ccc:	0f c0       	rjmp	.+30     	; 0x1cec <LCD+0xf8>
    1cce:	88 ec       	ldi	r24, 0xC8	; 200
    1cd0:	90 e0       	ldi	r25, 0x00	; 0
    1cd2:	9a 8b       	std	Y+18, r25	; 0x12
    1cd4:	89 8b       	std	Y+17, r24	; 0x11
    1cd6:	89 89       	ldd	r24, Y+17	; 0x11
    1cd8:	9a 89       	ldd	r25, Y+18	; 0x12
    1cda:	01 97       	sbiw	r24, 0x01	; 1
    1cdc:	f1 f7       	brne	.-4      	; 0x1cda <LCD+0xe6>
    1cde:	9a 8b       	std	Y+18, r25	; 0x12
    1ce0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1ce2:	8b 89       	ldd	r24, Y+19	; 0x13
    1ce4:	9c 89       	ldd	r25, Y+20	; 0x14
    1ce6:	01 97       	sbiw	r24, 0x01	; 1
    1ce8:	9c 8b       	std	Y+20, r25	; 0x14
    1cea:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1cec:	8b 89       	ldd	r24, Y+19	; 0x13
    1cee:	9c 89       	ldd	r25, Y+20	; 0x14
    1cf0:	00 97       	sbiw	r24, 0x00	; 0
    1cf2:	69 f7       	brne	.-38     	; 0x1cce <LCD+0xda>
    1cf4:	14 c0       	rjmp	.+40     	; 0x1d1e <LCD+0x12a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cf6:	6d 89       	ldd	r22, Y+21	; 0x15
    1cf8:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfa:	8f 89       	ldd	r24, Y+23	; 0x17
    1cfc:	98 8d       	ldd	r25, Y+24	; 0x18
    1cfe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d02:	dc 01       	movw	r26, r24
    1d04:	cb 01       	movw	r24, r22
    1d06:	9c 8b       	std	Y+20, r25	; 0x14
    1d08:	8b 8b       	std	Y+19, r24	; 0x13
    1d0a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d0c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d0e:	98 8b       	std	Y+16, r25	; 0x10
    1d10:	8f 87       	std	Y+15, r24	; 0x0f
    1d12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d14:	98 89       	ldd	r25, Y+16	; 0x10
    1d16:	01 97       	sbiw	r24, 0x01	; 1
    1d18:	f1 f7       	brne	.-4      	; 0x1d16 <LCD+0x122>
    1d1a:	98 8b       	std	Y+16, r25	; 0x10
    1d1c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(700);
    LCD_SENDCOMMAND(0x01);
    1d1e:	81 e0       	ldi	r24, 0x01	; 1
    1d20:	90 e0       	ldi	r25, 0x00	; 0
    1d22:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
    LCD_SENDSTR("   Attendance ");
    1d26:	82 e7       	ldi	r24, 0x72	; 114
    1d28:	90 e0       	ldi	r25, 0x00	; 0
    1d2a:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
    LCD_SET_COURSER(1,4);
    1d2e:	81 e0       	ldi	r24, 0x01	; 1
    1d30:	90 e0       	ldi	r25, 0x00	; 0
    1d32:	64 e0       	ldi	r22, 0x04	; 4
    1d34:	70 e0       	ldi	r23, 0x00	; 0
    1d36:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>
    LCD_SENDSTR(" System");
    1d3a:	81 e8       	ldi	r24, 0x81	; 129
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
    1d42:	80 e0       	ldi	r24, 0x00	; 0
    1d44:	90 e0       	ldi	r25, 0x00	; 0
    1d46:	af e2       	ldi	r26, 0x2F	; 47
    1d48:	b4 e4       	ldi	r27, 0x44	; 68
    1d4a:	8b 87       	std	Y+11, r24	; 0x0b
    1d4c:	9c 87       	std	Y+12, r25	; 0x0c
    1d4e:	ad 87       	std	Y+13, r26	; 0x0d
    1d50:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d52:	6b 85       	ldd	r22, Y+11	; 0x0b
    1d54:	7c 85       	ldd	r23, Y+12	; 0x0c
    1d56:	8d 85       	ldd	r24, Y+13	; 0x0d
    1d58:	9e 85       	ldd	r25, Y+14	; 0x0e
    1d5a:	20 e0       	ldi	r18, 0x00	; 0
    1d5c:	30 e0       	ldi	r19, 0x00	; 0
    1d5e:	4a ef       	ldi	r20, 0xFA	; 250
    1d60:	54 e4       	ldi	r21, 0x44	; 68
    1d62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d66:	dc 01       	movw	r26, r24
    1d68:	cb 01       	movw	r24, r22
    1d6a:	8f 83       	std	Y+7, r24	; 0x07
    1d6c:	98 87       	std	Y+8, r25	; 0x08
    1d6e:	a9 87       	std	Y+9, r26	; 0x09
    1d70:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1d72:	6f 81       	ldd	r22, Y+7	; 0x07
    1d74:	78 85       	ldd	r23, Y+8	; 0x08
    1d76:	89 85       	ldd	r24, Y+9	; 0x09
    1d78:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d7a:	20 e0       	ldi	r18, 0x00	; 0
    1d7c:	30 e0       	ldi	r19, 0x00	; 0
    1d7e:	40 e8       	ldi	r20, 0x80	; 128
    1d80:	5f e3       	ldi	r21, 0x3F	; 63
    1d82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d86:	88 23       	and	r24, r24
    1d88:	2c f4       	brge	.+10     	; 0x1d94 <LCD+0x1a0>
		__ticks = 1;
    1d8a:	81 e0       	ldi	r24, 0x01	; 1
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9e 83       	std	Y+6, r25	; 0x06
    1d90:	8d 83       	std	Y+5, r24	; 0x05
    1d92:	3f c0       	rjmp	.+126    	; 0x1e12 <LCD+0x21e>
	else if (__tmp > 65535)
    1d94:	6f 81       	ldd	r22, Y+7	; 0x07
    1d96:	78 85       	ldd	r23, Y+8	; 0x08
    1d98:	89 85       	ldd	r24, Y+9	; 0x09
    1d9a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d9c:	20 e0       	ldi	r18, 0x00	; 0
    1d9e:	3f ef       	ldi	r19, 0xFF	; 255
    1da0:	4f e7       	ldi	r20, 0x7F	; 127
    1da2:	57 e4       	ldi	r21, 0x47	; 71
    1da4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1da8:	18 16       	cp	r1, r24
    1daa:	4c f5       	brge	.+82     	; 0x1dfe <LCD+0x20a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1dac:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dae:	7c 85       	ldd	r23, Y+12	; 0x0c
    1db0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1db2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1db4:	20 e0       	ldi	r18, 0x00	; 0
    1db6:	30 e0       	ldi	r19, 0x00	; 0
    1db8:	40 e2       	ldi	r20, 0x20	; 32
    1dba:	51 e4       	ldi	r21, 0x41	; 65
    1dbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1dc0:	dc 01       	movw	r26, r24
    1dc2:	cb 01       	movw	r24, r22
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	9e 83       	std	Y+6, r25	; 0x06
    1dd2:	8d 83       	std	Y+5, r24	; 0x05
    1dd4:	0f c0       	rjmp	.+30     	; 0x1df4 <LCD+0x200>
    1dd6:	88 ec       	ldi	r24, 0xC8	; 200
    1dd8:	90 e0       	ldi	r25, 0x00	; 0
    1dda:	9c 83       	std	Y+4, r25	; 0x04
    1ddc:	8b 83       	std	Y+3, r24	; 0x03
    1dde:	8b 81       	ldd	r24, Y+3	; 0x03
    1de0:	9c 81       	ldd	r25, Y+4	; 0x04
    1de2:	01 97       	sbiw	r24, 0x01	; 1
    1de4:	f1 f7       	brne	.-4      	; 0x1de2 <LCD+0x1ee>
    1de6:	9c 83       	std	Y+4, r25	; 0x04
    1de8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dea:	8d 81       	ldd	r24, Y+5	; 0x05
    1dec:	9e 81       	ldd	r25, Y+6	; 0x06
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	9e 83       	std	Y+6, r25	; 0x06
    1df2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1df4:	8d 81       	ldd	r24, Y+5	; 0x05
    1df6:	9e 81       	ldd	r25, Y+6	; 0x06
    1df8:	00 97       	sbiw	r24, 0x00	; 0
    1dfa:	69 f7       	brne	.-38     	; 0x1dd6 <LCD+0x1e2>
    1dfc:	14 c0       	rjmp	.+40     	; 0x1e26 <LCD+0x232>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dfe:	6f 81       	ldd	r22, Y+7	; 0x07
    1e00:	78 85       	ldd	r23, Y+8	; 0x08
    1e02:	89 85       	ldd	r24, Y+9	; 0x09
    1e04:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e0a:	dc 01       	movw	r26, r24
    1e0c:	cb 01       	movw	r24, r22
    1e0e:	9e 83       	std	Y+6, r25	; 0x06
    1e10:	8d 83       	std	Y+5, r24	; 0x05
    1e12:	8d 81       	ldd	r24, Y+5	; 0x05
    1e14:	9e 81       	ldd	r25, Y+6	; 0x06
    1e16:	9a 83       	std	Y+2, r25	; 0x02
    1e18:	89 83       	std	Y+1, r24	; 0x01
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	9a 81       	ldd	r25, Y+2	; 0x02
    1e1e:	01 97       	sbiw	r24, 0x01	; 1
    1e20:	f1 f7       	brne	.-4      	; 0x1e1e <LCD+0x22a>
    1e22:	9a 83       	std	Y+2, r25	; 0x02
    1e24:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(700);

    LCD_SENDCOMMAND(0x01);
    1e26:	81 e0       	ldi	r24, 0x01	; 1
    1e28:	90 e0       	ldi	r25, 0x00	; 0
    1e2a:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
    LCD_SENDSTR(" Place your card:");
    1e2e:	89 e8       	ldi	r24, 0x89	; 137
    1e30:	90 e0       	ldi	r25, 0x00	; 0
    1e32:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
    LCD_SET_COURSER(1,0);
    1e36:	81 e0       	ldi	r24, 0x01	; 1
    1e38:	90 e0       	ldi	r25, 0x00	; 0
    1e3a:	60 e0       	ldi	r22, 0x00	; 0
    1e3c:	70 e0       	ldi	r23, 0x00	; 0
    1e3e:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>

}
    1e42:	6c 96       	adiw	r28, 0x1c	; 28
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	f8 94       	cli
    1e48:	de bf       	out	0x3e, r29	; 62
    1e4a:	0f be       	out	0x3f, r0	; 63
    1e4c:	cd bf       	out	0x3d, r28	; 61
    1e4e:	cf 91       	pop	r28
    1e50:	df 91       	pop	r29
    1e52:	08 95       	ret

00001e54 <main>:
#define LCD_clear LCD_SendCommand(0b00000001);
char result[10];
int segm=0;
int main(void)

{
    1e54:	0f 93       	push	r16
    1e56:	1f 93       	push	r17
    1e58:	df 93       	push	r29
    1e5a:	cf 93       	push	r28
    1e5c:	cd b7       	in	r28, 0x3d	; 61
    1e5e:	de b7       	in	r29, 0x3e	; 62
    1e60:	c4 55       	subi	r28, 0x54	; 84
    1e62:	d0 40       	sbci	r29, 0x00	; 0
    1e64:	0f b6       	in	r0, 0x3f	; 63
    1e66:	f8 94       	cli
    1e68:	de bf       	out	0x3e, r29	; 62
    1e6a:	0f be       	out	0x3f, r0	; 63
    1e6c:	cd bf       	out	0x3d, r28	; 61
	        UCSRB=0x18;
    1e6e:	ea e2       	ldi	r30, 0x2A	; 42
    1e70:	f0 e0       	ldi	r31, 0x00	; 0
    1e72:	88 e1       	ldi	r24, 0x18	; 24
    1e74:	80 83       	st	Z, r24
		   	UCSRC=0x86;
    1e76:	e0 e4       	ldi	r30, 0x40	; 64
    1e78:	f0 e0       	ldi	r31, 0x00	; 0
    1e7a:	86 e8       	ldi	r24, 0x86	; 134
    1e7c:	80 83       	st	Z, r24
		   	UBRRL=51;
    1e7e:	e9 e2       	ldi	r30, 0x29	; 41
    1e80:	f0 e0       	ldi	r31, 0x00	; 0
    1e82:	83 e3       	ldi	r24, 0x33	; 51
    1e84:	80 83       	st	Z, r24
		   	UBRRH=0;
    1e86:	e0 e4       	ldi	r30, 0x40	; 64
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	10 82       	st	Z, r1

	DIO_SetPortDirection(portC,output);
    1e8c:	82 e0       	ldi	r24, 0x02	; 2
    1e8e:	61 e0       	ldi	r22, 0x01	; 1
    1e90:	0e 94 af 0a 	call	0x155e	; 0x155e <DIO_SetPortDirection>
	PORTC |= (1<PC7);                       //enable PC7 internal pullup
    1e94:	a5 e3       	ldi	r26, 0x35	; 53
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	e5 e3       	ldi	r30, 0x35	; 53
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	81 60       	ori	r24, 0x01	; 1
    1ea0:	8c 93       	st	X, r24
	DIO_SetPinDirection(portB,pin3,output);	//make PB3 pin an output for LED
    1ea2:	81 e0       	ldi	r24, 0x01	; 1
    1ea4:	63 e0       	ldi	r22, 0x03	; 3
    1ea6:	41 e0       	ldi	r20, 0x01	; 1
    1ea8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portB,pin4,output);	//make PB4 pin an output for LED
    1eac:	81 e0       	ldi	r24, 0x01	; 1
    1eae:	64 e0       	ldi	r22, 0x04	; 4
    1eb0:	41 e0       	ldi	r20, 0x01	; 1
    1eb2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portB,pin5,output);
    1eb6:	81 e0       	ldi	r24, 0x01	; 1
    1eb8:	65 e0       	ldi	r22, 0x05	; 5
    1eba:	41 e0       	ldi	r20, 0x01	; 1
    1ebc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
    DIO_SetPinDirection(portD,pin7,input);
    1ec0:	83 e0       	ldi	r24, 0x03	; 3
    1ec2:	67 e0       	ldi	r22, 0x07	; 7
    1ec4:	40 e0       	ldi	r20, 0x00	; 0
    1ec6:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
    LCD();
    1eca:	0e 94 fa 0d 	call	0x1bf4	; 0x1bf4 <LCD>
    DIO_SetPinDirection(portD,pin2,input);
    1ece:	83 e0       	ldi	r24, 0x03	; 3
    1ed0:	62 e0       	ldi	r22, 0x02	; 2
    1ed2:	40 e0       	ldi	r20, 0x00	; 0
    1ed4:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
    DIO_SetPinDirection(portD,pin0,output);
    1ed8:	83 e0       	ldi	r24, 0x03	; 3
    1eda:	60 e0       	ldi	r22, 0x00	; 0
    1edc:	41 e0       	ldi	r20, 0x01	; 1
    1ede:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
    DIO_SetPinDirection(portD,pin1,output);
    1ee2:	83 e0       	ldi	r24, 0x03	; 3
    1ee4:	61 e0       	ldi	r22, 0x01	; 1
    1ee6:	41 e0       	ldi	r20, 0x01	; 1
    1ee8:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
    DIO_SetPinDirection(portD,pin4,output);
    1eec:	83 e0       	ldi	r24, 0x03	; 3
    1eee:	64 e0       	ldi	r22, 0x04	; 4
    1ef0:	41 e0       	ldi	r20, 0x01	; 1
    1ef2:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>
    DIO_SetPinDirection(portD,pin5,output);
    1ef6:	83 e0       	ldi	r24, 0x03	; 3
    1ef8:	65 e0       	ldi	r22, 0x05	; 5
    1efa:	41 e0       	ldi	r20, 0x01	; 1
    1efc:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <DIO_SetPinDirection>

    SET_BIT(MCUCR,1);
    1f00:	a5 e5       	ldi	r26, 0x55	; 85
    1f02:	b0 e0       	ldi	r27, 0x00	; 0
    1f04:	e5 e5       	ldi	r30, 0x55	; 85
    1f06:	f0 e0       	ldi	r31, 0x00	; 0
    1f08:	80 81       	ld	r24, Z
    1f0a:	82 60       	ori	r24, 0x02	; 2
    1f0c:	8c 93       	st	X, r24
    CLR_BIT(MCUCR,0);
    1f0e:	a5 e5       	ldi	r26, 0x55	; 85
    1f10:	b0 e0       	ldi	r27, 0x00	; 0
    1f12:	e5 e5       	ldi	r30, 0x55	; 85
    1f14:	f0 e0       	ldi	r31, 0x00	; 0
    1f16:	80 81       	ld	r24, Z
    1f18:	8e 7f       	andi	r24, 0xFE	; 254
    1f1a:	8c 93       	st	X, r24
    SET_BIT(GICR,6);
    1f1c:	ab e5       	ldi	r26, 0x5B	; 91
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	eb e5       	ldi	r30, 0x5B	; 91
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	80 64       	ori	r24, 0x40	; 64
    1f28:	8c 93       	st	X, r24
    SET_BIT(SREG,7);
    1f2a:	af e5       	ldi	r26, 0x5F	; 95
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	ef e5       	ldi	r30, 0x5F	; 95
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 81       	ld	r24, Z
    1f34:	80 68       	ori	r24, 0x80	; 128
    1f36:	8c 93       	st	X, r24

    while(1)
    {

        for(i=0;i<12;i++)
    1f38:	10 92 90 01 	sts	0x0190, r1
    1f3c:	10 92 8f 01 	sts	0x018F, r1
    1f40:	13 c0       	rjmp	.+38     	; 0x1f68 <main+0x114>
         {
        	  rfid[i]=UART_Recieve();
    1f42:	00 91 8f 01 	lds	r16, 0x018F
    1f46:	10 91 90 01 	lds	r17, 0x0190
    1f4a:	0e 94 2f 14 	call	0x285e	; 0x285e <UART_Recieve>
    1f4e:	f8 01       	movw	r30, r16
    1f50:	ee 57       	subi	r30, 0x7E	; 126
    1f52:	fe 4f       	sbci	r31, 0xFE	; 254
    1f54:	80 83       	st	Z, r24
    SET_BIT(SREG,7);

    while(1)
    {

        for(i=0;i<12;i++)
    1f56:	80 91 8f 01 	lds	r24, 0x018F
    1f5a:	90 91 90 01 	lds	r25, 0x0190
    1f5e:	01 96       	adiw	r24, 0x01	; 1
    1f60:	90 93 90 01 	sts	0x0190, r25
    1f64:	80 93 8f 01 	sts	0x018F, r24
    1f68:	80 91 8f 01 	lds	r24, 0x018F
    1f6c:	90 91 90 01 	lds	r25, 0x0190
    1f70:	8c 30       	cpi	r24, 0x0C	; 12
    1f72:	91 05       	cpc	r25, r1
    1f74:	30 f3       	brcs	.-52     	; 0x1f42 <main+0xee>
        	  rfid[i]=UART_Recieve();
//        	   UART_Transmit(rfid[i]);

          }

         if(strncmp(rfid,value1,12)==0 && inc2!="\n")
    1f76:	82 e8       	ldi	r24, 0x82	; 130
    1f78:	91 e0       	ldi	r25, 0x01	; 1
    1f7a:	21 e5       	ldi	r18, 0x51	; 81
    1f7c:	31 e0       	ldi	r19, 0x01	; 1
    1f7e:	b9 01       	movw	r22, r18
    1f80:	4c e0       	ldi	r20, 0x0C	; 12
    1f82:	50 e0       	ldi	r21, 0x00	; 0
    1f84:	0e 94 75 14 	call	0x28ea	; 0x28ea <strncmp>
    1f88:	00 97       	sbiw	r24, 0x00	; 0
    1f8a:	09 f0       	breq	.+2      	; 0x1f8e <main+0x13a>
    1f8c:	77 c1       	rjmp	.+750    	; 0x227c <main+0x428>
    1f8e:	80 91 80 01 	lds	r24, 0x0180
    1f92:	88 2f       	mov	r24, r24
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	8b 39       	cpi	r24, 0x9B	; 155
    1f9a:	92 07       	cpc	r25, r18
    1f9c:	09 f4       	brne	.+2      	; 0x1fa0 <main+0x14c>
    1f9e:	6e c1       	rjmp	.+732    	; 0x227c <main+0x428>
               {
          	    	LCD_SENDCOMMAND(0x01);
    1fa0:	81 e0       	ldi	r24, 0x01	; 1
    1fa2:	90 e0       	ldi	r25, 0x00	; 0
    1fa4:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
                   	LCD_SET_COURSER(0,1);
    1fa8:	80 e0       	ldi	r24, 0x00	; 0
    1faa:	90 e0       	ldi	r25, 0x00	; 0
    1fac:	61 e0       	ldi	r22, 0x01	; 1
    1fae:	70 e0       	ldi	r23, 0x00	; 0
    1fb0:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>
                   	LCD_SENDSTR(" Attendance");
    1fb4:	8d e9       	ldi	r24, 0x9D	; 157
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
                   	LCD_SET_COURSER(1,1);
    1fbc:	81 e0       	ldi	r24, 0x01	; 1
    1fbe:	90 e0       	ldi	r25, 0x00	; 0
    1fc0:	61 e0       	ldi	r22, 0x01	; 1
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>
                   	LCD_SENDSTR(" Registered");
    1fc8:	89 ea       	ldi	r24, 0xA9	; 169
    1fca:	90 e0       	ldi	r25, 0x00	; 0
    1fcc:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
                   	DIO_SetPinValue(portB,pin4,1);
    1fd0:	81 e0       	ldi	r24, 0x01	; 1
    1fd2:	64 e0       	ldi	r22, 0x04	; 4
    1fd4:	41 e0       	ldi	r20, 0x01	; 1
    1fd6:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_SetPinValue>
    1fda:	fe 01       	movw	r30, r28
    1fdc:	ef 5a       	subi	r30, 0xAF	; 175
    1fde:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe0:	80 e0       	ldi	r24, 0x00	; 0
    1fe2:	90 e0       	ldi	r25, 0x00	; 0
    1fe4:	a6 e9       	ldi	r26, 0x96	; 150
    1fe6:	b3 e4       	ldi	r27, 0x43	; 67
    1fe8:	80 83       	st	Z, r24
    1fea:	91 83       	std	Z+1, r25	; 0x01
    1fec:	a2 83       	std	Z+2, r26	; 0x02
    1fee:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ff0:	8e 01       	movw	r16, r28
    1ff2:	03 5b       	subi	r16, 0xB3	; 179
    1ff4:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff6:	fe 01       	movw	r30, r28
    1ff8:	ef 5a       	subi	r30, 0xAF	; 175
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	60 81       	ld	r22, Z
    1ffe:	71 81       	ldd	r23, Z+1	; 0x01
    2000:	82 81       	ldd	r24, Z+2	; 0x02
    2002:	93 81       	ldd	r25, Z+3	; 0x03
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	4a ef       	ldi	r20, 0xFA	; 250
    200a:	54 e4       	ldi	r21, 0x44	; 68
    200c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2010:	dc 01       	movw	r26, r24
    2012:	cb 01       	movw	r24, r22
    2014:	f8 01       	movw	r30, r16
    2016:	80 83       	st	Z, r24
    2018:	91 83       	std	Z+1, r25	; 0x01
    201a:	a2 83       	std	Z+2, r26	; 0x02
    201c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    201e:	fe 01       	movw	r30, r28
    2020:	e3 5b       	subi	r30, 0xB3	; 179
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	60 81       	ld	r22, Z
    2026:	71 81       	ldd	r23, Z+1	; 0x01
    2028:	82 81       	ldd	r24, Z+2	; 0x02
    202a:	93 81       	ldd	r25, Z+3	; 0x03
    202c:	20 e0       	ldi	r18, 0x00	; 0
    202e:	30 e0       	ldi	r19, 0x00	; 0
    2030:	40 e8       	ldi	r20, 0x80	; 128
    2032:	5f e3       	ldi	r21, 0x3F	; 63
    2034:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2038:	88 23       	and	r24, r24
    203a:	44 f4       	brge	.+16     	; 0x204c <main+0x1f8>
		__ticks = 1;
    203c:	fe 01       	movw	r30, r28
    203e:	e5 5b       	subi	r30, 0xB5	; 181
    2040:	ff 4f       	sbci	r31, 0xFF	; 255
    2042:	81 e0       	ldi	r24, 0x01	; 1
    2044:	90 e0       	ldi	r25, 0x00	; 0
    2046:	91 83       	std	Z+1, r25	; 0x01
    2048:	80 83       	st	Z, r24
    204a:	64 c0       	rjmp	.+200    	; 0x2114 <main+0x2c0>
	else if (__tmp > 65535)
    204c:	fe 01       	movw	r30, r28
    204e:	e3 5b       	subi	r30, 0xB3	; 179
    2050:	ff 4f       	sbci	r31, 0xFF	; 255
    2052:	60 81       	ld	r22, Z
    2054:	71 81       	ldd	r23, Z+1	; 0x01
    2056:	82 81       	ldd	r24, Z+2	; 0x02
    2058:	93 81       	ldd	r25, Z+3	; 0x03
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	3f ef       	ldi	r19, 0xFF	; 255
    205e:	4f e7       	ldi	r20, 0x7F	; 127
    2060:	57 e4       	ldi	r21, 0x47	; 71
    2062:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2066:	18 16       	cp	r1, r24
    2068:	0c f0       	brlt	.+2      	; 0x206c <main+0x218>
    206a:	43 c0       	rjmp	.+134    	; 0x20f2 <main+0x29e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    206c:	fe 01       	movw	r30, r28
    206e:	ef 5a       	subi	r30, 0xAF	; 175
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	60 81       	ld	r22, Z
    2074:	71 81       	ldd	r23, Z+1	; 0x01
    2076:	82 81       	ldd	r24, Z+2	; 0x02
    2078:	93 81       	ldd	r25, Z+3	; 0x03
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	40 e2       	ldi	r20, 0x20	; 32
    2080:	51 e4       	ldi	r21, 0x41	; 65
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	8e 01       	movw	r16, r28
    208c:	05 5b       	subi	r16, 0xB5	; 181
    208e:	1f 4f       	sbci	r17, 0xFF	; 255
    2090:	bc 01       	movw	r22, r24
    2092:	cd 01       	movw	r24, r26
    2094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2098:	dc 01       	movw	r26, r24
    209a:	cb 01       	movw	r24, r22
    209c:	f8 01       	movw	r30, r16
    209e:	91 83       	std	Z+1, r25	; 0x01
    20a0:	80 83       	st	Z, r24
    20a2:	1f c0       	rjmp	.+62     	; 0x20e2 <main+0x28e>
    20a4:	fe 01       	movw	r30, r28
    20a6:	e7 5b       	subi	r30, 0xB7	; 183
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	88 ec       	ldi	r24, 0xC8	; 200
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	91 83       	std	Z+1, r25	; 0x01
    20b0:	80 83       	st	Z, r24
    20b2:	fe 01       	movw	r30, r28
    20b4:	e7 5b       	subi	r30, 0xB7	; 183
    20b6:	ff 4f       	sbci	r31, 0xFF	; 255
    20b8:	80 81       	ld	r24, Z
    20ba:	91 81       	ldd	r25, Z+1	; 0x01
    20bc:	01 97       	sbiw	r24, 0x01	; 1
    20be:	f1 f7       	brne	.-4      	; 0x20bc <main+0x268>
    20c0:	fe 01       	movw	r30, r28
    20c2:	e7 5b       	subi	r30, 0xB7	; 183
    20c4:	ff 4f       	sbci	r31, 0xFF	; 255
    20c6:	91 83       	std	Z+1, r25	; 0x01
    20c8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20ca:	de 01       	movw	r26, r28
    20cc:	a5 5b       	subi	r26, 0xB5	; 181
    20ce:	bf 4f       	sbci	r27, 0xFF	; 255
    20d0:	fe 01       	movw	r30, r28
    20d2:	e5 5b       	subi	r30, 0xB5	; 181
    20d4:	ff 4f       	sbci	r31, 0xFF	; 255
    20d6:	80 81       	ld	r24, Z
    20d8:	91 81       	ldd	r25, Z+1	; 0x01
    20da:	01 97       	sbiw	r24, 0x01	; 1
    20dc:	11 96       	adiw	r26, 0x01	; 1
    20de:	9c 93       	st	X, r25
    20e0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e2:	fe 01       	movw	r30, r28
    20e4:	e5 5b       	subi	r30, 0xB5	; 181
    20e6:	ff 4f       	sbci	r31, 0xFF	; 255
    20e8:	80 81       	ld	r24, Z
    20ea:	91 81       	ldd	r25, Z+1	; 0x01
    20ec:	00 97       	sbiw	r24, 0x00	; 0
    20ee:	d1 f6       	brne	.-76     	; 0x20a4 <main+0x250>
    20f0:	27 c0       	rjmp	.+78     	; 0x2140 <main+0x2ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20f2:	8e 01       	movw	r16, r28
    20f4:	05 5b       	subi	r16, 0xB5	; 181
    20f6:	1f 4f       	sbci	r17, 0xFF	; 255
    20f8:	fe 01       	movw	r30, r28
    20fa:	e3 5b       	subi	r30, 0xB3	; 179
    20fc:	ff 4f       	sbci	r31, 0xFF	; 255
    20fe:	60 81       	ld	r22, Z
    2100:	71 81       	ldd	r23, Z+1	; 0x01
    2102:	82 81       	ldd	r24, Z+2	; 0x02
    2104:	93 81       	ldd	r25, Z+3	; 0x03
    2106:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210a:	dc 01       	movw	r26, r24
    210c:	cb 01       	movw	r24, r22
    210e:	f8 01       	movw	r30, r16
    2110:	91 83       	std	Z+1, r25	; 0x01
    2112:	80 83       	st	Z, r24
    2114:	de 01       	movw	r26, r28
    2116:	a9 5b       	subi	r26, 0xB9	; 185
    2118:	bf 4f       	sbci	r27, 0xFF	; 255
    211a:	fe 01       	movw	r30, r28
    211c:	e5 5b       	subi	r30, 0xB5	; 181
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 81       	ld	r24, Z
    2122:	91 81       	ldd	r25, Z+1	; 0x01
    2124:	8d 93       	st	X+, r24
    2126:	9c 93       	st	X, r25
    2128:	fe 01       	movw	r30, r28
    212a:	e9 5b       	subi	r30, 0xB9	; 185
    212c:	ff 4f       	sbci	r31, 0xFF	; 255
    212e:	80 81       	ld	r24, Z
    2130:	91 81       	ldd	r25, Z+1	; 0x01
    2132:	01 97       	sbiw	r24, 0x01	; 1
    2134:	f1 f7       	brne	.-4      	; 0x2132 <main+0x2de>
    2136:	fe 01       	movw	r30, r28
    2138:	e9 5b       	subi	r30, 0xB9	; 185
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	91 83       	std	Z+1, r25	; 0x01
    213e:	80 83       	st	Z, r24
                   	_delay_ms(300);
                   	DIO_SetPinValue(portB,pin4,0);
    2140:	81 e0       	ldi	r24, 0x01	; 1
    2142:	64 e0       	ldi	r22, 0x04	; 4
    2144:	40 e0       	ldi	r20, 0x00	; 0
    2146:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_SetPinValue>
          	    	LCD_SENDCOMMAND(0x01);
    214a:	81 e0       	ldi	r24, 0x01	; 1
    214c:	90 e0       	ldi	r25, 0x00	; 0
    214e:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
                    LCD_SENDSTR(" Place your card:");
    2152:	85 eb       	ldi	r24, 0xB5	; 181
    2154:	90 e0       	ldi	r25, 0x00	; 0
    2156:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
                    inc="\o";
    215a:	87 ec       	ldi	r24, 0xC7	; 199
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	80 93 91 01 	sts	0x0191, r24
                    inc2="\n";
    2162:	8b e9       	ldi	r24, 0x9B	; 155
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	80 93 80 01 	sts	0x0180, r24
                   	UART_sendstring(" Abdelhameed Elkhadrgy ... Attendance Registered\n");
    216a:	89 ec       	ldi	r24, 0xC9	; 201
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	0e 94 ed 13 	call	0x27da	; 0x27da <UART_sendstring>
    2172:	fe 01       	movw	r30, r28
    2174:	ed 5b       	subi	r30, 0xBD	; 189
    2176:	ff 4f       	sbci	r31, 0xFF	; 255
    2178:	80 e0       	ldi	r24, 0x00	; 0
    217a:	90 e0       	ldi	r25, 0x00	; 0
    217c:	a8 e4       	ldi	r26, 0x48	; 72
    217e:	b3 e4       	ldi	r27, 0x43	; 67
    2180:	80 83       	st	Z, r24
    2182:	91 83       	std	Z+1, r25	; 0x01
    2184:	a2 83       	std	Z+2, r26	; 0x02
    2186:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2188:	8e 01       	movw	r16, r28
    218a:	01 5c       	subi	r16, 0xC1	; 193
    218c:	1f 4f       	sbci	r17, 0xFF	; 255
    218e:	fe 01       	movw	r30, r28
    2190:	ed 5b       	subi	r30, 0xBD	; 189
    2192:	ff 4f       	sbci	r31, 0xFF	; 255
    2194:	60 81       	ld	r22, Z
    2196:	71 81       	ldd	r23, Z+1	; 0x01
    2198:	82 81       	ldd	r24, Z+2	; 0x02
    219a:	93 81       	ldd	r25, Z+3	; 0x03
    219c:	20 e0       	ldi	r18, 0x00	; 0
    219e:	30 e0       	ldi	r19, 0x00	; 0
    21a0:	4a ef       	ldi	r20, 0xFA	; 250
    21a2:	54 e4       	ldi	r21, 0x44	; 68
    21a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a8:	dc 01       	movw	r26, r24
    21aa:	cb 01       	movw	r24, r22
    21ac:	f8 01       	movw	r30, r16
    21ae:	80 83       	st	Z, r24
    21b0:	91 83       	std	Z+1, r25	; 0x01
    21b2:	a2 83       	std	Z+2, r26	; 0x02
    21b4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21b6:	fe 01       	movw	r30, r28
    21b8:	ff 96       	adiw	r30, 0x3f	; 63
    21ba:	60 81       	ld	r22, Z
    21bc:	71 81       	ldd	r23, Z+1	; 0x01
    21be:	82 81       	ldd	r24, Z+2	; 0x02
    21c0:	93 81       	ldd	r25, Z+3	; 0x03
    21c2:	20 e0       	ldi	r18, 0x00	; 0
    21c4:	30 e0       	ldi	r19, 0x00	; 0
    21c6:	40 e8       	ldi	r20, 0x80	; 128
    21c8:	5f e3       	ldi	r21, 0x3F	; 63
    21ca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21ce:	88 23       	and	r24, r24
    21d0:	2c f4       	brge	.+10     	; 0x21dc <main+0x388>
		__ticks = 1;
    21d2:	81 e0       	ldi	r24, 0x01	; 1
    21d4:	90 e0       	ldi	r25, 0x00	; 0
    21d6:	9e af       	std	Y+62, r25	; 0x3e
    21d8:	8d af       	std	Y+61, r24	; 0x3d
    21da:	46 c0       	rjmp	.+140    	; 0x2268 <main+0x414>
	else if (__tmp > 65535)
    21dc:	fe 01       	movw	r30, r28
    21de:	ff 96       	adiw	r30, 0x3f	; 63
    21e0:	60 81       	ld	r22, Z
    21e2:	71 81       	ldd	r23, Z+1	; 0x01
    21e4:	82 81       	ldd	r24, Z+2	; 0x02
    21e6:	93 81       	ldd	r25, Z+3	; 0x03
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	3f ef       	ldi	r19, 0xFF	; 255
    21ec:	4f e7       	ldi	r20, 0x7F	; 127
    21ee:	57 e4       	ldi	r21, 0x47	; 71
    21f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    21f4:	18 16       	cp	r1, r24
    21f6:	64 f5       	brge	.+88     	; 0x2250 <main+0x3fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21f8:	fe 01       	movw	r30, r28
    21fa:	ed 5b       	subi	r30, 0xBD	; 189
    21fc:	ff 4f       	sbci	r31, 0xFF	; 255
    21fe:	60 81       	ld	r22, Z
    2200:	71 81       	ldd	r23, Z+1	; 0x01
    2202:	82 81       	ldd	r24, Z+2	; 0x02
    2204:	93 81       	ldd	r25, Z+3	; 0x03
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	40 e2       	ldi	r20, 0x20	; 32
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2212:	dc 01       	movw	r26, r24
    2214:	cb 01       	movw	r24, r22
    2216:	bc 01       	movw	r22, r24
    2218:	cd 01       	movw	r24, r26
    221a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    221e:	dc 01       	movw	r26, r24
    2220:	cb 01       	movw	r24, r22
    2222:	9e af       	std	Y+62, r25	; 0x3e
    2224:	8d af       	std	Y+61, r24	; 0x3d
    2226:	0f c0       	rjmp	.+30     	; 0x2246 <main+0x3f2>
    2228:	88 ec       	ldi	r24, 0xC8	; 200
    222a:	90 e0       	ldi	r25, 0x00	; 0
    222c:	9c af       	std	Y+60, r25	; 0x3c
    222e:	8b af       	std	Y+59, r24	; 0x3b
    2230:	8b ad       	ldd	r24, Y+59	; 0x3b
    2232:	9c ad       	ldd	r25, Y+60	; 0x3c
    2234:	01 97       	sbiw	r24, 0x01	; 1
    2236:	f1 f7       	brne	.-4      	; 0x2234 <main+0x3e0>
    2238:	9c af       	std	Y+60, r25	; 0x3c
    223a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    223c:	8d ad       	ldd	r24, Y+61	; 0x3d
    223e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2240:	01 97       	sbiw	r24, 0x01	; 1
    2242:	9e af       	std	Y+62, r25	; 0x3e
    2244:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2246:	8d ad       	ldd	r24, Y+61	; 0x3d
    2248:	9e ad       	ldd	r25, Y+62	; 0x3e
    224a:	00 97       	sbiw	r24, 0x00	; 0
    224c:	69 f7       	brne	.-38     	; 0x2228 <main+0x3d4>
    224e:	16 c0       	rjmp	.+44     	; 0x227c <main+0x428>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2250:	fe 01       	movw	r30, r28
    2252:	ff 96       	adiw	r30, 0x3f	; 63
    2254:	60 81       	ld	r22, Z
    2256:	71 81       	ldd	r23, Z+1	; 0x01
    2258:	82 81       	ldd	r24, Z+2	; 0x02
    225a:	93 81       	ldd	r25, Z+3	; 0x03
    225c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2260:	dc 01       	movw	r26, r24
    2262:	cb 01       	movw	r24, r22
    2264:	9e af       	std	Y+62, r25	; 0x3e
    2266:	8d af       	std	Y+61, r24	; 0x3d
    2268:	8d ad       	ldd	r24, Y+61	; 0x3d
    226a:	9e ad       	ldd	r25, Y+62	; 0x3e
    226c:	9a af       	std	Y+58, r25	; 0x3a
    226e:	89 af       	std	Y+57, r24	; 0x39
    2270:	89 ad       	ldd	r24, Y+57	; 0x39
    2272:	9a ad       	ldd	r25, Y+58	; 0x3a
    2274:	01 97       	sbiw	r24, 0x01	; 1
    2276:	f1 f7       	brne	.-4      	; 0x2274 <main+0x420>
    2278:	9a af       	std	Y+58, r25	; 0x3a
    227a:	89 af       	std	Y+57, r24	; 0x39

                    _delay_ms(200);


}
         if(strncmp(rfid,value2,12)==0&& inc3!="\n")
    227c:	82 e8       	ldi	r24, 0x82	; 130
    227e:	91 e0       	ldi	r25, 0x01	; 1
    2280:	2e e5       	ldi	r18, 0x5E	; 94
    2282:	31 e0       	ldi	r19, 0x01	; 1
    2284:	b9 01       	movw	r22, r18
    2286:	4c e0       	ldi	r20, 0x0C	; 12
    2288:	50 e0       	ldi	r21, 0x00	; 0
    228a:	0e 94 75 14 	call	0x28ea	; 0x28ea <strncmp>
    228e:	00 97       	sbiw	r24, 0x00	; 0
    2290:	09 f0       	breq	.+2      	; 0x2294 <main+0x440>
    2292:	23 c1       	rjmp	.+582    	; 0x24da <main+0x686>
    2294:	80 91 81 01 	lds	r24, 0x0181
    2298:	88 2f       	mov	r24, r24
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	f0 e0       	ldi	r31, 0x00	; 0
    229e:	8b 39       	cpi	r24, 0x9B	; 155
    22a0:	9f 07       	cpc	r25, r31
    22a2:	09 f4       	brne	.+2      	; 0x22a6 <main+0x452>
    22a4:	1a c1       	rjmp	.+564    	; 0x24da <main+0x686>
             {
            	LCD_SENDCOMMAND(0x01);
    22a6:	81 e0       	ldi	r24, 0x01	; 1
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
            	LCD_SET_COURSER(0,1);
    22ae:	80 e0       	ldi	r24, 0x00	; 0
    22b0:	90 e0       	ldi	r25, 0x00	; 0
    22b2:	61 e0       	ldi	r22, 0x01	; 1
    22b4:	70 e0       	ldi	r23, 0x00	; 0
    22b6:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>
            	LCD_SENDSTR(" Attendance");
    22ba:	8d e9       	ldi	r24, 0x9D	; 157
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
              	LCD_SET_COURSER(1,1);
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	61 e0       	ldi	r22, 0x01	; 1
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>
              	LCD_SENDSTR(" Registered");
    22ce:	89 ea       	ldi	r24, 0xA9	; 169
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
               	DIO_SetPinValue(portB,pin4,1);
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	64 e0       	ldi	r22, 0x04	; 4
    22da:	41 e0       	ldi	r20, 0x01	; 1
    22dc:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_SetPinValue>
    22e0:	80 e0       	ldi	r24, 0x00	; 0
    22e2:	90 e0       	ldi	r25, 0x00	; 0
    22e4:	a6 e9       	ldi	r26, 0x96	; 150
    22e6:	b3 e4       	ldi	r27, 0x43	; 67
    22e8:	8d ab       	std	Y+53, r24	; 0x35
    22ea:	9e ab       	std	Y+54, r25	; 0x36
    22ec:	af ab       	std	Y+55, r26	; 0x37
    22ee:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22f0:	6d a9       	ldd	r22, Y+53	; 0x35
    22f2:	7e a9       	ldd	r23, Y+54	; 0x36
    22f4:	8f a9       	ldd	r24, Y+55	; 0x37
    22f6:	98 ad       	ldd	r25, Y+56	; 0x38
    22f8:	20 e0       	ldi	r18, 0x00	; 0
    22fa:	30 e0       	ldi	r19, 0x00	; 0
    22fc:	4a ef       	ldi	r20, 0xFA	; 250
    22fe:	54 e4       	ldi	r21, 0x44	; 68
    2300:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2304:	dc 01       	movw	r26, r24
    2306:	cb 01       	movw	r24, r22
    2308:	89 ab       	std	Y+49, r24	; 0x31
    230a:	9a ab       	std	Y+50, r25	; 0x32
    230c:	ab ab       	std	Y+51, r26	; 0x33
    230e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2310:	69 a9       	ldd	r22, Y+49	; 0x31
    2312:	7a a9       	ldd	r23, Y+50	; 0x32
    2314:	8b a9       	ldd	r24, Y+51	; 0x33
    2316:	9c a9       	ldd	r25, Y+52	; 0x34
    2318:	20 e0       	ldi	r18, 0x00	; 0
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	40 e8       	ldi	r20, 0x80	; 128
    231e:	5f e3       	ldi	r21, 0x3F	; 63
    2320:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2324:	88 23       	and	r24, r24
    2326:	2c f4       	brge	.+10     	; 0x2332 <main+0x4de>
		__ticks = 1;
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	98 ab       	std	Y+48, r25	; 0x30
    232e:	8f a7       	std	Y+47, r24	; 0x2f
    2330:	3f c0       	rjmp	.+126    	; 0x23b0 <main+0x55c>
	else if (__tmp > 65535)
    2332:	69 a9       	ldd	r22, Y+49	; 0x31
    2334:	7a a9       	ldd	r23, Y+50	; 0x32
    2336:	8b a9       	ldd	r24, Y+51	; 0x33
    2338:	9c a9       	ldd	r25, Y+52	; 0x34
    233a:	20 e0       	ldi	r18, 0x00	; 0
    233c:	3f ef       	ldi	r19, 0xFF	; 255
    233e:	4f e7       	ldi	r20, 0x7F	; 127
    2340:	57 e4       	ldi	r21, 0x47	; 71
    2342:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2346:	18 16       	cp	r1, r24
    2348:	4c f5       	brge	.+82     	; 0x239c <main+0x548>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    234a:	6d a9       	ldd	r22, Y+53	; 0x35
    234c:	7e a9       	ldd	r23, Y+54	; 0x36
    234e:	8f a9       	ldd	r24, Y+55	; 0x37
    2350:	98 ad       	ldd	r25, Y+56	; 0x38
    2352:	20 e0       	ldi	r18, 0x00	; 0
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	40 e2       	ldi	r20, 0x20	; 32
    2358:	51 e4       	ldi	r21, 0x41	; 65
    235a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    235e:	dc 01       	movw	r26, r24
    2360:	cb 01       	movw	r24, r22
    2362:	bc 01       	movw	r22, r24
    2364:	cd 01       	movw	r24, r26
    2366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    236a:	dc 01       	movw	r26, r24
    236c:	cb 01       	movw	r24, r22
    236e:	98 ab       	std	Y+48, r25	; 0x30
    2370:	8f a7       	std	Y+47, r24	; 0x2f
    2372:	0f c0       	rjmp	.+30     	; 0x2392 <main+0x53e>
    2374:	88 ec       	ldi	r24, 0xC8	; 200
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	9e a7       	std	Y+46, r25	; 0x2e
    237a:	8d a7       	std	Y+45, r24	; 0x2d
    237c:	8d a5       	ldd	r24, Y+45	; 0x2d
    237e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2380:	01 97       	sbiw	r24, 0x01	; 1
    2382:	f1 f7       	brne	.-4      	; 0x2380 <main+0x52c>
    2384:	9e a7       	std	Y+46, r25	; 0x2e
    2386:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2388:	8f a5       	ldd	r24, Y+47	; 0x2f
    238a:	98 a9       	ldd	r25, Y+48	; 0x30
    238c:	01 97       	sbiw	r24, 0x01	; 1
    238e:	98 ab       	std	Y+48, r25	; 0x30
    2390:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2392:	8f a5       	ldd	r24, Y+47	; 0x2f
    2394:	98 a9       	ldd	r25, Y+48	; 0x30
    2396:	00 97       	sbiw	r24, 0x00	; 0
    2398:	69 f7       	brne	.-38     	; 0x2374 <main+0x520>
    239a:	14 c0       	rjmp	.+40     	; 0x23c4 <main+0x570>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    239c:	69 a9       	ldd	r22, Y+49	; 0x31
    239e:	7a a9       	ldd	r23, Y+50	; 0x32
    23a0:	8b a9       	ldd	r24, Y+51	; 0x33
    23a2:	9c a9       	ldd	r25, Y+52	; 0x34
    23a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a8:	dc 01       	movw	r26, r24
    23aa:	cb 01       	movw	r24, r22
    23ac:	98 ab       	std	Y+48, r25	; 0x30
    23ae:	8f a7       	std	Y+47, r24	; 0x2f
    23b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b2:	98 a9       	ldd	r25, Y+48	; 0x30
    23b4:	9c a7       	std	Y+44, r25	; 0x2c
    23b6:	8b a7       	std	Y+43, r24	; 0x2b
    23b8:	8b a5       	ldd	r24, Y+43	; 0x2b
    23ba:	9c a5       	ldd	r25, Y+44	; 0x2c
    23bc:	01 97       	sbiw	r24, 0x01	; 1
    23be:	f1 f7       	brne	.-4      	; 0x23bc <main+0x568>
    23c0:	9c a7       	std	Y+44, r25	; 0x2c
    23c2:	8b a7       	std	Y+43, r24	; 0x2b
              	_delay_ms(300);
               	DIO_SetPinValue(portB,pin4,0);
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	64 e0       	ldi	r22, 0x04	; 4
    23c8:	40 e0       	ldi	r20, 0x00	; 0
    23ca:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_SetPinValue>
      	    	LCD_SENDCOMMAND(0x01);
    23ce:	81 e0       	ldi	r24, 0x01	; 1
    23d0:	90 e0       	ldi	r25, 0x00	; 0
    23d2:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
                LCD_SENDSTR(" Place your card:");
    23d6:	85 eb       	ldi	r24, 0xB5	; 181
    23d8:	90 e0       	ldi	r25, 0x00	; 0
    23da:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
              	inc="\o";
    23de:	87 ec       	ldi	r24, 0xC7	; 199
    23e0:	90 e0       	ldi	r25, 0x00	; 0
    23e2:	80 93 91 01 	sts	0x0191, r24
                inc3="\n";
    23e6:	8b e9       	ldi	r24, 0x9B	; 155
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	80 93 81 01 	sts	0x0181, r24
               	UART_sendstring(" Omar ... Attendance Registered \n");
    23ee:	8b ef       	ldi	r24, 0xFB	; 251
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	0e 94 ed 13 	call	0x27da	; 0x27da <UART_sendstring>
    23f6:	80 e0       	ldi	r24, 0x00	; 0
    23f8:	90 e0       	ldi	r25, 0x00	; 0
    23fa:	a8 e4       	ldi	r26, 0x48	; 72
    23fc:	b3 e4       	ldi	r27, 0x43	; 67
    23fe:	8f a3       	std	Y+39, r24	; 0x27
    2400:	98 a7       	std	Y+40, r25	; 0x28
    2402:	a9 a7       	std	Y+41, r26	; 0x29
    2404:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2406:	6f a1       	ldd	r22, Y+39	; 0x27
    2408:	78 a5       	ldd	r23, Y+40	; 0x28
    240a:	89 a5       	ldd	r24, Y+41	; 0x29
    240c:	9a a5       	ldd	r25, Y+42	; 0x2a
    240e:	20 e0       	ldi	r18, 0x00	; 0
    2410:	30 e0       	ldi	r19, 0x00	; 0
    2412:	4a ef       	ldi	r20, 0xFA	; 250
    2414:	54 e4       	ldi	r21, 0x44	; 68
    2416:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    241a:	dc 01       	movw	r26, r24
    241c:	cb 01       	movw	r24, r22
    241e:	8b a3       	std	Y+35, r24	; 0x23
    2420:	9c a3       	std	Y+36, r25	; 0x24
    2422:	ad a3       	std	Y+37, r26	; 0x25
    2424:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2426:	6b a1       	ldd	r22, Y+35	; 0x23
    2428:	7c a1       	ldd	r23, Y+36	; 0x24
    242a:	8d a1       	ldd	r24, Y+37	; 0x25
    242c:	9e a1       	ldd	r25, Y+38	; 0x26
    242e:	20 e0       	ldi	r18, 0x00	; 0
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	40 e8       	ldi	r20, 0x80	; 128
    2434:	5f e3       	ldi	r21, 0x3F	; 63
    2436:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    243a:	88 23       	and	r24, r24
    243c:	2c f4       	brge	.+10     	; 0x2448 <main+0x5f4>
		__ticks = 1;
    243e:	81 e0       	ldi	r24, 0x01	; 1
    2440:	90 e0       	ldi	r25, 0x00	; 0
    2442:	9a a3       	std	Y+34, r25	; 0x22
    2444:	89 a3       	std	Y+33, r24	; 0x21
    2446:	3f c0       	rjmp	.+126    	; 0x24c6 <main+0x672>
	else if (__tmp > 65535)
    2448:	6b a1       	ldd	r22, Y+35	; 0x23
    244a:	7c a1       	ldd	r23, Y+36	; 0x24
    244c:	8d a1       	ldd	r24, Y+37	; 0x25
    244e:	9e a1       	ldd	r25, Y+38	; 0x26
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	3f ef       	ldi	r19, 0xFF	; 255
    2454:	4f e7       	ldi	r20, 0x7F	; 127
    2456:	57 e4       	ldi	r21, 0x47	; 71
    2458:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    245c:	18 16       	cp	r1, r24
    245e:	4c f5       	brge	.+82     	; 0x24b2 <main+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2460:	6f a1       	ldd	r22, Y+39	; 0x27
    2462:	78 a5       	ldd	r23, Y+40	; 0x28
    2464:	89 a5       	ldd	r24, Y+41	; 0x29
    2466:	9a a5       	ldd	r25, Y+42	; 0x2a
    2468:	20 e0       	ldi	r18, 0x00	; 0
    246a:	30 e0       	ldi	r19, 0x00	; 0
    246c:	40 e2       	ldi	r20, 0x20	; 32
    246e:	51 e4       	ldi	r21, 0x41	; 65
    2470:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2474:	dc 01       	movw	r26, r24
    2476:	cb 01       	movw	r24, r22
    2478:	bc 01       	movw	r22, r24
    247a:	cd 01       	movw	r24, r26
    247c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2480:	dc 01       	movw	r26, r24
    2482:	cb 01       	movw	r24, r22
    2484:	9a a3       	std	Y+34, r25	; 0x22
    2486:	89 a3       	std	Y+33, r24	; 0x21
    2488:	0f c0       	rjmp	.+30     	; 0x24a8 <main+0x654>
    248a:	88 ec       	ldi	r24, 0xC8	; 200
    248c:	90 e0       	ldi	r25, 0x00	; 0
    248e:	98 a3       	std	Y+32, r25	; 0x20
    2490:	8f 8f       	std	Y+31, r24	; 0x1f
    2492:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2494:	98 a1       	ldd	r25, Y+32	; 0x20
    2496:	01 97       	sbiw	r24, 0x01	; 1
    2498:	f1 f7       	brne	.-4      	; 0x2496 <main+0x642>
    249a:	98 a3       	std	Y+32, r25	; 0x20
    249c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    249e:	89 a1       	ldd	r24, Y+33	; 0x21
    24a0:	9a a1       	ldd	r25, Y+34	; 0x22
    24a2:	01 97       	sbiw	r24, 0x01	; 1
    24a4:	9a a3       	std	Y+34, r25	; 0x22
    24a6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24a8:	89 a1       	ldd	r24, Y+33	; 0x21
    24aa:	9a a1       	ldd	r25, Y+34	; 0x22
    24ac:	00 97       	sbiw	r24, 0x00	; 0
    24ae:	69 f7       	brne	.-38     	; 0x248a <main+0x636>
    24b0:	14 c0       	rjmp	.+40     	; 0x24da <main+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b2:	6b a1       	ldd	r22, Y+35	; 0x23
    24b4:	7c a1       	ldd	r23, Y+36	; 0x24
    24b6:	8d a1       	ldd	r24, Y+37	; 0x25
    24b8:	9e a1       	ldd	r25, Y+38	; 0x26
    24ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24be:	dc 01       	movw	r26, r24
    24c0:	cb 01       	movw	r24, r22
    24c2:	9a a3       	std	Y+34, r25	; 0x22
    24c4:	89 a3       	std	Y+33, r24	; 0x21
    24c6:	89 a1       	ldd	r24, Y+33	; 0x21
    24c8:	9a a1       	ldd	r25, Y+34	; 0x22
    24ca:	9e 8f       	std	Y+30, r25	; 0x1e
    24cc:	8d 8f       	std	Y+29, r24	; 0x1d
    24ce:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24d0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24d2:	01 97       	sbiw	r24, 0x01	; 1
    24d4:	f1 f7       	brne	.-4      	; 0x24d2 <main+0x67e>
    24d6:	9e 8f       	std	Y+30, r25	; 0x1e
    24d8:	8d 8f       	std	Y+29, r24	; 0x1d

                _delay_ms(200);

              }
          if(strncmp(rfid,value3,12)==0&& inc4!="\n")
    24da:	82 e8       	ldi	r24, 0x82	; 130
    24dc:	91 e0       	ldi	r25, 0x01	; 1
    24de:	2b e6       	ldi	r18, 0x6B	; 107
    24e0:	31 e0       	ldi	r19, 0x01	; 1
    24e2:	b9 01       	movw	r22, r18
    24e4:	4c e0       	ldi	r20, 0x0C	; 12
    24e6:	50 e0       	ldi	r21, 0x00	; 0
    24e8:	0e 94 75 14 	call	0x28ea	; 0x28ea <strncmp>
    24ec:	00 97       	sbiw	r24, 0x00	; 0
    24ee:	09 f0       	breq	.+2      	; 0x24f2 <main+0x69e>
    24f0:	29 c1       	rjmp	.+594    	; 0x2744 <main+0x8f0>
    24f2:	80 91 9c 01 	lds	r24, 0x019C
    24f6:	88 2f       	mov	r24, r24
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	8b 39       	cpi	r24, 0x9B	; 155
    24fe:	92 07       	cpc	r25, r18
    2500:	09 f4       	brne	.+2      	; 0x2504 <main+0x6b0>
    2502:	20 c1       	rjmp	.+576    	; 0x2744 <main+0x8f0>
                          {
                         	LCD_SENDCOMMAND(0x01);
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
                         	LCD_SET_COURSER(0,1);
    250c:	80 e0       	ldi	r24, 0x00	; 0
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	61 e0       	ldi	r22, 0x01	; 1
    2512:	70 e0       	ldi	r23, 0x00	; 0
    2514:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>
                         	LCD_SENDSTR(" Attendance");
    2518:	8d e9       	ldi	r24, 0x9D	; 157
    251a:	90 e0       	ldi	r25, 0x00	; 0
    251c:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
                           	LCD_SET_COURSER(1,1);
    2520:	81 e0       	ldi	r24, 0x01	; 1
    2522:	90 e0       	ldi	r25, 0x00	; 0
    2524:	61 e0       	ldi	r22, 0x01	; 1
    2526:	70 e0       	ldi	r23, 0x00	; 0
    2528:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>
                           	LCD_SENDSTR(" Registered");
    252c:	89 ea       	ldi	r24, 0xA9	; 169
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
                           	DIO_SetPinValue(portB,pin4,1);
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	64 e0       	ldi	r22, 0x04	; 4
    2538:	41 e0       	ldi	r20, 0x01	; 1
    253a:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_SetPinValue>
    253e:	80 e0       	ldi	r24, 0x00	; 0
    2540:	90 e0       	ldi	r25, 0x00	; 0
    2542:	a6 e9       	ldi	r26, 0x96	; 150
    2544:	b3 e4       	ldi	r27, 0x43	; 67
    2546:	89 8f       	std	Y+25, r24	; 0x19
    2548:	9a 8f       	std	Y+26, r25	; 0x1a
    254a:	ab 8f       	std	Y+27, r26	; 0x1b
    254c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    254e:	69 8d       	ldd	r22, Y+25	; 0x19
    2550:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2552:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2554:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2556:	20 e0       	ldi	r18, 0x00	; 0
    2558:	30 e0       	ldi	r19, 0x00	; 0
    255a:	4a ef       	ldi	r20, 0xFA	; 250
    255c:	54 e4       	ldi	r21, 0x44	; 68
    255e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2562:	dc 01       	movw	r26, r24
    2564:	cb 01       	movw	r24, r22
    2566:	8d 8b       	std	Y+21, r24	; 0x15
    2568:	9e 8b       	std	Y+22, r25	; 0x16
    256a:	af 8b       	std	Y+23, r26	; 0x17
    256c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    256e:	6d 89       	ldd	r22, Y+21	; 0x15
    2570:	7e 89       	ldd	r23, Y+22	; 0x16
    2572:	8f 89       	ldd	r24, Y+23	; 0x17
    2574:	98 8d       	ldd	r25, Y+24	; 0x18
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	40 e8       	ldi	r20, 0x80	; 128
    257c:	5f e3       	ldi	r21, 0x3F	; 63
    257e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2582:	88 23       	and	r24, r24
    2584:	2c f4       	brge	.+10     	; 0x2590 <main+0x73c>
		__ticks = 1;
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	9c 8b       	std	Y+20, r25	; 0x14
    258c:	8b 8b       	std	Y+19, r24	; 0x13
    258e:	3f c0       	rjmp	.+126    	; 0x260e <main+0x7ba>
	else if (__tmp > 65535)
    2590:	6d 89       	ldd	r22, Y+21	; 0x15
    2592:	7e 89       	ldd	r23, Y+22	; 0x16
    2594:	8f 89       	ldd	r24, Y+23	; 0x17
    2596:	98 8d       	ldd	r25, Y+24	; 0x18
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	3f ef       	ldi	r19, 0xFF	; 255
    259c:	4f e7       	ldi	r20, 0x7F	; 127
    259e:	57 e4       	ldi	r21, 0x47	; 71
    25a0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25a4:	18 16       	cp	r1, r24
    25a6:	4c f5       	brge	.+82     	; 0x25fa <main+0x7a6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25a8:	69 8d       	ldd	r22, Y+25	; 0x19
    25aa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ac:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ae:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e2       	ldi	r20, 0x20	; 32
    25b6:	51 e4       	ldi	r21, 0x41	; 65
    25b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	bc 01       	movw	r22, r24
    25c2:	cd 01       	movw	r24, r26
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	9c 8b       	std	Y+20, r25	; 0x14
    25ce:	8b 8b       	std	Y+19, r24	; 0x13
    25d0:	0f c0       	rjmp	.+30     	; 0x25f0 <main+0x79c>
    25d2:	88 ec       	ldi	r24, 0xC8	; 200
    25d4:	90 e0       	ldi	r25, 0x00	; 0
    25d6:	9a 8b       	std	Y+18, r25	; 0x12
    25d8:	89 8b       	std	Y+17, r24	; 0x11
    25da:	89 89       	ldd	r24, Y+17	; 0x11
    25dc:	9a 89       	ldd	r25, Y+18	; 0x12
    25de:	01 97       	sbiw	r24, 0x01	; 1
    25e0:	f1 f7       	brne	.-4      	; 0x25de <main+0x78a>
    25e2:	9a 8b       	std	Y+18, r25	; 0x12
    25e4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25e6:	8b 89       	ldd	r24, Y+19	; 0x13
    25e8:	9c 89       	ldd	r25, Y+20	; 0x14
    25ea:	01 97       	sbiw	r24, 0x01	; 1
    25ec:	9c 8b       	std	Y+20, r25	; 0x14
    25ee:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f0:	8b 89       	ldd	r24, Y+19	; 0x13
    25f2:	9c 89       	ldd	r25, Y+20	; 0x14
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	69 f7       	brne	.-38     	; 0x25d2 <main+0x77e>
    25f8:	14 c0       	rjmp	.+40     	; 0x2622 <main+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25fa:	6d 89       	ldd	r22, Y+21	; 0x15
    25fc:	7e 89       	ldd	r23, Y+22	; 0x16
    25fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2600:	98 8d       	ldd	r25, Y+24	; 0x18
    2602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2606:	dc 01       	movw	r26, r24
    2608:	cb 01       	movw	r24, r22
    260a:	9c 8b       	std	Y+20, r25	; 0x14
    260c:	8b 8b       	std	Y+19, r24	; 0x13
    260e:	8b 89       	ldd	r24, Y+19	; 0x13
    2610:	9c 89       	ldd	r25, Y+20	; 0x14
    2612:	98 8b       	std	Y+16, r25	; 0x10
    2614:	8f 87       	std	Y+15, r24	; 0x0f
    2616:	8f 85       	ldd	r24, Y+15	; 0x0f
    2618:	98 89       	ldd	r25, Y+16	; 0x10
    261a:	01 97       	sbiw	r24, 0x01	; 1
    261c:	f1 f7       	brne	.-4      	; 0x261a <main+0x7c6>
    261e:	98 8b       	std	Y+16, r25	; 0x10
    2620:	8f 87       	std	Y+15, r24	; 0x0f
                            _delay_ms(300);
                         	DIO_SetPinValue(portB,pin4,0);
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	64 e0       	ldi	r22, 0x04	; 4
    2626:	40 e0       	ldi	r20, 0x00	; 0
    2628:	0e 94 71 0c 	call	0x18e2	; 0x18e2 <DIO_SetPinValue>
                  	    	LCD_SENDCOMMAND(0x01);
    262c:	81 e0       	ldi	r24, 0x01	; 1
    262e:	90 e0       	ldi	r25, 0x00	; 0
    2630:	0e 94 12 08 	call	0x1024	; 0x1024 <LCD_SENDCOMMAND>
                            LCD_SENDSTR(" Place your card:");
    2634:	85 eb       	ldi	r24, 0xB5	; 181
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	0e 94 57 0a 	call	0x14ae	; 0x14ae <LCD_SENDSTR>
                           	LCD_SET_COURSER(1,1);
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	61 e0       	ldi	r22, 0x01	; 1
    2642:	70 e0       	ldi	r23, 0x00	; 0
    2644:	0e 94 82 0a 	call	0x1504	; 0x1504 <LCD_SET_COURSER>
                           	inc="\o";
    2648:	87 ec       	ldi	r24, 0xC7	; 199
    264a:	90 e0       	ldi	r25, 0x00	; 0
    264c:	80 93 91 01 	sts	0x0191, r24
                            inc4="\n";
    2650:	8b e9       	ldi	r24, 0x9B	; 155
    2652:	90 e0       	ldi	r25, 0x00	; 0
    2654:	80 93 9c 01 	sts	0x019C, r24
                           	UART_sendstring(" shady ... Attendance Registered\n");
    2658:	8d e1       	ldi	r24, 0x1D	; 29
    265a:	91 e0       	ldi	r25, 0x01	; 1
    265c:	0e 94 ed 13 	call	0x27da	; 0x27da <UART_sendstring>
    2660:	80 e0       	ldi	r24, 0x00	; 0
    2662:	90 e0       	ldi	r25, 0x00	; 0
    2664:	a8 e4       	ldi	r26, 0x48	; 72
    2666:	b3 e4       	ldi	r27, 0x43	; 67
    2668:	8b 87       	std	Y+11, r24	; 0x0b
    266a:	9c 87       	std	Y+12, r25	; 0x0c
    266c:	ad 87       	std	Y+13, r26	; 0x0d
    266e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2670:	6b 85       	ldd	r22, Y+11	; 0x0b
    2672:	7c 85       	ldd	r23, Y+12	; 0x0c
    2674:	8d 85       	ldd	r24, Y+13	; 0x0d
    2676:	9e 85       	ldd	r25, Y+14	; 0x0e
    2678:	20 e0       	ldi	r18, 0x00	; 0
    267a:	30 e0       	ldi	r19, 0x00	; 0
    267c:	4a ef       	ldi	r20, 0xFA	; 250
    267e:	54 e4       	ldi	r21, 0x44	; 68
    2680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2684:	dc 01       	movw	r26, r24
    2686:	cb 01       	movw	r24, r22
    2688:	8f 83       	std	Y+7, r24	; 0x07
    268a:	98 87       	std	Y+8, r25	; 0x08
    268c:	a9 87       	std	Y+9, r26	; 0x09
    268e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2690:	6f 81       	ldd	r22, Y+7	; 0x07
    2692:	78 85       	ldd	r23, Y+8	; 0x08
    2694:	89 85       	ldd	r24, Y+9	; 0x09
    2696:	9a 85       	ldd	r25, Y+10	; 0x0a
    2698:	20 e0       	ldi	r18, 0x00	; 0
    269a:	30 e0       	ldi	r19, 0x00	; 0
    269c:	40 e8       	ldi	r20, 0x80	; 128
    269e:	5f e3       	ldi	r21, 0x3F	; 63
    26a0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26a4:	88 23       	and	r24, r24
    26a6:	2c f4       	brge	.+10     	; 0x26b2 <main+0x85e>
		__ticks = 1;
    26a8:	81 e0       	ldi	r24, 0x01	; 1
    26aa:	90 e0       	ldi	r25, 0x00	; 0
    26ac:	9e 83       	std	Y+6, r25	; 0x06
    26ae:	8d 83       	std	Y+5, r24	; 0x05
    26b0:	3f c0       	rjmp	.+126    	; 0x2730 <main+0x8dc>
	else if (__tmp > 65535)
    26b2:	6f 81       	ldd	r22, Y+7	; 0x07
    26b4:	78 85       	ldd	r23, Y+8	; 0x08
    26b6:	89 85       	ldd	r24, Y+9	; 0x09
    26b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ba:	20 e0       	ldi	r18, 0x00	; 0
    26bc:	3f ef       	ldi	r19, 0xFF	; 255
    26be:	4f e7       	ldi	r20, 0x7F	; 127
    26c0:	57 e4       	ldi	r21, 0x47	; 71
    26c2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26c6:	18 16       	cp	r1, r24
    26c8:	4c f5       	brge	.+82     	; 0x271c <main+0x8c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ca:	6b 85       	ldd	r22, Y+11	; 0x0b
    26cc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26ce:	8d 85       	ldd	r24, Y+13	; 0x0d
    26d0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26d2:	20 e0       	ldi	r18, 0x00	; 0
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	40 e2       	ldi	r20, 0x20	; 32
    26d8:	51 e4       	ldi	r21, 0x41	; 65
    26da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26de:	dc 01       	movw	r26, r24
    26e0:	cb 01       	movw	r24, r22
    26e2:	bc 01       	movw	r22, r24
    26e4:	cd 01       	movw	r24, r26
    26e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26ea:	dc 01       	movw	r26, r24
    26ec:	cb 01       	movw	r24, r22
    26ee:	9e 83       	std	Y+6, r25	; 0x06
    26f0:	8d 83       	std	Y+5, r24	; 0x05
    26f2:	0f c0       	rjmp	.+30     	; 0x2712 <main+0x8be>
    26f4:	88 ec       	ldi	r24, 0xC8	; 200
    26f6:	90 e0       	ldi	r25, 0x00	; 0
    26f8:	9c 83       	std	Y+4, r25	; 0x04
    26fa:	8b 83       	std	Y+3, r24	; 0x03
    26fc:	8b 81       	ldd	r24, Y+3	; 0x03
    26fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2700:	01 97       	sbiw	r24, 0x01	; 1
    2702:	f1 f7       	brne	.-4      	; 0x2700 <main+0x8ac>
    2704:	9c 83       	std	Y+4, r25	; 0x04
    2706:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2708:	8d 81       	ldd	r24, Y+5	; 0x05
    270a:	9e 81       	ldd	r25, Y+6	; 0x06
    270c:	01 97       	sbiw	r24, 0x01	; 1
    270e:	9e 83       	std	Y+6, r25	; 0x06
    2710:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2712:	8d 81       	ldd	r24, Y+5	; 0x05
    2714:	9e 81       	ldd	r25, Y+6	; 0x06
    2716:	00 97       	sbiw	r24, 0x00	; 0
    2718:	69 f7       	brne	.-38     	; 0x26f4 <main+0x8a0>
    271a:	14 c0       	rjmp	.+40     	; 0x2744 <main+0x8f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    271c:	6f 81       	ldd	r22, Y+7	; 0x07
    271e:	78 85       	ldd	r23, Y+8	; 0x08
    2720:	89 85       	ldd	r24, Y+9	; 0x09
    2722:	9a 85       	ldd	r25, Y+10	; 0x0a
    2724:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	9e 83       	std	Y+6, r25	; 0x06
    272e:	8d 83       	std	Y+5, r24	; 0x05
    2730:	8d 81       	ldd	r24, Y+5	; 0x05
    2732:	9e 81       	ldd	r25, Y+6	; 0x06
    2734:	9a 83       	std	Y+2, r25	; 0x02
    2736:	89 83       	std	Y+1, r24	; 0x01
    2738:	89 81       	ldd	r24, Y+1	; 0x01
    273a:	9a 81       	ldd	r25, Y+2	; 0x02
    273c:	01 97       	sbiw	r24, 0x01	; 1
    273e:	f1 f7       	brne	.-4      	; 0x273c <main+0x8e8>
    2740:	9a 83       	std	Y+2, r25	; 0x02
    2742:	89 83       	std	Y+1, r24	; 0x01
//         	LCD_SENDCOMMAND(0x01);
//            LCD_SENDSTR(" Place your card:");
//          	LCD_SET_COURSER(1,1);
//         }

       if (inc=="\o"){
    2744:	80 91 91 01 	lds	r24, 0x0191
    2748:	88 2f       	mov	r24, r24
    274a:	90 e0       	ldi	r25, 0x00	; 0
    274c:	e0 e0       	ldi	r30, 0x00	; 0
    274e:	87 3c       	cpi	r24, 0xC7	; 199
    2750:	9e 07       	cpc	r25, r30
    2752:	09 f0       	breq	.+2      	; 0x2756 <main+0x902>
    2754:	f1 cb       	rjmp	.-2078   	; 0x1f38 <main+0xe4>
	           PORTC=ass[segm];
    2756:	a5 e3       	ldi	r26, 0x35	; 53
    2758:	b0 e0       	ldi	r27, 0x00	; 0
    275a:	80 91 7e 01 	lds	r24, 0x017E
    275e:	90 91 7f 01 	lds	r25, 0x017F
    2762:	fc 01       	movw	r30, r24
    2764:	e9 5b       	subi	r30, 0xB9	; 185
    2766:	fe 4f       	sbci	r31, 0xFE	; 254
    2768:	80 81       	ld	r24, Z
    276a:	8c 93       	st	X, r24
	           segm++;
    276c:	80 91 7e 01 	lds	r24, 0x017E
    2770:	90 91 7f 01 	lds	r25, 0x017F
    2774:	01 96       	adiw	r24, 0x01	; 1
    2776:	90 93 7f 01 	sts	0x017F, r25
    277a:	80 93 7e 01 	sts	0x017E, r24
inc=' ';
    277e:	80 e2       	ldi	r24, 0x20	; 32
    2780:	80 93 91 01 	sts	0x0191, r24
    2784:	d9 cb       	rjmp	.-2126   	; 0x1f38 <main+0xe4>

00002786 <UART_sendchar>:
//
//}



void UART_sendchar(char data){
    2786:	df 93       	push	r29
    2788:	cf 93       	push	r28
    278a:	0f 92       	push	r0
    278c:	cd b7       	in	r28, 0x3d	; 61
    278e:	de b7       	in	r29, 0x3e	; 62
    2790:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1<<UDRE)));
    2792:	eb e2       	ldi	r30, 0x2B	; 43
    2794:	f0 e0       	ldi	r31, 0x00	; 0
    2796:	80 81       	ld	r24, Z
    2798:	88 2f       	mov	r24, r24
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	80 72       	andi	r24, 0x20	; 32
    279e:	90 70       	andi	r25, 0x00	; 0
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	b9 f3       	breq	.-18     	; 0x2792 <UART_sendchar+0xc>
	UDR=data;
    27a4:	ec e2       	ldi	r30, 0x2C	; 44
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	89 81       	ldd	r24, Y+1	; 0x01
    27aa:	80 83       	st	Z, r24



}
    27ac:	0f 90       	pop	r0
    27ae:	cf 91       	pop	r28
    27b0:	df 91       	pop	r29
    27b2:	08 95       	ret

000027b4 <UART_GETChar>:
unsigned char UART_GETChar(void){
    27b4:	df 93       	push	r29
    27b6:	cf 93       	push	r28
    27b8:	00 d0       	rcall	.+0      	; 0x27ba <UART_GETChar+0x6>
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
	unsigned char Result;
	while((UCSRA&0x80)==0x00);
    27be:	eb e2       	ldi	r30, 0x2B	; 43
    27c0:	f0 e0       	ldi	r31, 0x00	; 0
    27c2:	80 81       	ld	r24, Z
    27c4:	88 23       	and	r24, r24
    27c6:	dc f7       	brge	.-10     	; 0x27be <UART_GETChar+0xa>
	Result=UDR;
    27c8:	ec e2       	ldi	r30, 0x2C	; 44
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	89 83       	std	Y+1, r24	; 0x01


}
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	cf 91       	pop	r28
    27d6:	df 91       	pop	r29
    27d8:	08 95       	ret

000027da <UART_sendstring>:
void UART_sendstring(char *ptr){
    27da:	df 93       	push	r29
    27dc:	cf 93       	push	r28
    27de:	00 d0       	rcall	.+0      	; 0x27e0 <UART_sendstring+0x6>
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <UART_sendstring+0x8>
    27e2:	cd b7       	in	r28, 0x3d	; 61
    27e4:	de b7       	in	r29, 0x3e	; 62
    27e6:	9c 83       	std	Y+4, r25	; 0x04
    27e8:	8b 83       	std	Y+3, r24	; 0x03
	int counter=0;
    27ea:	1a 82       	std	Y+2, r1	; 0x02
    27ec:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		if(ptr[counter]=='\0'){
    27ee:	29 81       	ldd	r18, Y+1	; 0x01
    27f0:	3a 81       	ldd	r19, Y+2	; 0x02
    27f2:	8b 81       	ldd	r24, Y+3	; 0x03
    27f4:	9c 81       	ldd	r25, Y+4	; 0x04
    27f6:	fc 01       	movw	r30, r24
    27f8:	e2 0f       	add	r30, r18
    27fa:	f3 1f       	adc	r31, r19
    27fc:	80 81       	ld	r24, Z
    27fe:	88 23       	and	r24, r24
    2800:	81 f0       	breq	.+32     	; 0x2822 <UART_sendstring+0x48>
			break;
		}
		UART_sendchar(ptr[counter]);
    2802:	29 81       	ldd	r18, Y+1	; 0x01
    2804:	3a 81       	ldd	r19, Y+2	; 0x02
    2806:	8b 81       	ldd	r24, Y+3	; 0x03
    2808:	9c 81       	ldd	r25, Y+4	; 0x04
    280a:	fc 01       	movw	r30, r24
    280c:	e2 0f       	add	r30, r18
    280e:	f3 1f       	adc	r31, r19
    2810:	80 81       	ld	r24, Z
    2812:	0e 94 c3 13 	call	0x2786	; 0x2786 <UART_sendchar>
		counter++;
    2816:	89 81       	ldd	r24, Y+1	; 0x01
    2818:	9a 81       	ldd	r25, Y+2	; 0x02
    281a:	01 96       	adiw	r24, 0x01	; 1
    281c:	9a 83       	std	Y+2, r25	; 0x02
    281e:	89 83       	std	Y+1, r24	; 0x01
    2820:	e6 cf       	rjmp	.-52     	; 0x27ee <UART_sendstring+0x14>

	}}
    2822:	0f 90       	pop	r0
    2824:	0f 90       	pop	r0
    2826:	0f 90       	pop	r0
    2828:	0f 90       	pop	r0
    282a:	cf 91       	pop	r28
    282c:	df 91       	pop	r29
    282e:	08 95       	ret

00002830 <UART_Transmit>:
void UART_Transmit(unsigned char data)
{
    2830:	df 93       	push	r29
    2832:	cf 93       	push	r28
    2834:	0f 92       	push	r0
    2836:	cd b7       	in	r28, 0x3d	; 61
    2838:	de b7       	in	r29, 0x3e	; 62
    283a:	89 83       	std	Y+1, r24	; 0x01
while(!(UCSRA&(1<<UDRE)));
    283c:	eb e2       	ldi	r30, 0x2B	; 43
    283e:	f0 e0       	ldi	r31, 0x00	; 0
    2840:	80 81       	ld	r24, Z
    2842:	88 2f       	mov	r24, r24
    2844:	90 e0       	ldi	r25, 0x00	; 0
    2846:	80 72       	andi	r24, 0x20	; 32
    2848:	90 70       	andi	r25, 0x00	; 0
    284a:	00 97       	sbiw	r24, 0x00	; 0
    284c:	b9 f3       	breq	.-18     	; 0x283c <UART_Transmit+0xc>
 UDR=data;
    284e:	ec e2       	ldi	r30, 0x2C	; 44
    2850:	f0 e0       	ldi	r31, 0x00	; 0
    2852:	89 81       	ldd	r24, Y+1	; 0x01
    2854:	80 83       	st	Z, r24

}
    2856:	0f 90       	pop	r0
    2858:	cf 91       	pop	r28
    285a:	df 91       	pop	r29
    285c:	08 95       	ret

0000285e <UART_Recieve>:
unsigned char UART_Recieve(void){
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA&(1<<RXC)));
    2866:	eb e2       	ldi	r30, 0x2B	; 43
    2868:	f0 e0       	ldi	r31, 0x00	; 0
    286a:	80 81       	ld	r24, Z
    286c:	88 23       	and	r24, r24
    286e:	dc f7       	brge	.-10     	; 0x2866 <UART_Recieve+0x8>
	return UDR;
    2870:	ec e2       	ldi	r30, 0x2C	; 44
    2872:	f0 e0       	ldi	r31, 0x00	; 0
    2874:	80 81       	ld	r24, Z

}
    2876:	cf 91       	pop	r28
    2878:	df 91       	pop	r29
    287a:	08 95       	ret

0000287c <__prologue_saves__>:
    287c:	2f 92       	push	r2
    287e:	3f 92       	push	r3
    2880:	4f 92       	push	r4
    2882:	5f 92       	push	r5
    2884:	6f 92       	push	r6
    2886:	7f 92       	push	r7
    2888:	8f 92       	push	r8
    288a:	9f 92       	push	r9
    288c:	af 92       	push	r10
    288e:	bf 92       	push	r11
    2890:	cf 92       	push	r12
    2892:	df 92       	push	r13
    2894:	ef 92       	push	r14
    2896:	ff 92       	push	r15
    2898:	0f 93       	push	r16
    289a:	1f 93       	push	r17
    289c:	cf 93       	push	r28
    289e:	df 93       	push	r29
    28a0:	cd b7       	in	r28, 0x3d	; 61
    28a2:	de b7       	in	r29, 0x3e	; 62
    28a4:	ca 1b       	sub	r28, r26
    28a6:	db 0b       	sbc	r29, r27
    28a8:	0f b6       	in	r0, 0x3f	; 63
    28aa:	f8 94       	cli
    28ac:	de bf       	out	0x3e, r29	; 62
    28ae:	0f be       	out	0x3f, r0	; 63
    28b0:	cd bf       	out	0x3d, r28	; 61
    28b2:	09 94       	ijmp

000028b4 <__epilogue_restores__>:
    28b4:	2a 88       	ldd	r2, Y+18	; 0x12
    28b6:	39 88       	ldd	r3, Y+17	; 0x11
    28b8:	48 88       	ldd	r4, Y+16	; 0x10
    28ba:	5f 84       	ldd	r5, Y+15	; 0x0f
    28bc:	6e 84       	ldd	r6, Y+14	; 0x0e
    28be:	7d 84       	ldd	r7, Y+13	; 0x0d
    28c0:	8c 84       	ldd	r8, Y+12	; 0x0c
    28c2:	9b 84       	ldd	r9, Y+11	; 0x0b
    28c4:	aa 84       	ldd	r10, Y+10	; 0x0a
    28c6:	b9 84       	ldd	r11, Y+9	; 0x09
    28c8:	c8 84       	ldd	r12, Y+8	; 0x08
    28ca:	df 80       	ldd	r13, Y+7	; 0x07
    28cc:	ee 80       	ldd	r14, Y+6	; 0x06
    28ce:	fd 80       	ldd	r15, Y+5	; 0x05
    28d0:	0c 81       	ldd	r16, Y+4	; 0x04
    28d2:	1b 81       	ldd	r17, Y+3	; 0x03
    28d4:	aa 81       	ldd	r26, Y+2	; 0x02
    28d6:	b9 81       	ldd	r27, Y+1	; 0x01
    28d8:	ce 0f       	add	r28, r30
    28da:	d1 1d       	adc	r29, r1
    28dc:	0f b6       	in	r0, 0x3f	; 63
    28de:	f8 94       	cli
    28e0:	de bf       	out	0x3e, r29	; 62
    28e2:	0f be       	out	0x3f, r0	; 63
    28e4:	cd bf       	out	0x3d, r28	; 61
    28e6:	ed 01       	movw	r28, r26
    28e8:	08 95       	ret

000028ea <strncmp>:
    28ea:	fb 01       	movw	r30, r22
    28ec:	dc 01       	movw	r26, r24
    28ee:	41 50       	subi	r20, 0x01	; 1
    28f0:	50 40       	sbci	r21, 0x00	; 0
    28f2:	30 f0       	brcs	.+12     	; 0x2900 <strncmp+0x16>
    28f4:	8d 91       	ld	r24, X+
    28f6:	01 90       	ld	r0, Z+
    28f8:	80 19       	sub	r24, r0
    28fa:	19 f4       	brne	.+6      	; 0x2902 <strncmp+0x18>
    28fc:	00 20       	and	r0, r0
    28fe:	b9 f7       	brne	.-18     	; 0x28ee <strncmp+0x4>
    2900:	88 1b       	sub	r24, r24
    2902:	99 0b       	sbc	r25, r25
    2904:	08 95       	ret

00002906 <_exit>:
    2906:	f8 94       	cli

00002908 <__stop_program>:
    2908:	ff cf       	rjmp	.-2      	; 0x2908 <__stop_program>
