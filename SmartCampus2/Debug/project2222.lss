
project2222.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000025f4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002e  00800060  000025f4  00002668  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001d88  00000000  00000000  00002698  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e08  00000000  00000000  00004420  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 00000140  00000000  00000000  00005228  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 00000170  00000000  00000000  00005368  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c49  00000000  00000000  000054d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000eeb  00000000  00000000  00007121  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000dad  00000000  00000000  0000800c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000160  00000000  00000000  00008dbc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000028d  00000000  00000000  00008f1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000007ce  00000000  00000000  000091a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  00009977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f5 e2       	ldi	r31, 0x25	; 37
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 38       	cpi	r26, 0x8E	; 142
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 5a 0f 	call	0x1eb4	; 0x1eb4 <main>
      7a:	0c 94 f8 12 	jmp	0x25f0	; 0x25f0 <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 41 03 	call	0x682	; 0x682 <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 a1 03 	call	0x742	; 0x742 <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a6 e8       	ldi	r26, 0x86	; 134
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 c1 12 	jmp	0x2582	; 0x2582 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	86 e8       	ldi	r24, 0x86	; 134
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 dd 12 	jmp	0x25ba	; 0x25ba <__epilogue_restores__>

00000622 <__gtsf2>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__prologue_saves__+0x18>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	89 e0       	ldi	r24, 0x09	; 9
     640:	e8 2e       	mov	r14, r24
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     662:	89 85       	ldd	r24, Y+9	; 0x09
     664:	82 30       	cpi	r24, 0x02	; 2
     666:	40 f0       	brcs	.+16     	; 0x678 <__gtsf2+0x56>
     668:	89 89       	ldd	r24, Y+17	; 0x11
     66a:	82 30       	cpi	r24, 0x02	; 2
     66c:	28 f0       	brcs	.+10     	; 0x678 <__gtsf2+0x56>
     66e:	c7 01       	movw	r24, r14
     670:	b8 01       	movw	r22, r16
     672:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     676:	01 c0       	rjmp	.+2      	; 0x67a <__gtsf2+0x58>
     678:	8f ef       	ldi	r24, 0xFF	; 255
     67a:	68 96       	adiw	r28, 0x18	; 24
     67c:	e6 e0       	ldi	r30, 0x06	; 6
     67e:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__epilogue_restores__+0x18>

00000682 <__gesf2>:
     682:	a8 e1       	ldi	r26, 0x18	; 24
     684:	b0 e0       	ldi	r27, 0x00	; 0
     686:	e7 e4       	ldi	r30, 0x47	; 71
     688:	f3 e0       	ldi	r31, 0x03	; 3
     68a:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__prologue_saves__+0x18>
     68e:	69 83       	std	Y+1, r22	; 0x01
     690:	7a 83       	std	Y+2, r23	; 0x02
     692:	8b 83       	std	Y+3, r24	; 0x03
     694:	9c 83       	std	Y+4, r25	; 0x04
     696:	2d 83       	std	Y+5, r18	; 0x05
     698:	3e 83       	std	Y+6, r19	; 0x06
     69a:	4f 83       	std	Y+7, r20	; 0x07
     69c:	58 87       	std	Y+8, r21	; 0x08
     69e:	89 e0       	ldi	r24, 0x09	; 9
     6a0:	e8 2e       	mov	r14, r24
     6a2:	f1 2c       	mov	r15, r1
     6a4:	ec 0e       	add	r14, r28
     6a6:	fd 1e       	adc	r15, r29
     6a8:	ce 01       	movw	r24, r28
     6aa:	01 96       	adiw	r24, 0x01	; 1
     6ac:	b7 01       	movw	r22, r14
     6ae:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6b2:	8e 01       	movw	r16, r28
     6b4:	0f 5e       	subi	r16, 0xEF	; 239
     6b6:	1f 4f       	sbci	r17, 0xFF	; 255
     6b8:	ce 01       	movw	r24, r28
     6ba:	05 96       	adiw	r24, 0x05	; 5
     6bc:	b8 01       	movw	r22, r16
     6be:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     6c2:	89 85       	ldd	r24, Y+9	; 0x09
     6c4:	82 30       	cpi	r24, 0x02	; 2
     6c6:	40 f0       	brcs	.+16     	; 0x6d8 <__gesf2+0x56>
     6c8:	89 89       	ldd	r24, Y+17	; 0x11
     6ca:	82 30       	cpi	r24, 0x02	; 2
     6cc:	28 f0       	brcs	.+10     	; 0x6d8 <__gesf2+0x56>
     6ce:	c7 01       	movw	r24, r14
     6d0:	b8 01       	movw	r22, r16
     6d2:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     6d6:	01 c0       	rjmp	.+2      	; 0x6da <__gesf2+0x58>
     6d8:	8f ef       	ldi	r24, 0xFF	; 255
     6da:	68 96       	adiw	r28, 0x18	; 24
     6dc:	e6 e0       	ldi	r30, 0x06	; 6
     6de:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__epilogue_restores__+0x18>

000006e2 <__ltsf2>:
     6e2:	a8 e1       	ldi	r26, 0x18	; 24
     6e4:	b0 e0       	ldi	r27, 0x00	; 0
     6e6:	e7 e7       	ldi	r30, 0x77	; 119
     6e8:	f3 e0       	ldi	r31, 0x03	; 3
     6ea:	0c 94 cd 12 	jmp	0x259a	; 0x259a <__prologue_saves__+0x18>
     6ee:	69 83       	std	Y+1, r22	; 0x01
     6f0:	7a 83       	std	Y+2, r23	; 0x02
     6f2:	8b 83       	std	Y+3, r24	; 0x03
     6f4:	9c 83       	std	Y+4, r25	; 0x04
     6f6:	2d 83       	std	Y+5, r18	; 0x05
     6f8:	3e 83       	std	Y+6, r19	; 0x06
     6fa:	4f 83       	std	Y+7, r20	; 0x07
     6fc:	58 87       	std	Y+8, r21	; 0x08
     6fe:	89 e0       	ldi	r24, 0x09	; 9
     700:	e8 2e       	mov	r14, r24
     702:	f1 2c       	mov	r15, r1
     704:	ec 0e       	add	r14, r28
     706:	fd 1e       	adc	r15, r29
     708:	ce 01       	movw	r24, r28
     70a:	01 96       	adiw	r24, 0x01	; 1
     70c:	b7 01       	movw	r22, r14
     70e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     712:	8e 01       	movw	r16, r28
     714:	0f 5e       	subi	r16, 0xEF	; 239
     716:	1f 4f       	sbci	r17, 0xFF	; 255
     718:	ce 01       	movw	r24, r28
     71a:	05 96       	adiw	r24, 0x05	; 5
     71c:	b8 01       	movw	r22, r16
     71e:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     722:	89 85       	ldd	r24, Y+9	; 0x09
     724:	82 30       	cpi	r24, 0x02	; 2
     726:	40 f0       	brcs	.+16     	; 0x738 <__ltsf2+0x56>
     728:	89 89       	ldd	r24, Y+17	; 0x11
     72a:	82 30       	cpi	r24, 0x02	; 2
     72c:	28 f0       	brcs	.+10     	; 0x738 <__ltsf2+0x56>
     72e:	c7 01       	movw	r24, r14
     730:	b8 01       	movw	r22, r16
     732:	0e 94 42 05 	call	0xa84	; 0xa84 <__fpcmp_parts_f>
     736:	01 c0       	rjmp	.+2      	; 0x73a <__ltsf2+0x58>
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	68 96       	adiw	r28, 0x18	; 24
     73c:	e6 e0       	ldi	r30, 0x06	; 6
     73e:	0c 94 e9 12 	jmp	0x25d2	; 0x25d2 <__epilogue_restores__+0x18>

00000742 <__fixsfsi>:
     742:	ac e0       	ldi	r26, 0x0C	; 12
     744:	b0 e0       	ldi	r27, 0x00	; 0
     746:	e7 ea       	ldi	r30, 0xA7	; 167
     748:	f3 e0       	ldi	r31, 0x03	; 3
     74a:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <__prologue_saves__+0x20>
     74e:	69 83       	std	Y+1, r22	; 0x01
     750:	7a 83       	std	Y+2, r23	; 0x02
     752:	8b 83       	std	Y+3, r24	; 0x03
     754:	9c 83       	std	Y+4, r25	; 0x04
     756:	ce 01       	movw	r24, r28
     758:	01 96       	adiw	r24, 0x01	; 1
     75a:	be 01       	movw	r22, r28
     75c:	6b 5f       	subi	r22, 0xFB	; 251
     75e:	7f 4f       	sbci	r23, 0xFF	; 255
     760:	0e 94 ca 04 	call	0x994	; 0x994 <__unpack_f>
     764:	8d 81       	ldd	r24, Y+5	; 0x05
     766:	82 30       	cpi	r24, 0x02	; 2
     768:	61 f1       	breq	.+88     	; 0x7c2 <__fixsfsi+0x80>
     76a:	82 30       	cpi	r24, 0x02	; 2
     76c:	50 f1       	brcs	.+84     	; 0x7c2 <__fixsfsi+0x80>
     76e:	84 30       	cpi	r24, 0x04	; 4
     770:	21 f4       	brne	.+8      	; 0x77a <__fixsfsi+0x38>
     772:	8e 81       	ldd	r24, Y+6	; 0x06
     774:	88 23       	and	r24, r24
     776:	51 f1       	breq	.+84     	; 0x7cc <__fixsfsi+0x8a>
     778:	2e c0       	rjmp	.+92     	; 0x7d6 <__fixsfsi+0x94>
     77a:	2f 81       	ldd	r18, Y+7	; 0x07
     77c:	38 85       	ldd	r19, Y+8	; 0x08
     77e:	37 fd       	sbrc	r19, 7
     780:	20 c0       	rjmp	.+64     	; 0x7c2 <__fixsfsi+0x80>
     782:	6e 81       	ldd	r22, Y+6	; 0x06
     784:	2f 31       	cpi	r18, 0x1F	; 31
     786:	31 05       	cpc	r19, r1
     788:	1c f0       	brlt	.+6      	; 0x790 <__fixsfsi+0x4e>
     78a:	66 23       	and	r22, r22
     78c:	f9 f0       	breq	.+62     	; 0x7cc <__fixsfsi+0x8a>
     78e:	23 c0       	rjmp	.+70     	; 0x7d6 <__fixsfsi+0x94>
     790:	8e e1       	ldi	r24, 0x1E	; 30
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	82 1b       	sub	r24, r18
     796:	93 0b       	sbc	r25, r19
     798:	29 85       	ldd	r18, Y+9	; 0x09
     79a:	3a 85       	ldd	r19, Y+10	; 0x0a
     79c:	4b 85       	ldd	r20, Y+11	; 0x0b
     79e:	5c 85       	ldd	r21, Y+12	; 0x0c
     7a0:	04 c0       	rjmp	.+8      	; 0x7aa <__fixsfsi+0x68>
     7a2:	56 95       	lsr	r21
     7a4:	47 95       	ror	r20
     7a6:	37 95       	ror	r19
     7a8:	27 95       	ror	r18
     7aa:	8a 95       	dec	r24
     7ac:	d2 f7       	brpl	.-12     	; 0x7a2 <__fixsfsi+0x60>
     7ae:	66 23       	and	r22, r22
     7b0:	b1 f0       	breq	.+44     	; 0x7de <__fixsfsi+0x9c>
     7b2:	50 95       	com	r21
     7b4:	40 95       	com	r20
     7b6:	30 95       	com	r19
     7b8:	21 95       	neg	r18
     7ba:	3f 4f       	sbci	r19, 0xFF	; 255
     7bc:	4f 4f       	sbci	r20, 0xFF	; 255
     7be:	5f 4f       	sbci	r21, 0xFF	; 255
     7c0:	0e c0       	rjmp	.+28     	; 0x7de <__fixsfsi+0x9c>
     7c2:	20 e0       	ldi	r18, 0x00	; 0
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	40 e0       	ldi	r20, 0x00	; 0
     7c8:	50 e0       	ldi	r21, 0x00	; 0
     7ca:	09 c0       	rjmp	.+18     	; 0x7de <__fixsfsi+0x9c>
     7cc:	2f ef       	ldi	r18, 0xFF	; 255
     7ce:	3f ef       	ldi	r19, 0xFF	; 255
     7d0:	4f ef       	ldi	r20, 0xFF	; 255
     7d2:	5f e7       	ldi	r21, 0x7F	; 127
     7d4:	04 c0       	rjmp	.+8      	; 0x7de <__fixsfsi+0x9c>
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e0       	ldi	r20, 0x00	; 0
     7dc:	50 e8       	ldi	r21, 0x80	; 128
     7de:	b9 01       	movw	r22, r18
     7e0:	ca 01       	movw	r24, r20
     7e2:	2c 96       	adiw	r28, 0x0c	; 12
     7e4:	e2 e0       	ldi	r30, 0x02	; 2
     7e6:	0c 94 ed 12 	jmp	0x25da	; 0x25da <__epilogue_restores__+0x20>

000007ea <__pack_f>:
     7ea:	df 92       	push	r13
     7ec:	ef 92       	push	r14
     7ee:	ff 92       	push	r15
     7f0:	0f 93       	push	r16
     7f2:	1f 93       	push	r17
     7f4:	fc 01       	movw	r30, r24
     7f6:	e4 80       	ldd	r14, Z+4	; 0x04
     7f8:	f5 80       	ldd	r15, Z+5	; 0x05
     7fa:	06 81       	ldd	r16, Z+6	; 0x06
     7fc:	17 81       	ldd	r17, Z+7	; 0x07
     7fe:	d1 80       	ldd	r13, Z+1	; 0x01
     800:	80 81       	ld	r24, Z
     802:	82 30       	cpi	r24, 0x02	; 2
     804:	48 f4       	brcc	.+18     	; 0x818 <__pack_f+0x2e>
     806:	80 e0       	ldi	r24, 0x00	; 0
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	a0 e1       	ldi	r26, 0x10	; 16
     80c:	b0 e0       	ldi	r27, 0x00	; 0
     80e:	e8 2a       	or	r14, r24
     810:	f9 2a       	or	r15, r25
     812:	0a 2b       	or	r16, r26
     814:	1b 2b       	or	r17, r27
     816:	a5 c0       	rjmp	.+330    	; 0x962 <__stack+0x103>
     818:	84 30       	cpi	r24, 0x04	; 4
     81a:	09 f4       	brne	.+2      	; 0x81e <__pack_f+0x34>
     81c:	9f c0       	rjmp	.+318    	; 0x95c <__stack+0xfd>
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	21 f4       	brne	.+8      	; 0x82a <__pack_f+0x40>
     822:	ee 24       	eor	r14, r14
     824:	ff 24       	eor	r15, r15
     826:	87 01       	movw	r16, r14
     828:	05 c0       	rjmp	.+10     	; 0x834 <__pack_f+0x4a>
     82a:	e1 14       	cp	r14, r1
     82c:	f1 04       	cpc	r15, r1
     82e:	01 05       	cpc	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	19 f4       	brne	.+6      	; 0x83a <__pack_f+0x50>
     834:	e0 e0       	ldi	r30, 0x00	; 0
     836:	f0 e0       	ldi	r31, 0x00	; 0
     838:	96 c0       	rjmp	.+300    	; 0x966 <__stack+0x107>
     83a:	62 81       	ldd	r22, Z+2	; 0x02
     83c:	73 81       	ldd	r23, Z+3	; 0x03
     83e:	9f ef       	ldi	r25, 0xFF	; 255
     840:	62 38       	cpi	r22, 0x82	; 130
     842:	79 07       	cpc	r23, r25
     844:	0c f0       	brlt	.+2      	; 0x848 <__pack_f+0x5e>
     846:	5b c0       	rjmp	.+182    	; 0x8fe <__stack+0x9f>
     848:	22 e8       	ldi	r18, 0x82	; 130
     84a:	3f ef       	ldi	r19, 0xFF	; 255
     84c:	26 1b       	sub	r18, r22
     84e:	37 0b       	sbc	r19, r23
     850:	2a 31       	cpi	r18, 0x1A	; 26
     852:	31 05       	cpc	r19, r1
     854:	2c f0       	brlt	.+10     	; 0x860 <__stack+0x1>
     856:	20 e0       	ldi	r18, 0x00	; 0
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	2a c0       	rjmp	.+84     	; 0x8b4 <__stack+0x55>
     860:	b8 01       	movw	r22, r16
     862:	a7 01       	movw	r20, r14
     864:	02 2e       	mov	r0, r18
     866:	04 c0       	rjmp	.+8      	; 0x870 <__stack+0x11>
     868:	76 95       	lsr	r23
     86a:	67 95       	ror	r22
     86c:	57 95       	ror	r21
     86e:	47 95       	ror	r20
     870:	0a 94       	dec	r0
     872:	d2 f7       	brpl	.-12     	; 0x868 <__stack+0x9>
     874:	81 e0       	ldi	r24, 0x01	; 1
     876:	90 e0       	ldi	r25, 0x00	; 0
     878:	a0 e0       	ldi	r26, 0x00	; 0
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	04 c0       	rjmp	.+8      	; 0x886 <__stack+0x27>
     87e:	88 0f       	add	r24, r24
     880:	99 1f       	adc	r25, r25
     882:	aa 1f       	adc	r26, r26
     884:	bb 1f       	adc	r27, r27
     886:	2a 95       	dec	r18
     888:	d2 f7       	brpl	.-12     	; 0x87e <__stack+0x1f>
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	a1 09       	sbc	r26, r1
     88e:	b1 09       	sbc	r27, r1
     890:	8e 21       	and	r24, r14
     892:	9f 21       	and	r25, r15
     894:	a0 23       	and	r26, r16
     896:	b1 23       	and	r27, r17
     898:	00 97       	sbiw	r24, 0x00	; 0
     89a:	a1 05       	cpc	r26, r1
     89c:	b1 05       	cpc	r27, r1
     89e:	21 f0       	breq	.+8      	; 0x8a8 <__stack+0x49>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	a0 e0       	ldi	r26, 0x00	; 0
     8a6:	b0 e0       	ldi	r27, 0x00	; 0
     8a8:	9a 01       	movw	r18, r20
     8aa:	ab 01       	movw	r20, r22
     8ac:	28 2b       	or	r18, r24
     8ae:	39 2b       	or	r19, r25
     8b0:	4a 2b       	or	r20, r26
     8b2:	5b 2b       	or	r21, r27
     8b4:	da 01       	movw	r26, r20
     8b6:	c9 01       	movw	r24, r18
     8b8:	8f 77       	andi	r24, 0x7F	; 127
     8ba:	90 70       	andi	r25, 0x00	; 0
     8bc:	a0 70       	andi	r26, 0x00	; 0
     8be:	b0 70       	andi	r27, 0x00	; 0
     8c0:	80 34       	cpi	r24, 0x40	; 64
     8c2:	91 05       	cpc	r25, r1
     8c4:	a1 05       	cpc	r26, r1
     8c6:	b1 05       	cpc	r27, r1
     8c8:	39 f4       	brne	.+14     	; 0x8d8 <__stack+0x79>
     8ca:	27 ff       	sbrs	r18, 7
     8cc:	09 c0       	rjmp	.+18     	; 0x8e0 <__stack+0x81>
     8ce:	20 5c       	subi	r18, 0xC0	; 192
     8d0:	3f 4f       	sbci	r19, 0xFF	; 255
     8d2:	4f 4f       	sbci	r20, 0xFF	; 255
     8d4:	5f 4f       	sbci	r21, 0xFF	; 255
     8d6:	04 c0       	rjmp	.+8      	; 0x8e0 <__stack+0x81>
     8d8:	21 5c       	subi	r18, 0xC1	; 193
     8da:	3f 4f       	sbci	r19, 0xFF	; 255
     8dc:	4f 4f       	sbci	r20, 0xFF	; 255
     8de:	5f 4f       	sbci	r21, 0xFF	; 255
     8e0:	e0 e0       	ldi	r30, 0x00	; 0
     8e2:	f0 e0       	ldi	r31, 0x00	; 0
     8e4:	20 30       	cpi	r18, 0x00	; 0
     8e6:	a0 e0       	ldi	r26, 0x00	; 0
     8e8:	3a 07       	cpc	r19, r26
     8ea:	a0 e0       	ldi	r26, 0x00	; 0
     8ec:	4a 07       	cpc	r20, r26
     8ee:	a0 e4       	ldi	r26, 0x40	; 64
     8f0:	5a 07       	cpc	r21, r26
     8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__stack+0x99>
     8f4:	e1 e0       	ldi	r30, 0x01	; 1
     8f6:	f0 e0       	ldi	r31, 0x00	; 0
     8f8:	79 01       	movw	r14, r18
     8fa:	8a 01       	movw	r16, r20
     8fc:	27 c0       	rjmp	.+78     	; 0x94c <__stack+0xed>
     8fe:	60 38       	cpi	r22, 0x80	; 128
     900:	71 05       	cpc	r23, r1
     902:	64 f5       	brge	.+88     	; 0x95c <__stack+0xfd>
     904:	fb 01       	movw	r30, r22
     906:	e1 58       	subi	r30, 0x81	; 129
     908:	ff 4f       	sbci	r31, 0xFF	; 255
     90a:	d8 01       	movw	r26, r16
     90c:	c7 01       	movw	r24, r14
     90e:	8f 77       	andi	r24, 0x7F	; 127
     910:	90 70       	andi	r25, 0x00	; 0
     912:	a0 70       	andi	r26, 0x00	; 0
     914:	b0 70       	andi	r27, 0x00	; 0
     916:	80 34       	cpi	r24, 0x40	; 64
     918:	91 05       	cpc	r25, r1
     91a:	a1 05       	cpc	r26, r1
     91c:	b1 05       	cpc	r27, r1
     91e:	39 f4       	brne	.+14     	; 0x92e <__stack+0xcf>
     920:	e7 fe       	sbrs	r14, 7
     922:	0d c0       	rjmp	.+26     	; 0x93e <__stack+0xdf>
     924:	80 e4       	ldi	r24, 0x40	; 64
     926:	90 e0       	ldi	r25, 0x00	; 0
     928:	a0 e0       	ldi	r26, 0x00	; 0
     92a:	b0 e0       	ldi	r27, 0x00	; 0
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__stack+0xd7>
     92e:	8f e3       	ldi	r24, 0x3F	; 63
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	e8 0e       	add	r14, r24
     938:	f9 1e       	adc	r15, r25
     93a:	0a 1f       	adc	r16, r26
     93c:	1b 1f       	adc	r17, r27
     93e:	17 ff       	sbrs	r17, 7
     940:	05 c0       	rjmp	.+10     	; 0x94c <__stack+0xed>
     942:	16 95       	lsr	r17
     944:	07 95       	ror	r16
     946:	f7 94       	ror	r15
     948:	e7 94       	ror	r14
     94a:	31 96       	adiw	r30, 0x01	; 1
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	16 95       	lsr	r17
     950:	07 95       	ror	r16
     952:	f7 94       	ror	r15
     954:	e7 94       	ror	r14
     956:	8a 95       	dec	r24
     958:	d1 f7       	brne	.-12     	; 0x94e <__stack+0xef>
     95a:	05 c0       	rjmp	.+10     	; 0x966 <__stack+0x107>
     95c:	ee 24       	eor	r14, r14
     95e:	ff 24       	eor	r15, r15
     960:	87 01       	movw	r16, r14
     962:	ef ef       	ldi	r30, 0xFF	; 255
     964:	f0 e0       	ldi	r31, 0x00	; 0
     966:	6e 2f       	mov	r22, r30
     968:	67 95       	ror	r22
     96a:	66 27       	eor	r22, r22
     96c:	67 95       	ror	r22
     96e:	90 2f       	mov	r25, r16
     970:	9f 77       	andi	r25, 0x7F	; 127
     972:	d7 94       	ror	r13
     974:	dd 24       	eor	r13, r13
     976:	d7 94       	ror	r13
     978:	8e 2f       	mov	r24, r30
     97a:	86 95       	lsr	r24
     97c:	49 2f       	mov	r20, r25
     97e:	46 2b       	or	r20, r22
     980:	58 2f       	mov	r21, r24
     982:	5d 29       	or	r21, r13
     984:	b7 01       	movw	r22, r14
     986:	ca 01       	movw	r24, r20
     988:	1f 91       	pop	r17
     98a:	0f 91       	pop	r16
     98c:	ff 90       	pop	r15
     98e:	ef 90       	pop	r14
     990:	df 90       	pop	r13
     992:	08 95       	ret

00000994 <__unpack_f>:
     994:	fc 01       	movw	r30, r24
     996:	db 01       	movw	r26, r22
     998:	40 81       	ld	r20, Z
     99a:	51 81       	ldd	r21, Z+1	; 0x01
     99c:	22 81       	ldd	r18, Z+2	; 0x02
     99e:	62 2f       	mov	r22, r18
     9a0:	6f 77       	andi	r22, 0x7F	; 127
     9a2:	70 e0       	ldi	r23, 0x00	; 0
     9a4:	22 1f       	adc	r18, r18
     9a6:	22 27       	eor	r18, r18
     9a8:	22 1f       	adc	r18, r18
     9aa:	93 81       	ldd	r25, Z+3	; 0x03
     9ac:	89 2f       	mov	r24, r25
     9ae:	88 0f       	add	r24, r24
     9b0:	82 2b       	or	r24, r18
     9b2:	28 2f       	mov	r18, r24
     9b4:	30 e0       	ldi	r19, 0x00	; 0
     9b6:	99 1f       	adc	r25, r25
     9b8:	99 27       	eor	r25, r25
     9ba:	99 1f       	adc	r25, r25
     9bc:	11 96       	adiw	r26, 0x01	; 1
     9be:	9c 93       	st	X, r25
     9c0:	11 97       	sbiw	r26, 0x01	; 1
     9c2:	21 15       	cp	r18, r1
     9c4:	31 05       	cpc	r19, r1
     9c6:	a9 f5       	brne	.+106    	; 0xa32 <__unpack_f+0x9e>
     9c8:	41 15       	cp	r20, r1
     9ca:	51 05       	cpc	r21, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	71 05       	cpc	r23, r1
     9d0:	11 f4       	brne	.+4      	; 0x9d6 <__unpack_f+0x42>
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	37 c0       	rjmp	.+110    	; 0xa44 <__unpack_f+0xb0>
     9d6:	82 e8       	ldi	r24, 0x82	; 130
     9d8:	9f ef       	ldi	r25, 0xFF	; 255
     9da:	13 96       	adiw	r26, 0x03	; 3
     9dc:	9c 93       	st	X, r25
     9de:	8e 93       	st	-X, r24
     9e0:	12 97       	sbiw	r26, 0x02	; 2
     9e2:	9a 01       	movw	r18, r20
     9e4:	ab 01       	movw	r20, r22
     9e6:	67 e0       	ldi	r22, 0x07	; 7
     9e8:	22 0f       	add	r18, r18
     9ea:	33 1f       	adc	r19, r19
     9ec:	44 1f       	adc	r20, r20
     9ee:	55 1f       	adc	r21, r21
     9f0:	6a 95       	dec	r22
     9f2:	d1 f7       	brne	.-12     	; 0x9e8 <__unpack_f+0x54>
     9f4:	83 e0       	ldi	r24, 0x03	; 3
     9f6:	8c 93       	st	X, r24
     9f8:	0d c0       	rjmp	.+26     	; 0xa14 <__unpack_f+0x80>
     9fa:	22 0f       	add	r18, r18
     9fc:	33 1f       	adc	r19, r19
     9fe:	44 1f       	adc	r20, r20
     a00:	55 1f       	adc	r21, r21
     a02:	12 96       	adiw	r26, 0x02	; 2
     a04:	8d 91       	ld	r24, X+
     a06:	9c 91       	ld	r25, X
     a08:	13 97       	sbiw	r26, 0x03	; 3
     a0a:	01 97       	sbiw	r24, 0x01	; 1
     a0c:	13 96       	adiw	r26, 0x03	; 3
     a0e:	9c 93       	st	X, r25
     a10:	8e 93       	st	-X, r24
     a12:	12 97       	sbiw	r26, 0x02	; 2
     a14:	20 30       	cpi	r18, 0x00	; 0
     a16:	80 e0       	ldi	r24, 0x00	; 0
     a18:	38 07       	cpc	r19, r24
     a1a:	80 e0       	ldi	r24, 0x00	; 0
     a1c:	48 07       	cpc	r20, r24
     a1e:	80 e4       	ldi	r24, 0x40	; 64
     a20:	58 07       	cpc	r21, r24
     a22:	58 f3       	brcs	.-42     	; 0x9fa <__unpack_f+0x66>
     a24:	14 96       	adiw	r26, 0x04	; 4
     a26:	2d 93       	st	X+, r18
     a28:	3d 93       	st	X+, r19
     a2a:	4d 93       	st	X+, r20
     a2c:	5c 93       	st	X, r21
     a2e:	17 97       	sbiw	r26, 0x07	; 7
     a30:	08 95       	ret
     a32:	2f 3f       	cpi	r18, 0xFF	; 255
     a34:	31 05       	cpc	r19, r1
     a36:	79 f4       	brne	.+30     	; 0xa56 <__unpack_f+0xc2>
     a38:	41 15       	cp	r20, r1
     a3a:	51 05       	cpc	r21, r1
     a3c:	61 05       	cpc	r22, r1
     a3e:	71 05       	cpc	r23, r1
     a40:	19 f4       	brne	.+6      	; 0xa48 <__unpack_f+0xb4>
     a42:	84 e0       	ldi	r24, 0x04	; 4
     a44:	8c 93       	st	X, r24
     a46:	08 95       	ret
     a48:	64 ff       	sbrs	r22, 4
     a4a:	03 c0       	rjmp	.+6      	; 0xa52 <__unpack_f+0xbe>
     a4c:	81 e0       	ldi	r24, 0x01	; 1
     a4e:	8c 93       	st	X, r24
     a50:	12 c0       	rjmp	.+36     	; 0xa76 <__unpack_f+0xe2>
     a52:	1c 92       	st	X, r1
     a54:	10 c0       	rjmp	.+32     	; 0xa76 <__unpack_f+0xe2>
     a56:	2f 57       	subi	r18, 0x7F	; 127
     a58:	30 40       	sbci	r19, 0x00	; 0
     a5a:	13 96       	adiw	r26, 0x03	; 3
     a5c:	3c 93       	st	X, r19
     a5e:	2e 93       	st	-X, r18
     a60:	12 97       	sbiw	r26, 0x02	; 2
     a62:	83 e0       	ldi	r24, 0x03	; 3
     a64:	8c 93       	st	X, r24
     a66:	87 e0       	ldi	r24, 0x07	; 7
     a68:	44 0f       	add	r20, r20
     a6a:	55 1f       	adc	r21, r21
     a6c:	66 1f       	adc	r22, r22
     a6e:	77 1f       	adc	r23, r23
     a70:	8a 95       	dec	r24
     a72:	d1 f7       	brne	.-12     	; 0xa68 <__unpack_f+0xd4>
     a74:	70 64       	ori	r23, 0x40	; 64
     a76:	14 96       	adiw	r26, 0x04	; 4
     a78:	4d 93       	st	X+, r20
     a7a:	5d 93       	st	X+, r21
     a7c:	6d 93       	st	X+, r22
     a7e:	7c 93       	st	X, r23
     a80:	17 97       	sbiw	r26, 0x07	; 7
     a82:	08 95       	ret

00000a84 <__fpcmp_parts_f>:
     a84:	1f 93       	push	r17
     a86:	dc 01       	movw	r26, r24
     a88:	fb 01       	movw	r30, r22
     a8a:	9c 91       	ld	r25, X
     a8c:	92 30       	cpi	r25, 0x02	; 2
     a8e:	08 f4       	brcc	.+2      	; 0xa92 <__fpcmp_parts_f+0xe>
     a90:	47 c0       	rjmp	.+142    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a92:	80 81       	ld	r24, Z
     a94:	82 30       	cpi	r24, 0x02	; 2
     a96:	08 f4       	brcc	.+2      	; 0xa9a <__fpcmp_parts_f+0x16>
     a98:	43 c0       	rjmp	.+134    	; 0xb20 <__fpcmp_parts_f+0x9c>
     a9a:	94 30       	cpi	r25, 0x04	; 4
     a9c:	51 f4       	brne	.+20     	; 0xab2 <__fpcmp_parts_f+0x2e>
     a9e:	11 96       	adiw	r26, 0x01	; 1
     aa0:	1c 91       	ld	r17, X
     aa2:	84 30       	cpi	r24, 0x04	; 4
     aa4:	99 f5       	brne	.+102    	; 0xb0c <__fpcmp_parts_f+0x88>
     aa6:	81 81       	ldd	r24, Z+1	; 0x01
     aa8:	68 2f       	mov	r22, r24
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	61 1b       	sub	r22, r17
     aae:	71 09       	sbc	r23, r1
     ab0:	3f c0       	rjmp	.+126    	; 0xb30 <__fpcmp_parts_f+0xac>
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	21 f0       	breq	.+8      	; 0xabe <__fpcmp_parts_f+0x3a>
     ab6:	92 30       	cpi	r25, 0x02	; 2
     ab8:	31 f4       	brne	.+12     	; 0xac6 <__fpcmp_parts_f+0x42>
     aba:	82 30       	cpi	r24, 0x02	; 2
     abc:	b9 f1       	breq	.+110    	; 0xb2c <__fpcmp_parts_f+0xa8>
     abe:	81 81       	ldd	r24, Z+1	; 0x01
     ac0:	88 23       	and	r24, r24
     ac2:	89 f1       	breq	.+98     	; 0xb26 <__fpcmp_parts_f+0xa2>
     ac4:	2d c0       	rjmp	.+90     	; 0xb20 <__fpcmp_parts_f+0x9c>
     ac6:	11 96       	adiw	r26, 0x01	; 1
     ac8:	1c 91       	ld	r17, X
     aca:	11 97       	sbiw	r26, 0x01	; 1
     acc:	82 30       	cpi	r24, 0x02	; 2
     ace:	f1 f0       	breq	.+60     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad0:	81 81       	ldd	r24, Z+1	; 0x01
     ad2:	18 17       	cp	r17, r24
     ad4:	d9 f4       	brne	.+54     	; 0xb0c <__fpcmp_parts_f+0x88>
     ad6:	12 96       	adiw	r26, 0x02	; 2
     ad8:	2d 91       	ld	r18, X+
     ada:	3c 91       	ld	r19, X
     adc:	13 97       	sbiw	r26, 0x03	; 3
     ade:	82 81       	ldd	r24, Z+2	; 0x02
     ae0:	93 81       	ldd	r25, Z+3	; 0x03
     ae2:	82 17       	cp	r24, r18
     ae4:	93 07       	cpc	r25, r19
     ae6:	94 f0       	brlt	.+36     	; 0xb0c <__fpcmp_parts_f+0x88>
     ae8:	28 17       	cp	r18, r24
     aea:	39 07       	cpc	r19, r25
     aec:	bc f0       	brlt	.+46     	; 0xb1c <__fpcmp_parts_f+0x98>
     aee:	14 96       	adiw	r26, 0x04	; 4
     af0:	8d 91       	ld	r24, X+
     af2:	9d 91       	ld	r25, X+
     af4:	0d 90       	ld	r0, X+
     af6:	bc 91       	ld	r27, X
     af8:	a0 2d       	mov	r26, r0
     afa:	24 81       	ldd	r18, Z+4	; 0x04
     afc:	35 81       	ldd	r19, Z+5	; 0x05
     afe:	46 81       	ldd	r20, Z+6	; 0x06
     b00:	57 81       	ldd	r21, Z+7	; 0x07
     b02:	28 17       	cp	r18, r24
     b04:	39 07       	cpc	r19, r25
     b06:	4a 07       	cpc	r20, r26
     b08:	5b 07       	cpc	r21, r27
     b0a:	18 f4       	brcc	.+6      	; 0xb12 <__fpcmp_parts_f+0x8e>
     b0c:	11 23       	and	r17, r17
     b0e:	41 f0       	breq	.+16     	; 0xb20 <__fpcmp_parts_f+0x9c>
     b10:	0a c0       	rjmp	.+20     	; 0xb26 <__fpcmp_parts_f+0xa2>
     b12:	82 17       	cp	r24, r18
     b14:	93 07       	cpc	r25, r19
     b16:	a4 07       	cpc	r26, r20
     b18:	b5 07       	cpc	r27, r21
     b1a:	40 f4       	brcc	.+16     	; 0xb2c <__fpcmp_parts_f+0xa8>
     b1c:	11 23       	and	r17, r17
     b1e:	19 f0       	breq	.+6      	; 0xb26 <__fpcmp_parts_f+0xa2>
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	70 e0       	ldi	r23, 0x00	; 0
     b24:	05 c0       	rjmp	.+10     	; 0xb30 <__fpcmp_parts_f+0xac>
     b26:	6f ef       	ldi	r22, 0xFF	; 255
     b28:	7f ef       	ldi	r23, 0xFF	; 255
     b2a:	02 c0       	rjmp	.+4      	; 0xb30 <__fpcmp_parts_f+0xac>
     b2c:	60 e0       	ldi	r22, 0x00	; 0
     b2e:	70 e0       	ldi	r23, 0x00	; 0
     b30:	cb 01       	movw	r24, r22
     b32:	1f 91       	pop	r17
     b34:	08 95       	ret

00000b36 <LCD_Initialize>:
#include <util/delay.h>
#include "../LIB/BIT_MATH.h"
#include "../LCD/def.h"

void LCD_Initialize(void)
{
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	df 93       	push	r29
     b3c:	cf 93       	push	r28
     b3e:	cd b7       	in	r28, 0x3d	; 61
     b40:	de b7       	in	r29, 0x3e	; 62
     b42:	c6 54       	subi	r28, 0x46	; 70
     b44:	d0 40       	sbci	r29, 0x00	; 0
     b46:	0f b6       	in	r0, 0x3f	; 63
     b48:	f8 94       	cli
     b4a:	de bf       	out	0x3e, r29	; 62
     b4c:	0f be       	out	0x3f, r0	; 63
     b4e:	cd bf       	out	0x3d, r28	; 61
     b50:	fe 01       	movw	r30, r28
     b52:	ed 5b       	subi	r30, 0xBD	; 189
     b54:	ff 4f       	sbci	r31, 0xFF	; 255
     b56:	80 e0       	ldi	r24, 0x00	; 0
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	a0 e8       	ldi	r26, 0x80	; 128
     b5c:	bf e3       	ldi	r27, 0x3F	; 63
     b5e:	80 83       	st	Z, r24
     b60:	91 83       	std	Z+1, r25	; 0x01
     b62:	a2 83       	std	Z+2, r26	; 0x02
     b64:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b66:	8e 01       	movw	r16, r28
     b68:	01 5c       	subi	r16, 0xC1	; 193
     b6a:	1f 4f       	sbci	r17, 0xFF	; 255
     b6c:	fe 01       	movw	r30, r28
     b6e:	ed 5b       	subi	r30, 0xBD	; 189
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	60 81       	ld	r22, Z
     b74:	71 81       	ldd	r23, Z+1	; 0x01
     b76:	82 81       	ldd	r24, Z+2	; 0x02
     b78:	93 81       	ldd	r25, Z+3	; 0x03
     b7a:	20 e0       	ldi	r18, 0x00	; 0
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	4a ef       	ldi	r20, 0xFA	; 250
     b80:	54 e4       	ldi	r21, 0x44	; 68
     b82:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     b86:	dc 01       	movw	r26, r24
     b88:	cb 01       	movw	r24, r22
     b8a:	f8 01       	movw	r30, r16
     b8c:	80 83       	st	Z, r24
     b8e:	91 83       	std	Z+1, r25	; 0x01
     b90:	a2 83       	std	Z+2, r26	; 0x02
     b92:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b94:	fe 01       	movw	r30, r28
     b96:	ff 96       	adiw	r30, 0x3f	; 63
     b98:	60 81       	ld	r22, Z
     b9a:	71 81       	ldd	r23, Z+1	; 0x01
     b9c:	82 81       	ldd	r24, Z+2	; 0x02
     b9e:	93 81       	ldd	r25, Z+3	; 0x03
     ba0:	20 e0       	ldi	r18, 0x00	; 0
     ba2:	30 e0       	ldi	r19, 0x00	; 0
     ba4:	40 e8       	ldi	r20, 0x80	; 128
     ba6:	5f e3       	ldi	r21, 0x3F	; 63
     ba8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     bac:	88 23       	and	r24, r24
     bae:	2c f4       	brge	.+10     	; 0xbba <LCD_Initialize+0x84>
		__ticks = 1;
     bb0:	81 e0       	ldi	r24, 0x01	; 1
     bb2:	90 e0       	ldi	r25, 0x00	; 0
     bb4:	9e af       	std	Y+62, r25	; 0x3e
     bb6:	8d af       	std	Y+61, r24	; 0x3d
     bb8:	46 c0       	rjmp	.+140    	; 0xc46 <LCD_Initialize+0x110>
	else if (__tmp > 65535)
     bba:	fe 01       	movw	r30, r28
     bbc:	ff 96       	adiw	r30, 0x3f	; 63
     bbe:	60 81       	ld	r22, Z
     bc0:	71 81       	ldd	r23, Z+1	; 0x01
     bc2:	82 81       	ldd	r24, Z+2	; 0x02
     bc4:	93 81       	ldd	r25, Z+3	; 0x03
     bc6:	20 e0       	ldi	r18, 0x00	; 0
     bc8:	3f ef       	ldi	r19, 0xFF	; 255
     bca:	4f e7       	ldi	r20, 0x7F	; 127
     bcc:	57 e4       	ldi	r21, 0x47	; 71
     bce:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     bd2:	18 16       	cp	r1, r24
     bd4:	64 f5       	brge	.+88     	; 0xc2e <LCD_Initialize+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     bd6:	fe 01       	movw	r30, r28
     bd8:	ed 5b       	subi	r30, 0xBD	; 189
     bda:	ff 4f       	sbci	r31, 0xFF	; 255
     bdc:	60 81       	ld	r22, Z
     bde:	71 81       	ldd	r23, Z+1	; 0x01
     be0:	82 81       	ldd	r24, Z+2	; 0x02
     be2:	93 81       	ldd	r25, Z+3	; 0x03
     be4:	20 e0       	ldi	r18, 0x00	; 0
     be6:	30 e0       	ldi	r19, 0x00	; 0
     be8:	40 e2       	ldi	r20, 0x20	; 32
     bea:	51 e4       	ldi	r21, 0x41	; 65
     bec:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     bf0:	dc 01       	movw	r26, r24
     bf2:	cb 01       	movw	r24, r22
     bf4:	bc 01       	movw	r22, r24
     bf6:	cd 01       	movw	r24, r26
     bf8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     bfc:	dc 01       	movw	r26, r24
     bfe:	cb 01       	movw	r24, r22
     c00:	9e af       	std	Y+62, r25	; 0x3e
     c02:	8d af       	std	Y+61, r24	; 0x3d
     c04:	0f c0       	rjmp	.+30     	; 0xc24 <LCD_Initialize+0xee>
     c06:	88 ec       	ldi	r24, 0xC8	; 200
     c08:	90 e0       	ldi	r25, 0x00	; 0
     c0a:	9c af       	std	Y+60, r25	; 0x3c
     c0c:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     c0e:	8b ad       	ldd	r24, Y+59	; 0x3b
     c10:	9c ad       	ldd	r25, Y+60	; 0x3c
     c12:	01 97       	sbiw	r24, 0x01	; 1
     c14:	f1 f7       	brne	.-4      	; 0xc12 <LCD_Initialize+0xdc>
     c16:	9c af       	std	Y+60, r25	; 0x3c
     c18:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c1a:	8d ad       	ldd	r24, Y+61	; 0x3d
     c1c:	9e ad       	ldd	r25, Y+62	; 0x3e
     c1e:	01 97       	sbiw	r24, 0x01	; 1
     c20:	9e af       	std	Y+62, r25	; 0x3e
     c22:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c24:	8d ad       	ldd	r24, Y+61	; 0x3d
     c26:	9e ad       	ldd	r25, Y+62	; 0x3e
     c28:	00 97       	sbiw	r24, 0x00	; 0
     c2a:	69 f7       	brne	.-38     	; 0xc06 <LCD_Initialize+0xd0>
     c2c:	16 c0       	rjmp	.+44     	; 0xc5a <LCD_Initialize+0x124>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c2e:	fe 01       	movw	r30, r28
     c30:	ff 96       	adiw	r30, 0x3f	; 63
     c32:	60 81       	ld	r22, Z
     c34:	71 81       	ldd	r23, Z+1	; 0x01
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     c3e:	dc 01       	movw	r26, r24
     c40:	cb 01       	movw	r24, r22
     c42:	9e af       	std	Y+62, r25	; 0x3e
     c44:	8d af       	std	Y+61, r24	; 0x3d
     c46:	8d ad       	ldd	r24, Y+61	; 0x3d
     c48:	9e ad       	ldd	r25, Y+62	; 0x3e
     c4a:	9a af       	std	Y+58, r25	; 0x3a
     c4c:	89 af       	std	Y+57, r24	; 0x39
     c4e:	89 ad       	ldd	r24, Y+57	; 0x39
     c50:	9a ad       	ldd	r25, Y+58	; 0x3a
     c52:	01 97       	sbiw	r24, 0x01	; 1
     c54:	f1 f7       	brne	.-4      	; 0xc52 <LCD_Initialize+0x11c>
     c56:	9a af       	std	Y+58, r25	; 0x3a
     c58:	89 af       	std	Y+57, r24	; 0x39
     c5a:	80 e0       	ldi	r24, 0x00	; 0
     c5c:	90 e0       	ldi	r25, 0x00	; 0
     c5e:	a8 e4       	ldi	r26, 0x48	; 72
     c60:	b2 e4       	ldi	r27, 0x42	; 66
     c62:	8d ab       	std	Y+53, r24	; 0x35
     c64:	9e ab       	std	Y+54, r25	; 0x36
     c66:	af ab       	std	Y+55, r26	; 0x37
     c68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c6a:	6d a9       	ldd	r22, Y+53	; 0x35
     c6c:	7e a9       	ldd	r23, Y+54	; 0x36
     c6e:	8f a9       	ldd	r24, Y+55	; 0x37
     c70:	98 ad       	ldd	r25, Y+56	; 0x38
     c72:	20 e0       	ldi	r18, 0x00	; 0
     c74:	30 e0       	ldi	r19, 0x00	; 0
     c76:	4a ef       	ldi	r20, 0xFA	; 250
     c78:	54 e4       	ldi	r21, 0x44	; 68
     c7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     c7e:	dc 01       	movw	r26, r24
     c80:	cb 01       	movw	r24, r22
     c82:	89 ab       	std	Y+49, r24	; 0x31
     c84:	9a ab       	std	Y+50, r25	; 0x32
     c86:	ab ab       	std	Y+51, r26	; 0x33
     c88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     c8a:	69 a9       	ldd	r22, Y+49	; 0x31
     c8c:	7a a9       	ldd	r23, Y+50	; 0x32
     c8e:	8b a9       	ldd	r24, Y+51	; 0x33
     c90:	9c a9       	ldd	r25, Y+52	; 0x34
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	2c f4       	brge	.+10     	; 0xcac <LCD_Initialize+0x176>
		__ticks = 1;
     ca2:	81 e0       	ldi	r24, 0x01	; 1
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	98 ab       	std	Y+48, r25	; 0x30
     ca8:	8f a7       	std	Y+47, r24	; 0x2f
     caa:	3f c0       	rjmp	.+126    	; 0xd2a <LCD_Initialize+0x1f4>
	else if (__tmp > 65535)
     cac:	69 a9       	ldd	r22, Y+49	; 0x31
     cae:	7a a9       	ldd	r23, Y+50	; 0x32
     cb0:	8b a9       	ldd	r24, Y+51	; 0x33
     cb2:	9c a9       	ldd	r25, Y+52	; 0x34
     cb4:	20 e0       	ldi	r18, 0x00	; 0
     cb6:	3f ef       	ldi	r19, 0xFF	; 255
     cb8:	4f e7       	ldi	r20, 0x7F	; 127
     cba:	57 e4       	ldi	r21, 0x47	; 71
     cbc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     cc0:	18 16       	cp	r1, r24
     cc2:	4c f5       	brge	.+82     	; 0xd16 <LCD_Initialize+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cc4:	6d a9       	ldd	r22, Y+53	; 0x35
     cc6:	7e a9       	ldd	r23, Y+54	; 0x36
     cc8:	8f a9       	ldd	r24, Y+55	; 0x37
     cca:	98 ad       	ldd	r25, Y+56	; 0x38
     ccc:	20 e0       	ldi	r18, 0x00	; 0
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	40 e2       	ldi	r20, 0x20	; 32
     cd2:	51 e4       	ldi	r21, 0x41	; 65
     cd4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     cd8:	dc 01       	movw	r26, r24
     cda:	cb 01       	movw	r24, r22
     cdc:	bc 01       	movw	r22, r24
     cde:	cd 01       	movw	r24, r26
     ce0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ce4:	dc 01       	movw	r26, r24
     ce6:	cb 01       	movw	r24, r22
     ce8:	98 ab       	std	Y+48, r25	; 0x30
     cea:	8f a7       	std	Y+47, r24	; 0x2f
     cec:	0f c0       	rjmp	.+30     	; 0xd0c <LCD_Initialize+0x1d6>
     cee:	88 ec       	ldi	r24, 0xC8	; 200
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	9e a7       	std	Y+46, r25	; 0x2e
     cf4:	8d a7       	std	Y+45, r24	; 0x2d
     cf6:	8d a5       	ldd	r24, Y+45	; 0x2d
     cf8:	9e a5       	ldd	r25, Y+46	; 0x2e
     cfa:	01 97       	sbiw	r24, 0x01	; 1
     cfc:	f1 f7       	brne	.-4      	; 0xcfa <LCD_Initialize+0x1c4>
     cfe:	9e a7       	std	Y+46, r25	; 0x2e
     d00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d02:	8f a5       	ldd	r24, Y+47	; 0x2f
     d04:	98 a9       	ldd	r25, Y+48	; 0x30
     d06:	01 97       	sbiw	r24, 0x01	; 1
     d08:	98 ab       	std	Y+48, r25	; 0x30
     d0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d0c:	8f a5       	ldd	r24, Y+47	; 0x2f
     d0e:	98 a9       	ldd	r25, Y+48	; 0x30
     d10:	00 97       	sbiw	r24, 0x00	; 0
     d12:	69 f7       	brne	.-38     	; 0xcee <LCD_Initialize+0x1b8>
     d14:	14 c0       	rjmp	.+40     	; 0xd3e <LCD_Initialize+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d16:	69 a9       	ldd	r22, Y+49	; 0x31
     d18:	7a a9       	ldd	r23, Y+50	; 0x32
     d1a:	8b a9       	ldd	r24, Y+51	; 0x33
     d1c:	9c a9       	ldd	r25, Y+52	; 0x34
     d1e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     d22:	dc 01       	movw	r26, r24
     d24:	cb 01       	movw	r24, r22
     d26:	98 ab       	std	Y+48, r25	; 0x30
     d28:	8f a7       	std	Y+47, r24	; 0x2f
     d2a:	8f a5       	ldd	r24, Y+47	; 0x2f
     d2c:	98 a9       	ldd	r25, Y+48	; 0x30
     d2e:	9c a7       	std	Y+44, r25	; 0x2c
     d30:	8b a7       	std	Y+43, r24	; 0x2b
     d32:	8b a5       	ldd	r24, Y+43	; 0x2b
     d34:	9c a5       	ldd	r25, Y+44	; 0x2c
     d36:	01 97       	sbiw	r24, 0x01	; 1
     d38:	f1 f7       	brne	.-4      	; 0xd36 <LCD_Initialize+0x200>
     d3a:	9c a7       	std	Y+44, r25	; 0x2c
     d3c:	8b a7       	std	Y+43, r24	; 0x2b
	    _delay_ms(1);
	    _delay_ms(50);
	    LCD_SENDCOMMAND(0b00111000); // fun set
     d3e:	88 e3       	ldi	r24, 0x38	; 56
     d40:	0e 94 0a 08 	call	0x1014	; 0x1014 <LCD_SENDCOMMAND>
     d44:	80 e0       	ldi	r24, 0x00	; 0
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	a0 ea       	ldi	r26, 0xA0	; 160
     d4a:	b0 e4       	ldi	r27, 0x40	; 64
     d4c:	8f a3       	std	Y+39, r24	; 0x27
     d4e:	98 a7       	std	Y+40, r25	; 0x28
     d50:	a9 a7       	std	Y+41, r26	; 0x29
     d52:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d54:	6f a1       	ldd	r22, Y+39	; 0x27
     d56:	78 a5       	ldd	r23, Y+40	; 0x28
     d58:	89 a5       	ldd	r24, Y+41	; 0x29
     d5a:	9a a5       	ldd	r25, Y+42	; 0x2a
     d5c:	20 e0       	ldi	r18, 0x00	; 0
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	4a ef       	ldi	r20, 0xFA	; 250
     d62:	54 e4       	ldi	r21, 0x44	; 68
     d64:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     d68:	dc 01       	movw	r26, r24
     d6a:	cb 01       	movw	r24, r22
     d6c:	8b a3       	std	Y+35, r24	; 0x23
     d6e:	9c a3       	std	Y+36, r25	; 0x24
     d70:	ad a3       	std	Y+37, r26	; 0x25
     d72:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
     d74:	6b a1       	ldd	r22, Y+35	; 0x23
     d76:	7c a1       	ldd	r23, Y+36	; 0x24
     d78:	8d a1       	ldd	r24, Y+37	; 0x25
     d7a:	9e a1       	ldd	r25, Y+38	; 0x26
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e8       	ldi	r20, 0x80	; 128
     d82:	5f e3       	ldi	r21, 0x3F	; 63
     d84:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     d88:	88 23       	and	r24, r24
     d8a:	2c f4       	brge	.+10     	; 0xd96 <LCD_Initialize+0x260>
		__ticks = 1;
     d8c:	81 e0       	ldi	r24, 0x01	; 1
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	9a a3       	std	Y+34, r25	; 0x22
     d92:	89 a3       	std	Y+33, r24	; 0x21
     d94:	3f c0       	rjmp	.+126    	; 0xe14 <LCD_Initialize+0x2de>
	else if (__tmp > 65535)
     d96:	6b a1       	ldd	r22, Y+35	; 0x23
     d98:	7c a1       	ldd	r23, Y+36	; 0x24
     d9a:	8d a1       	ldd	r24, Y+37	; 0x25
     d9c:	9e a1       	ldd	r25, Y+38	; 0x26
     d9e:	20 e0       	ldi	r18, 0x00	; 0
     da0:	3f ef       	ldi	r19, 0xFF	; 255
     da2:	4f e7       	ldi	r20, 0x7F	; 127
     da4:	57 e4       	ldi	r21, 0x47	; 71
     da6:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     daa:	18 16       	cp	r1, r24
     dac:	4c f5       	brge	.+82     	; 0xe00 <LCD_Initialize+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dae:	6f a1       	ldd	r22, Y+39	; 0x27
     db0:	78 a5       	ldd	r23, Y+40	; 0x28
     db2:	89 a5       	ldd	r24, Y+41	; 0x29
     db4:	9a a5       	ldd	r25, Y+42	; 0x2a
     db6:	20 e0       	ldi	r18, 0x00	; 0
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	40 e2       	ldi	r20, 0x20	; 32
     dbc:	51 e4       	ldi	r21, 0x41	; 65
     dbe:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     dc2:	dc 01       	movw	r26, r24
     dc4:	cb 01       	movw	r24, r22
     dc6:	bc 01       	movw	r22, r24
     dc8:	cd 01       	movw	r24, r26
     dca:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     dce:	dc 01       	movw	r26, r24
     dd0:	cb 01       	movw	r24, r22
     dd2:	9a a3       	std	Y+34, r25	; 0x22
     dd4:	89 a3       	std	Y+33, r24	; 0x21
     dd6:	0f c0       	rjmp	.+30     	; 0xdf6 <LCD_Initialize+0x2c0>
     dd8:	88 ec       	ldi	r24, 0xC8	; 200
     dda:	90 e0       	ldi	r25, 0x00	; 0
     ddc:	98 a3       	std	Y+32, r25	; 0x20
     dde:	8f 8f       	std	Y+31, r24	; 0x1f
     de0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     de2:	98 a1       	ldd	r25, Y+32	; 0x20
     de4:	01 97       	sbiw	r24, 0x01	; 1
     de6:	f1 f7       	brne	.-4      	; 0xde4 <LCD_Initialize+0x2ae>
     de8:	98 a3       	std	Y+32, r25	; 0x20
     dea:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dec:	89 a1       	ldd	r24, Y+33	; 0x21
     dee:	9a a1       	ldd	r25, Y+34	; 0x22
     df0:	01 97       	sbiw	r24, 0x01	; 1
     df2:	9a a3       	std	Y+34, r25	; 0x22
     df4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     df6:	89 a1       	ldd	r24, Y+33	; 0x21
     df8:	9a a1       	ldd	r25, Y+34	; 0x22
     dfa:	00 97       	sbiw	r24, 0x00	; 0
     dfc:	69 f7       	brne	.-38     	; 0xdd8 <LCD_Initialize+0x2a2>
     dfe:	14 c0       	rjmp	.+40     	; 0xe28 <LCD_Initialize+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e00:	6b a1       	ldd	r22, Y+35	; 0x23
     e02:	7c a1       	ldd	r23, Y+36	; 0x24
     e04:	8d a1       	ldd	r24, Y+37	; 0x25
     e06:	9e a1       	ldd	r25, Y+38	; 0x26
     e08:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     e0c:	dc 01       	movw	r26, r24
     e0e:	cb 01       	movw	r24, r22
     e10:	9a a3       	std	Y+34, r25	; 0x22
     e12:	89 a3       	std	Y+33, r24	; 0x21
     e14:	89 a1       	ldd	r24, Y+33	; 0x21
     e16:	9a a1       	ldd	r25, Y+34	; 0x22
     e18:	9e 8f       	std	Y+30, r25	; 0x1e
     e1a:	8d 8f       	std	Y+29, r24	; 0x1d
     e1c:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e1e:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e20:	01 97       	sbiw	r24, 0x01	; 1
     e22:	f1 f7       	brne	.-4      	; 0xe20 <LCD_Initialize+0x2ea>
     e24:	9e 8f       	std	Y+30, r25	; 0x1e
     e26:	8d 8f       	std	Y+29, r24	; 0x1d
	    _delay_ms(5);
	    LCD_SENDCOMMAND(0b00001111); // display on blank
     e28:	8f e0       	ldi	r24, 0x0F	; 15
     e2a:	0e 94 0a 08 	call	0x1014	; 0x1014 <LCD_SENDCOMMAND>
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	a0 ea       	ldi	r26, 0xA0	; 160
     e34:	b0 e4       	ldi	r27, 0x40	; 64
     e36:	89 8f       	std	Y+25, r24	; 0x19
     e38:	9a 8f       	std	Y+26, r25	; 0x1a
     e3a:	ab 8f       	std	Y+27, r26	; 0x1b
     e3c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     e3e:	69 8d       	ldd	r22, Y+25	; 0x19
     e40:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e42:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e44:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e46:	20 e0       	ldi	r18, 0x00	; 0
     e48:	30 e0       	ldi	r19, 0x00	; 0
     e4a:	4a ef       	ldi	r20, 0xFA	; 250
     e4c:	54 e4       	ldi	r21, 0x44	; 68
     e4e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     e52:	dc 01       	movw	r26, r24
     e54:	cb 01       	movw	r24, r22
     e56:	8d 8b       	std	Y+21, r24	; 0x15
     e58:	9e 8b       	std	Y+22, r25	; 0x16
     e5a:	af 8b       	std	Y+23, r26	; 0x17
     e5c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     e5e:	6d 89       	ldd	r22, Y+21	; 0x15
     e60:	7e 89       	ldd	r23, Y+22	; 0x16
     e62:	8f 89       	ldd	r24, Y+23	; 0x17
     e64:	98 8d       	ldd	r25, Y+24	; 0x18
     e66:	20 e0       	ldi	r18, 0x00	; 0
     e68:	30 e0       	ldi	r19, 0x00	; 0
     e6a:	40 e8       	ldi	r20, 0x80	; 128
     e6c:	5f e3       	ldi	r21, 0x3F	; 63
     e6e:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     e72:	88 23       	and	r24, r24
     e74:	2c f4       	brge	.+10     	; 0xe80 <LCD_Initialize+0x34a>
		__ticks = 1;
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	9c 8b       	std	Y+20, r25	; 0x14
     e7c:	8b 8b       	std	Y+19, r24	; 0x13
     e7e:	3f c0       	rjmp	.+126    	; 0xefe <LCD_Initialize+0x3c8>
	else if (__tmp > 65535)
     e80:	6d 89       	ldd	r22, Y+21	; 0x15
     e82:	7e 89       	ldd	r23, Y+22	; 0x16
     e84:	8f 89       	ldd	r24, Y+23	; 0x17
     e86:	98 8d       	ldd	r25, Y+24	; 0x18
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	3f ef       	ldi	r19, 0xFF	; 255
     e8c:	4f e7       	ldi	r20, 0x7F	; 127
     e8e:	57 e4       	ldi	r21, 0x47	; 71
     e90:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     e94:	18 16       	cp	r1, r24
     e96:	4c f5       	brge	.+82     	; 0xeea <LCD_Initialize+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e98:	69 8d       	ldd	r22, Y+25	; 0x19
     e9a:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e9c:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e9e:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ea0:	20 e0       	ldi	r18, 0x00	; 0
     ea2:	30 e0       	ldi	r19, 0x00	; 0
     ea4:	40 e2       	ldi	r20, 0x20	; 32
     ea6:	51 e4       	ldi	r21, 0x41	; 65
     ea8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     eac:	dc 01       	movw	r26, r24
     eae:	cb 01       	movw	r24, r22
     eb0:	bc 01       	movw	r22, r24
     eb2:	cd 01       	movw	r24, r26
     eb4:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	9c 8b       	std	Y+20, r25	; 0x14
     ebe:	8b 8b       	std	Y+19, r24	; 0x13
     ec0:	0f c0       	rjmp	.+30     	; 0xee0 <LCD_Initialize+0x3aa>
     ec2:	88 ec       	ldi	r24, 0xC8	; 200
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	9a 8b       	std	Y+18, r25	; 0x12
     ec8:	89 8b       	std	Y+17, r24	; 0x11
     eca:	89 89       	ldd	r24, Y+17	; 0x11
     ecc:	9a 89       	ldd	r25, Y+18	; 0x12
     ece:	01 97       	sbiw	r24, 0x01	; 1
     ed0:	f1 f7       	brne	.-4      	; 0xece <LCD_Initialize+0x398>
     ed2:	9a 8b       	std	Y+18, r25	; 0x12
     ed4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ed6:	8b 89       	ldd	r24, Y+19	; 0x13
     ed8:	9c 89       	ldd	r25, Y+20	; 0x14
     eda:	01 97       	sbiw	r24, 0x01	; 1
     edc:	9c 8b       	std	Y+20, r25	; 0x14
     ede:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ee0:	8b 89       	ldd	r24, Y+19	; 0x13
     ee2:	9c 89       	ldd	r25, Y+20	; 0x14
     ee4:	00 97       	sbiw	r24, 0x00	; 0
     ee6:	69 f7       	brne	.-38     	; 0xec2 <LCD_Initialize+0x38c>
     ee8:	14 c0       	rjmp	.+40     	; 0xf12 <LCD_Initialize+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eea:	6d 89       	ldd	r22, Y+21	; 0x15
     eec:	7e 89       	ldd	r23, Y+22	; 0x16
     eee:	8f 89       	ldd	r24, Y+23	; 0x17
     ef0:	98 8d       	ldd	r25, Y+24	; 0x18
     ef2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     ef6:	dc 01       	movw	r26, r24
     ef8:	cb 01       	movw	r24, r22
     efa:	9c 8b       	std	Y+20, r25	; 0x14
     efc:	8b 8b       	std	Y+19, r24	; 0x13
     efe:	8b 89       	ldd	r24, Y+19	; 0x13
     f00:	9c 89       	ldd	r25, Y+20	; 0x14
     f02:	98 8b       	std	Y+16, r25	; 0x10
     f04:	8f 87       	std	Y+15, r24	; 0x0f
     f06:	8f 85       	ldd	r24, Y+15	; 0x0f
     f08:	98 89       	ldd	r25, Y+16	; 0x10
     f0a:	01 97       	sbiw	r24, 0x01	; 1
     f0c:	f1 f7       	brne	.-4      	; 0xf0a <LCD_Initialize+0x3d4>
     f0e:	98 8b       	std	Y+16, r25	; 0x10
     f10:	8f 87       	std	Y+15, r24	; 0x0f
	    _delay_ms(5);
	    LCD_SENDCOMMAND(0b00000001);
     f12:	81 e0       	ldi	r24, 0x01	; 1
     f14:	0e 94 0a 08 	call	0x1014	; 0x1014 <LCD_SENDCOMMAND>
     f18:	80 e0       	ldi	r24, 0x00	; 0
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	a0 e7       	ldi	r26, 0x70	; 112
     f1e:	b1 e4       	ldi	r27, 0x41	; 65
     f20:	8b 87       	std	Y+11, r24	; 0x0b
     f22:	9c 87       	std	Y+12, r25	; 0x0c
     f24:	ad 87       	std	Y+13, r26	; 0x0d
     f26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f28:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2a:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     f2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     f30:	20 e0       	ldi	r18, 0x00	; 0
     f32:	30 e0       	ldi	r19, 0x00	; 0
     f34:	4a ef       	ldi	r20, 0xFA	; 250
     f36:	54 e4       	ldi	r21, 0x44	; 68
     f38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f3c:	dc 01       	movw	r26, r24
     f3e:	cb 01       	movw	r24, r22
     f40:	8f 83       	std	Y+7, r24	; 0x07
     f42:	98 87       	std	Y+8, r25	; 0x08
     f44:	a9 87       	std	Y+9, r26	; 0x09
     f46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f48:	6f 81       	ldd	r22, Y+7	; 0x07
     f4a:	78 85       	ldd	r23, Y+8	; 0x08
     f4c:	89 85       	ldd	r24, Y+9	; 0x09
     f4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     f50:	20 e0       	ldi	r18, 0x00	; 0
     f52:	30 e0       	ldi	r19, 0x00	; 0
     f54:	40 e8       	ldi	r20, 0x80	; 128
     f56:	5f e3       	ldi	r21, 0x3F	; 63
     f58:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
     f5c:	88 23       	and	r24, r24
     f5e:	2c f4       	brge	.+10     	; 0xf6a <LCD_Initialize+0x434>
		__ticks = 1;
     f60:	81 e0       	ldi	r24, 0x01	; 1
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	9e 83       	std	Y+6, r25	; 0x06
     f66:	8d 83       	std	Y+5, r24	; 0x05
     f68:	3f c0       	rjmp	.+126    	; 0xfe8 <LCD_Initialize+0x4b2>
	else if (__tmp > 65535)
     f6a:	6f 81       	ldd	r22, Y+7	; 0x07
     f6c:	78 85       	ldd	r23, Y+8	; 0x08
     f6e:	89 85       	ldd	r24, Y+9	; 0x09
     f70:	9a 85       	ldd	r25, Y+10	; 0x0a
     f72:	20 e0       	ldi	r18, 0x00	; 0
     f74:	3f ef       	ldi	r19, 0xFF	; 255
     f76:	4f e7       	ldi	r20, 0x7F	; 127
     f78:	57 e4       	ldi	r21, 0x47	; 71
     f7a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
     f7e:	18 16       	cp	r1, r24
     f80:	4c f5       	brge	.+82     	; 0xfd4 <LCD_Initialize+0x49e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f82:	6b 85       	ldd	r22, Y+11	; 0x0b
     f84:	7c 85       	ldd	r23, Y+12	; 0x0c
     f86:	8d 85       	ldd	r24, Y+13	; 0x0d
     f88:	9e 85       	ldd	r25, Y+14	; 0x0e
     f8a:	20 e0       	ldi	r18, 0x00	; 0
     f8c:	30 e0       	ldi	r19, 0x00	; 0
     f8e:	40 e2       	ldi	r20, 0x20	; 32
     f90:	51 e4       	ldi	r21, 0x41	; 65
     f92:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     f96:	dc 01       	movw	r26, r24
     f98:	cb 01       	movw	r24, r22
     f9a:	bc 01       	movw	r22, r24
     f9c:	cd 01       	movw	r24, r26
     f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fa2:	dc 01       	movw	r26, r24
     fa4:	cb 01       	movw	r24, r22
     fa6:	9e 83       	std	Y+6, r25	; 0x06
     fa8:	8d 83       	std	Y+5, r24	; 0x05
     faa:	0f c0       	rjmp	.+30     	; 0xfca <LCD_Initialize+0x494>
     fac:	88 ec       	ldi	r24, 0xC8	; 200
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	9c 83       	std	Y+4, r25	; 0x04
     fb2:	8b 83       	std	Y+3, r24	; 0x03
     fb4:	8b 81       	ldd	r24, Y+3	; 0x03
     fb6:	9c 81       	ldd	r25, Y+4	; 0x04
     fb8:	01 97       	sbiw	r24, 0x01	; 1
     fba:	f1 f7       	brne	.-4      	; 0xfb8 <LCD_Initialize+0x482>
     fbc:	9c 83       	std	Y+4, r25	; 0x04
     fbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fc0:	8d 81       	ldd	r24, Y+5	; 0x05
     fc2:	9e 81       	ldd	r25, Y+6	; 0x06
     fc4:	01 97       	sbiw	r24, 0x01	; 1
     fc6:	9e 83       	std	Y+6, r25	; 0x06
     fc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fca:	8d 81       	ldd	r24, Y+5	; 0x05
     fcc:	9e 81       	ldd	r25, Y+6	; 0x06
     fce:	00 97       	sbiw	r24, 0x00	; 0
     fd0:	69 f7       	brne	.-38     	; 0xfac <LCD_Initialize+0x476>
     fd2:	14 c0       	rjmp	.+40     	; 0xffc <LCD_Initialize+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fd4:	6f 81       	ldd	r22, Y+7	; 0x07
     fd6:	78 85       	ldd	r23, Y+8	; 0x08
     fd8:	89 85       	ldd	r24, Y+9	; 0x09
     fda:	9a 85       	ldd	r25, Y+10	; 0x0a
     fdc:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     fe0:	dc 01       	movw	r26, r24
     fe2:	cb 01       	movw	r24, r22
     fe4:	9e 83       	std	Y+6, r25	; 0x06
     fe6:	8d 83       	std	Y+5, r24	; 0x05
     fe8:	8d 81       	ldd	r24, Y+5	; 0x05
     fea:	9e 81       	ldd	r25, Y+6	; 0x06
     fec:	9a 83       	std	Y+2, r25	; 0x02
     fee:	89 83       	std	Y+1, r24	; 0x01
     ff0:	89 81       	ldd	r24, Y+1	; 0x01
     ff2:	9a 81       	ldd	r25, Y+2	; 0x02
     ff4:	01 97       	sbiw	r24, 0x01	; 1
     ff6:	f1 f7       	brne	.-4      	; 0xff4 <LCD_Initialize+0x4be>
     ff8:	9a 83       	std	Y+2, r25	; 0x02
     ffa:	89 83       	std	Y+1, r24	; 0x01
	    _delay_ms(15);
}
     ffc:	ca 5b       	subi	r28, 0xBA	; 186
     ffe:	df 4f       	sbci	r29, 0xFF	; 255
    1000:	0f b6       	in	r0, 0x3f	; 63
    1002:	f8 94       	cli
    1004:	de bf       	out	0x3e, r29	; 62
    1006:	0f be       	out	0x3f, r0	; 63
    1008:	cd bf       	out	0x3d, r28	; 61
    100a:	cf 91       	pop	r28
    100c:	df 91       	pop	r29
    100e:	1f 91       	pop	r17
    1010:	0f 91       	pop	r16
    1012:	08 95       	ret

00001014 <LCD_SENDCOMMAND>:

void LCD_SENDCOMMAND(char command){
    1014:	df 93       	push	r29
    1016:	cf 93       	push	r28
    1018:	cd b7       	in	r28, 0x3d	; 61
    101a:	de b7       	in	r29, 0x3e	; 62
    101c:	6d 97       	sbiw	r28, 0x1d	; 29
    101e:	0f b6       	in	r0, 0x3f	; 63
    1020:	f8 94       	cli
    1022:	de bf       	out	0x3e, r29	; 62
    1024:	0f be       	out	0x3f, r0	; 63
    1026:	cd bf       	out	0x3d, r28	; 61
    1028:	8d 8f       	std	Y+29, r24	; 0x1d

	CLR_BIT(PORTB,RS);
    102a:	a8 e3       	ldi	r26, 0x38	; 56
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e8 e3       	ldi	r30, 0x38	; 56
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	8e 7f       	andi	r24, 0xFE	; 254
    1036:	8c 93       	st	X, r24
	CLR_BIT(PORTB,RW);
    1038:	a8 e3       	ldi	r26, 0x38	; 56
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e8 e3       	ldi	r30, 0x38	; 56
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	80 81       	ld	r24, Z
    1042:	8d 7f       	andi	r24, 0xFD	; 253
    1044:	8c 93       	st	X, r24
    SET_BIT(PORTB,E);
    1046:	a8 e3       	ldi	r26, 0x38	; 56
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e8 e3       	ldi	r30, 0x38	; 56
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	84 60       	ori	r24, 0x04	; 4
    1052:	8c 93       	st	X, r24
	PORTA=command;
    1054:	eb e3       	ldi	r30, 0x3B	; 59
    1056:	f0 e0       	ldi	r31, 0x00	; 0
    1058:	8d 8d       	ldd	r24, Y+29	; 0x1d
    105a:	80 83       	st	Z, r24
	CLR_BIT(PORTB,E);
    105c:	a8 e3       	ldi	r26, 0x38	; 56
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e8 e3       	ldi	r30, 0x38	; 56
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	80 81       	ld	r24, Z
    1066:	8b 7f       	andi	r24, 0xFB	; 251
    1068:	8c 93       	st	X, r24
    106a:	80 e0       	ldi	r24, 0x00	; 0
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	a0 e8       	ldi	r26, 0x80	; 128
    1070:	bf e3       	ldi	r27, 0x3F	; 63
    1072:	89 8f       	std	Y+25, r24	; 0x19
    1074:	9a 8f       	std	Y+26, r25	; 0x1a
    1076:	ab 8f       	std	Y+27, r26	; 0x1b
    1078:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    107a:	69 8d       	ldd	r22, Y+25	; 0x19
    107c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    107e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1080:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	4a ef       	ldi	r20, 0xFA	; 250
    1088:	54 e4       	ldi	r21, 0x44	; 68
    108a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    108e:	dc 01       	movw	r26, r24
    1090:	cb 01       	movw	r24, r22
    1092:	8d 8b       	std	Y+21, r24	; 0x15
    1094:	9e 8b       	std	Y+22, r25	; 0x16
    1096:	af 8b       	std	Y+23, r26	; 0x17
    1098:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    109a:	6d 89       	ldd	r22, Y+21	; 0x15
    109c:	7e 89       	ldd	r23, Y+22	; 0x16
    109e:	8f 89       	ldd	r24, Y+23	; 0x17
    10a0:	98 8d       	ldd	r25, Y+24	; 0x18
    10a2:	20 e0       	ldi	r18, 0x00	; 0
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e8       	ldi	r20, 0x80	; 128
    10a8:	5f e3       	ldi	r21, 0x3F	; 63
    10aa:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    10ae:	88 23       	and	r24, r24
    10b0:	2c f4       	brge	.+10     	; 0x10bc <LCD_SENDCOMMAND+0xa8>
		__ticks = 1;
    10b2:	81 e0       	ldi	r24, 0x01	; 1
    10b4:	90 e0       	ldi	r25, 0x00	; 0
    10b6:	9c 8b       	std	Y+20, r25	; 0x14
    10b8:	8b 8b       	std	Y+19, r24	; 0x13
    10ba:	3f c0       	rjmp	.+126    	; 0x113a <LCD_SENDCOMMAND+0x126>
	else if (__tmp > 65535)
    10bc:	6d 89       	ldd	r22, Y+21	; 0x15
    10be:	7e 89       	ldd	r23, Y+22	; 0x16
    10c0:	8f 89       	ldd	r24, Y+23	; 0x17
    10c2:	98 8d       	ldd	r25, Y+24	; 0x18
    10c4:	20 e0       	ldi	r18, 0x00	; 0
    10c6:	3f ef       	ldi	r19, 0xFF	; 255
    10c8:	4f e7       	ldi	r20, 0x7F	; 127
    10ca:	57 e4       	ldi	r21, 0x47	; 71
    10cc:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    10d0:	18 16       	cp	r1, r24
    10d2:	4c f5       	brge	.+82     	; 0x1126 <LCD_SENDCOMMAND+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10d4:	69 8d       	ldd	r22, Y+25	; 0x19
    10d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    10d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    10da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	30 e0       	ldi	r19, 0x00	; 0
    10e0:	40 e2       	ldi	r20, 0x20	; 32
    10e2:	51 e4       	ldi	r21, 0x41	; 65
    10e4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e8:	dc 01       	movw	r26, r24
    10ea:	cb 01       	movw	r24, r22
    10ec:	bc 01       	movw	r22, r24
    10ee:	cd 01       	movw	r24, r26
    10f0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	9c 8b       	std	Y+20, r25	; 0x14
    10fa:	8b 8b       	std	Y+19, r24	; 0x13
    10fc:	0f c0       	rjmp	.+30     	; 0x111c <LCD_SENDCOMMAND+0x108>
    10fe:	88 ec       	ldi	r24, 0xC8	; 200
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	9a 8b       	std	Y+18, r25	; 0x12
    1104:	89 8b       	std	Y+17, r24	; 0x11
    1106:	89 89       	ldd	r24, Y+17	; 0x11
    1108:	9a 89       	ldd	r25, Y+18	; 0x12
    110a:	01 97       	sbiw	r24, 0x01	; 1
    110c:	f1 f7       	brne	.-4      	; 0x110a <LCD_SENDCOMMAND+0xf6>
    110e:	9a 8b       	std	Y+18, r25	; 0x12
    1110:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1112:	8b 89       	ldd	r24, Y+19	; 0x13
    1114:	9c 89       	ldd	r25, Y+20	; 0x14
    1116:	01 97       	sbiw	r24, 0x01	; 1
    1118:	9c 8b       	std	Y+20, r25	; 0x14
    111a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    111c:	8b 89       	ldd	r24, Y+19	; 0x13
    111e:	9c 89       	ldd	r25, Y+20	; 0x14
    1120:	00 97       	sbiw	r24, 0x00	; 0
    1122:	69 f7       	brne	.-38     	; 0x10fe <LCD_SENDCOMMAND+0xea>
    1124:	14 c0       	rjmp	.+40     	; 0x114e <LCD_SENDCOMMAND+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1126:	6d 89       	ldd	r22, Y+21	; 0x15
    1128:	7e 89       	ldd	r23, Y+22	; 0x16
    112a:	8f 89       	ldd	r24, Y+23	; 0x17
    112c:	98 8d       	ldd	r25, Y+24	; 0x18
    112e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	9c 8b       	std	Y+20, r25	; 0x14
    1138:	8b 8b       	std	Y+19, r24	; 0x13
    113a:	8b 89       	ldd	r24, Y+19	; 0x13
    113c:	9c 89       	ldd	r25, Y+20	; 0x14
    113e:	98 8b       	std	Y+16, r25	; 0x10
    1140:	8f 87       	std	Y+15, r24	; 0x0f
    1142:	8f 85       	ldd	r24, Y+15	; 0x0f
    1144:	98 89       	ldd	r25, Y+16	; 0x10
    1146:	01 97       	sbiw	r24, 0x01	; 1
    1148:	f1 f7       	brne	.-4      	; 0x1146 <LCD_SENDCOMMAND+0x132>
    114a:	98 8b       	std	Y+16, r25	; 0x10
    114c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    SET_BIT(PORTB,E);
    114e:	a8 e3       	ldi	r26, 0x38	; 56
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	e8 e3       	ldi	r30, 0x38	; 56
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	80 81       	ld	r24, Z
    1158:	84 60       	ori	r24, 0x04	; 4
    115a:	8c 93       	st	X, r24
    115c:	80 e0       	ldi	r24, 0x00	; 0
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	a0 ea       	ldi	r26, 0xA0	; 160
    1162:	b0 e4       	ldi	r27, 0x40	; 64
    1164:	8b 87       	std	Y+11, r24	; 0x0b
    1166:	9c 87       	std	Y+12, r25	; 0x0c
    1168:	ad 87       	std	Y+13, r26	; 0x0d
    116a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    116c:	6b 85       	ldd	r22, Y+11	; 0x0b
    116e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1170:	8d 85       	ldd	r24, Y+13	; 0x0d
    1172:	9e 85       	ldd	r25, Y+14	; 0x0e
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	4a ef       	ldi	r20, 0xFA	; 250
    117a:	54 e4       	ldi	r21, 0x44	; 68
    117c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1180:	dc 01       	movw	r26, r24
    1182:	cb 01       	movw	r24, r22
    1184:	8f 83       	std	Y+7, r24	; 0x07
    1186:	98 87       	std	Y+8, r25	; 0x08
    1188:	a9 87       	std	Y+9, r26	; 0x09
    118a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    118c:	6f 81       	ldd	r22, Y+7	; 0x07
    118e:	78 85       	ldd	r23, Y+8	; 0x08
    1190:	89 85       	ldd	r24, Y+9	; 0x09
    1192:	9a 85       	ldd	r25, Y+10	; 0x0a
    1194:	20 e0       	ldi	r18, 0x00	; 0
    1196:	30 e0       	ldi	r19, 0x00	; 0
    1198:	40 e8       	ldi	r20, 0x80	; 128
    119a:	5f e3       	ldi	r21, 0x3F	; 63
    119c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    11a0:	88 23       	and	r24, r24
    11a2:	2c f4       	brge	.+10     	; 0x11ae <LCD_SENDCOMMAND+0x19a>
		__ticks = 1;
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	9e 83       	std	Y+6, r25	; 0x06
    11aa:	8d 83       	std	Y+5, r24	; 0x05
    11ac:	3f c0       	rjmp	.+126    	; 0x122c <LCD_SENDCOMMAND+0x218>
	else if (__tmp > 65535)
    11ae:	6f 81       	ldd	r22, Y+7	; 0x07
    11b0:	78 85       	ldd	r23, Y+8	; 0x08
    11b2:	89 85       	ldd	r24, Y+9	; 0x09
    11b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    11b6:	20 e0       	ldi	r18, 0x00	; 0
    11b8:	3f ef       	ldi	r19, 0xFF	; 255
    11ba:	4f e7       	ldi	r20, 0x7F	; 127
    11bc:	57 e4       	ldi	r21, 0x47	; 71
    11be:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    11c2:	18 16       	cp	r1, r24
    11c4:	4c f5       	brge	.+82     	; 0x1218 <LCD_SENDCOMMAND+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    11c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    11ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    11cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    11ce:	20 e0       	ldi	r18, 0x00	; 0
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	40 e2       	ldi	r20, 0x20	; 32
    11d4:	51 e4       	ldi	r21, 0x41	; 65
    11d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    11da:	dc 01       	movw	r26, r24
    11dc:	cb 01       	movw	r24, r22
    11de:	bc 01       	movw	r22, r24
    11e0:	cd 01       	movw	r24, r26
    11e2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    11e6:	dc 01       	movw	r26, r24
    11e8:	cb 01       	movw	r24, r22
    11ea:	9e 83       	std	Y+6, r25	; 0x06
    11ec:	8d 83       	std	Y+5, r24	; 0x05
    11ee:	0f c0       	rjmp	.+30     	; 0x120e <LCD_SENDCOMMAND+0x1fa>
    11f0:	88 ec       	ldi	r24, 0xC8	; 200
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	9c 83       	std	Y+4, r25	; 0x04
    11f6:	8b 83       	std	Y+3, r24	; 0x03
    11f8:	8b 81       	ldd	r24, Y+3	; 0x03
    11fa:	9c 81       	ldd	r25, Y+4	; 0x04
    11fc:	01 97       	sbiw	r24, 0x01	; 1
    11fe:	f1 f7       	brne	.-4      	; 0x11fc <LCD_SENDCOMMAND+0x1e8>
    1200:	9c 83       	std	Y+4, r25	; 0x04
    1202:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1204:	8d 81       	ldd	r24, Y+5	; 0x05
    1206:	9e 81       	ldd	r25, Y+6	; 0x06
    1208:	01 97       	sbiw	r24, 0x01	; 1
    120a:	9e 83       	std	Y+6, r25	; 0x06
    120c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    120e:	8d 81       	ldd	r24, Y+5	; 0x05
    1210:	9e 81       	ldd	r25, Y+6	; 0x06
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	69 f7       	brne	.-38     	; 0x11f0 <LCD_SENDCOMMAND+0x1dc>
    1216:	14 c0       	rjmp	.+40     	; 0x1240 <LCD_SENDCOMMAND+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1218:	6f 81       	ldd	r22, Y+7	; 0x07
    121a:	78 85       	ldd	r23, Y+8	; 0x08
    121c:	89 85       	ldd	r24, Y+9	; 0x09
    121e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1220:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1224:	dc 01       	movw	r26, r24
    1226:	cb 01       	movw	r24, r22
    1228:	9e 83       	std	Y+6, r25	; 0x06
    122a:	8d 83       	std	Y+5, r24	; 0x05
    122c:	8d 81       	ldd	r24, Y+5	; 0x05
    122e:	9e 81       	ldd	r25, Y+6	; 0x06
    1230:	9a 83       	std	Y+2, r25	; 0x02
    1232:	89 83       	std	Y+1, r24	; 0x01
    1234:	89 81       	ldd	r24, Y+1	; 0x01
    1236:	9a 81       	ldd	r25, Y+2	; 0x02
    1238:	01 97       	sbiw	r24, 0x01	; 1
    123a:	f1 f7       	brne	.-4      	; 0x1238 <LCD_SENDCOMMAND+0x224>
    123c:	9a 83       	std	Y+2, r25	; 0x02
    123e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
    CLR_BIT(PORTB,E);
    1240:	a8 e3       	ldi	r26, 0x38	; 56
    1242:	b0 e0       	ldi	r27, 0x00	; 0
    1244:	e8 e3       	ldi	r30, 0x38	; 56
    1246:	f0 e0       	ldi	r31, 0x00	; 0
    1248:	80 81       	ld	r24, Z
    124a:	8b 7f       	andi	r24, 0xFB	; 251
    124c:	8c 93       	st	X, r24


}
    124e:	6d 96       	adiw	r28, 0x1d	; 29
    1250:	0f b6       	in	r0, 0x3f	; 63
    1252:	f8 94       	cli
    1254:	de bf       	out	0x3e, r29	; 62
    1256:	0f be       	out	0x3f, r0	; 63
    1258:	cd bf       	out	0x3d, r28	; 61
    125a:	cf 91       	pop	r28
    125c:	df 91       	pop	r29
    125e:	08 95       	ret

00001260 <LCD_SENDDATA>:
void LCD_SENDDATA(char data){
    1260:	df 93       	push	r29
    1262:	cf 93       	push	r28
    1264:	cd b7       	in	r28, 0x3d	; 61
    1266:	de b7       	in	r29, 0x3e	; 62
    1268:	6d 97       	sbiw	r28, 0x1d	; 29
    126a:	0f b6       	in	r0, 0x3f	; 63
    126c:	f8 94       	cli
    126e:	de bf       	out	0x3e, r29	; 62
    1270:	0f be       	out	0x3f, r0	; 63
    1272:	cd bf       	out	0x3d, r28	; 61
    1274:	8d 8f       	std	Y+29, r24	; 0x1d

	SET_BIT(PORTB,RS);
    1276:	a8 e3       	ldi	r26, 0x38	; 56
    1278:	b0 e0       	ldi	r27, 0x00	; 0
    127a:	e8 e3       	ldi	r30, 0x38	; 56
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	80 81       	ld	r24, Z
    1280:	81 60       	ori	r24, 0x01	; 1
    1282:	8c 93       	st	X, r24
    CLR_BIT(PORTB,RW);
    1284:	a8 e3       	ldi	r26, 0x38	; 56
    1286:	b0 e0       	ldi	r27, 0x00	; 0
    1288:	e8 e3       	ldi	r30, 0x38	; 56
    128a:	f0 e0       	ldi	r31, 0x00	; 0
    128c:	80 81       	ld	r24, Z
    128e:	8d 7f       	andi	r24, 0xFD	; 253
    1290:	8c 93       	st	X, r24
    SET_BIT(PORTB,E);
    1292:	a8 e3       	ldi	r26, 0x38	; 56
    1294:	b0 e0       	ldi	r27, 0x00	; 0
    1296:	e8 e3       	ldi	r30, 0x38	; 56
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	80 81       	ld	r24, Z
    129c:	84 60       	ori	r24, 0x04	; 4
    129e:	8c 93       	st	X, r24
	PORTA=data;
    12a0:	eb e3       	ldi	r30, 0x3B	; 59
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12a6:	80 83       	st	Z, r24
    CLR_BIT(PORTB,E);
    12a8:	a8 e3       	ldi	r26, 0x38	; 56
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	e8 e3       	ldi	r30, 0x38	; 56
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	8b 7f       	andi	r24, 0xFB	; 251
    12b4:	8c 93       	st	X, r24
    12b6:	80 e0       	ldi	r24, 0x00	; 0
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	a0 e8       	ldi	r26, 0x80	; 128
    12bc:	bf e3       	ldi	r27, 0x3F	; 63
    12be:	89 8f       	std	Y+25, r24	; 0x19
    12c0:	9a 8f       	std	Y+26, r25	; 0x1a
    12c2:	ab 8f       	std	Y+27, r26	; 0x1b
    12c4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12c6:	69 8d       	ldd	r22, Y+25	; 0x19
    12c8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12ca:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12cc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12ce:	20 e0       	ldi	r18, 0x00	; 0
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	4a ef       	ldi	r20, 0xFA	; 250
    12d4:	54 e4       	ldi	r21, 0x44	; 68
    12d6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    12da:	dc 01       	movw	r26, r24
    12dc:	cb 01       	movw	r24, r22
    12de:	8d 8b       	std	Y+21, r24	; 0x15
    12e0:	9e 8b       	std	Y+22, r25	; 0x16
    12e2:	af 8b       	std	Y+23, r26	; 0x17
    12e4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    12e6:	6d 89       	ldd	r22, Y+21	; 0x15
    12e8:	7e 89       	ldd	r23, Y+22	; 0x16
    12ea:	8f 89       	ldd	r24, Y+23	; 0x17
    12ec:	98 8d       	ldd	r25, Y+24	; 0x18
    12ee:	20 e0       	ldi	r18, 0x00	; 0
    12f0:	30 e0       	ldi	r19, 0x00	; 0
    12f2:	40 e8       	ldi	r20, 0x80	; 128
    12f4:	5f e3       	ldi	r21, 0x3F	; 63
    12f6:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    12fa:	88 23       	and	r24, r24
    12fc:	2c f4       	brge	.+10     	; 0x1308 <LCD_SENDDATA+0xa8>
		__ticks = 1;
    12fe:	81 e0       	ldi	r24, 0x01	; 1
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	9c 8b       	std	Y+20, r25	; 0x14
    1304:	8b 8b       	std	Y+19, r24	; 0x13
    1306:	3f c0       	rjmp	.+126    	; 0x1386 <LCD_SENDDATA+0x126>
	else if (__tmp > 65535)
    1308:	6d 89       	ldd	r22, Y+21	; 0x15
    130a:	7e 89       	ldd	r23, Y+22	; 0x16
    130c:	8f 89       	ldd	r24, Y+23	; 0x17
    130e:	98 8d       	ldd	r25, Y+24	; 0x18
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	4f e7       	ldi	r20, 0x7F	; 127
    1316:	57 e4       	ldi	r21, 0x47	; 71
    1318:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	4c f5       	brge	.+82     	; 0x1372 <LCD_SENDDATA+0x112>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1320:	69 8d       	ldd	r22, Y+25	; 0x19
    1322:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1324:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1326:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1328:	20 e0       	ldi	r18, 0x00	; 0
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	40 e2       	ldi	r20, 0x20	; 32
    132e:	51 e4       	ldi	r21, 0x41	; 65
    1330:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1334:	dc 01       	movw	r26, r24
    1336:	cb 01       	movw	r24, r22
    1338:	bc 01       	movw	r22, r24
    133a:	cd 01       	movw	r24, r26
    133c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1340:	dc 01       	movw	r26, r24
    1342:	cb 01       	movw	r24, r22
    1344:	9c 8b       	std	Y+20, r25	; 0x14
    1346:	8b 8b       	std	Y+19, r24	; 0x13
    1348:	0f c0       	rjmp	.+30     	; 0x1368 <LCD_SENDDATA+0x108>
    134a:	88 ec       	ldi	r24, 0xC8	; 200
    134c:	90 e0       	ldi	r25, 0x00	; 0
    134e:	9a 8b       	std	Y+18, r25	; 0x12
    1350:	89 8b       	std	Y+17, r24	; 0x11
    1352:	89 89       	ldd	r24, Y+17	; 0x11
    1354:	9a 89       	ldd	r25, Y+18	; 0x12
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <LCD_SENDDATA+0xf6>
    135a:	9a 8b       	std	Y+18, r25	; 0x12
    135c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    135e:	8b 89       	ldd	r24, Y+19	; 0x13
    1360:	9c 89       	ldd	r25, Y+20	; 0x14
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	9c 8b       	std	Y+20, r25	; 0x14
    1366:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1368:	8b 89       	ldd	r24, Y+19	; 0x13
    136a:	9c 89       	ldd	r25, Y+20	; 0x14
    136c:	00 97       	sbiw	r24, 0x00	; 0
    136e:	69 f7       	brne	.-38     	; 0x134a <LCD_SENDDATA+0xea>
    1370:	14 c0       	rjmp	.+40     	; 0x139a <LCD_SENDDATA+0x13a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1372:	6d 89       	ldd	r22, Y+21	; 0x15
    1374:	7e 89       	ldd	r23, Y+22	; 0x16
    1376:	8f 89       	ldd	r24, Y+23	; 0x17
    1378:	98 8d       	ldd	r25, Y+24	; 0x18
    137a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    137e:	dc 01       	movw	r26, r24
    1380:	cb 01       	movw	r24, r22
    1382:	9c 8b       	std	Y+20, r25	; 0x14
    1384:	8b 8b       	std	Y+19, r24	; 0x13
    1386:	8b 89       	ldd	r24, Y+19	; 0x13
    1388:	9c 89       	ldd	r25, Y+20	; 0x14
    138a:	98 8b       	std	Y+16, r25	; 0x10
    138c:	8f 87       	std	Y+15, r24	; 0x0f
    138e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1390:	98 89       	ldd	r25, Y+16	; 0x10
    1392:	01 97       	sbiw	r24, 0x01	; 1
    1394:	f1 f7       	brne	.-4      	; 0x1392 <LCD_SENDDATA+0x132>
    1396:	98 8b       	std	Y+16, r25	; 0x10
    1398:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1);
    SET_BIT(PORTB,E);
    139a:	a8 e3       	ldi	r26, 0x38	; 56
    139c:	b0 e0       	ldi	r27, 0x00	; 0
    139e:	e8 e3       	ldi	r30, 0x38	; 56
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	80 81       	ld	r24, Z
    13a4:	84 60       	ori	r24, 0x04	; 4
    13a6:	8c 93       	st	X, r24
    13a8:	80 e0       	ldi	r24, 0x00	; 0
    13aa:	90 e0       	ldi	r25, 0x00	; 0
    13ac:	a0 ea       	ldi	r26, 0xA0	; 160
    13ae:	b0 e4       	ldi	r27, 0x40	; 64
    13b0:	8b 87       	std	Y+11, r24	; 0x0b
    13b2:	9c 87       	std	Y+12, r25	; 0x0c
    13b4:	ad 87       	std	Y+13, r26	; 0x0d
    13b6:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    13b8:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ba:	7c 85       	ldd	r23, Y+12	; 0x0c
    13bc:	8d 85       	ldd	r24, Y+13	; 0x0d
    13be:	9e 85       	ldd	r25, Y+14	; 0x0e
    13c0:	20 e0       	ldi	r18, 0x00	; 0
    13c2:	30 e0       	ldi	r19, 0x00	; 0
    13c4:	4a ef       	ldi	r20, 0xFA	; 250
    13c6:	54 e4       	ldi	r21, 0x44	; 68
    13c8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	8f 83       	std	Y+7, r24	; 0x07
    13d2:	98 87       	std	Y+8, r25	; 0x08
    13d4:	a9 87       	std	Y+9, r26	; 0x09
    13d6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13d8:	6f 81       	ldd	r22, Y+7	; 0x07
    13da:	78 85       	ldd	r23, Y+8	; 0x08
    13dc:	89 85       	ldd	r24, Y+9	; 0x09
    13de:	9a 85       	ldd	r25, Y+10	; 0x0a
    13e0:	20 e0       	ldi	r18, 0x00	; 0
    13e2:	30 e0       	ldi	r19, 0x00	; 0
    13e4:	40 e8       	ldi	r20, 0x80	; 128
    13e6:	5f e3       	ldi	r21, 0x3F	; 63
    13e8:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    13ec:	88 23       	and	r24, r24
    13ee:	2c f4       	brge	.+10     	; 0x13fa <LCD_SENDDATA+0x19a>
		__ticks = 1;
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9e 83       	std	Y+6, r25	; 0x06
    13f6:	8d 83       	std	Y+5, r24	; 0x05
    13f8:	3f c0       	rjmp	.+126    	; 0x1478 <LCD_SENDDATA+0x218>
	else if (__tmp > 65535)
    13fa:	6f 81       	ldd	r22, Y+7	; 0x07
    13fc:	78 85       	ldd	r23, Y+8	; 0x08
    13fe:	89 85       	ldd	r24, Y+9	; 0x09
    1400:	9a 85       	ldd	r25, Y+10	; 0x0a
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	3f ef       	ldi	r19, 0xFF	; 255
    1406:	4f e7       	ldi	r20, 0x7F	; 127
    1408:	57 e4       	ldi	r21, 0x47	; 71
    140a:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    140e:	18 16       	cp	r1, r24
    1410:	4c f5       	brge	.+82     	; 0x1464 <LCD_SENDDATA+0x204>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1412:	6b 85       	ldd	r22, Y+11	; 0x0b
    1414:	7c 85       	ldd	r23, Y+12	; 0x0c
    1416:	8d 85       	ldd	r24, Y+13	; 0x0d
    1418:	9e 85       	ldd	r25, Y+14	; 0x0e
    141a:	20 e0       	ldi	r18, 0x00	; 0
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	40 e2       	ldi	r20, 0x20	; 32
    1420:	51 e4       	ldi	r21, 0x41	; 65
    1422:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1426:	dc 01       	movw	r26, r24
    1428:	cb 01       	movw	r24, r22
    142a:	bc 01       	movw	r22, r24
    142c:	cd 01       	movw	r24, r26
    142e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1432:	dc 01       	movw	r26, r24
    1434:	cb 01       	movw	r24, r22
    1436:	9e 83       	std	Y+6, r25	; 0x06
    1438:	8d 83       	std	Y+5, r24	; 0x05
    143a:	0f c0       	rjmp	.+30     	; 0x145a <LCD_SENDDATA+0x1fa>
    143c:	88 ec       	ldi	r24, 0xC8	; 200
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	9c 83       	std	Y+4, r25	; 0x04
    1442:	8b 83       	std	Y+3, r24	; 0x03
    1444:	8b 81       	ldd	r24, Y+3	; 0x03
    1446:	9c 81       	ldd	r25, Y+4	; 0x04
    1448:	01 97       	sbiw	r24, 0x01	; 1
    144a:	f1 f7       	brne	.-4      	; 0x1448 <LCD_SENDDATA+0x1e8>
    144c:	9c 83       	std	Y+4, r25	; 0x04
    144e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	01 97       	sbiw	r24, 0x01	; 1
    1456:	9e 83       	std	Y+6, r25	; 0x06
    1458:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    145a:	8d 81       	ldd	r24, Y+5	; 0x05
    145c:	9e 81       	ldd	r25, Y+6	; 0x06
    145e:	00 97       	sbiw	r24, 0x00	; 0
    1460:	69 f7       	brne	.-38     	; 0x143c <LCD_SENDDATA+0x1dc>
    1462:	14 c0       	rjmp	.+40     	; 0x148c <LCD_SENDDATA+0x22c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1464:	6f 81       	ldd	r22, Y+7	; 0x07
    1466:	78 85       	ldd	r23, Y+8	; 0x08
    1468:	89 85       	ldd	r24, Y+9	; 0x09
    146a:	9a 85       	ldd	r25, Y+10	; 0x0a
    146c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1470:	dc 01       	movw	r26, r24
    1472:	cb 01       	movw	r24, r22
    1474:	9e 83       	std	Y+6, r25	; 0x06
    1476:	8d 83       	std	Y+5, r24	; 0x05
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	9a 83       	std	Y+2, r25	; 0x02
    147e:	89 83       	std	Y+1, r24	; 0x01
    1480:	89 81       	ldd	r24, Y+1	; 0x01
    1482:	9a 81       	ldd	r25, Y+2	; 0x02
    1484:	01 97       	sbiw	r24, 0x01	; 1
    1486:	f1 f7       	brne	.-4      	; 0x1484 <LCD_SENDDATA+0x224>
    1488:	9a 83       	std	Y+2, r25	; 0x02
    148a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(5);
//    CLEAR_BIT(PORTB,E);
}
    148c:	6d 96       	adiw	r28, 0x1d	; 29
    148e:	0f b6       	in	r0, 0x3f	; 63
    1490:	f8 94       	cli
    1492:	de bf       	out	0x3e, r29	; 62
    1494:	0f be       	out	0x3f, r0	; 63
    1496:	cd bf       	out	0x3d, r28	; 61
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <LCD_SENDSTR>:
void LCD_SENDSTR(char *PTR){
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <LCD_SENDSTR+0x6>
    14a4:	00 d0       	rcall	.+0      	; 0x14a6 <LCD_SENDSTR+0x8>
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	9c 83       	std	Y+4, r25	; 0x04
    14ac:	8b 83       	std	Y+3, r24	; 0x03
	int count=0;
    14ae:	1a 82       	std	Y+2, r1	; 0x02
    14b0:	19 82       	std	Y+1, r1	; 0x01
while (1){

if(PTR[count]=='\0'){
    14b2:	29 81       	ldd	r18, Y+1	; 0x01
    14b4:	3a 81       	ldd	r19, Y+2	; 0x02
    14b6:	8b 81       	ldd	r24, Y+3	; 0x03
    14b8:	9c 81       	ldd	r25, Y+4	; 0x04
    14ba:	fc 01       	movw	r30, r24
    14bc:	e2 0f       	add	r30, r18
    14be:	f3 1f       	adc	r31, r19
    14c0:	80 81       	ld	r24, Z
    14c2:	88 23       	and	r24, r24
    14c4:	81 f0       	breq	.+32     	; 0x14e6 <LCD_SENDSTR+0x48>

	break;
}
	LCD_SENDDATA(PTR[count]);
    14c6:	29 81       	ldd	r18, Y+1	; 0x01
    14c8:	3a 81       	ldd	r19, Y+2	; 0x02
    14ca:	8b 81       	ldd	r24, Y+3	; 0x03
    14cc:	9c 81       	ldd	r25, Y+4	; 0x04
    14ce:	fc 01       	movw	r30, r24
    14d0:	e2 0f       	add	r30, r18
    14d2:	f3 1f       	adc	r31, r19
    14d4:	80 81       	ld	r24, Z
    14d6:	0e 94 30 09 	call	0x1260	; 0x1260 <LCD_SENDDATA>
	count++;
    14da:	89 81       	ldd	r24, Y+1	; 0x01
    14dc:	9a 81       	ldd	r25, Y+2	; 0x02
    14de:	01 96       	adiw	r24, 0x01	; 1
    14e0:	9a 83       	std	Y+2, r25	; 0x02
    14e2:	89 83       	std	Y+1, r24	; 0x01
    14e4:	e6 cf       	rjmp	.-52     	; 0x14b2 <LCD_SENDSTR+0x14>

}

}
    14e6:	0f 90       	pop	r0
    14e8:	0f 90       	pop	r0
    14ea:	0f 90       	pop	r0
    14ec:	0f 90       	pop	r0
    14ee:	cf 91       	pop	r28
    14f0:	df 91       	pop	r29
    14f2:	08 95       	ret

000014f4 <LCD_SET_COURSER>:

void LCD_SET_COURSER(unsigned char X_POSITION,unsigned char Y_POSITION)
{
    14f4:	df 93       	push	r29
    14f6:	cf 93       	push	r28
    14f8:	00 d0       	rcall	.+0      	; 0x14fa <LCD_SET_COURSER+0x6>
    14fa:	00 d0       	rcall	.+0      	; 0x14fc <LCD_SET_COURSER+0x8>
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
    1500:	8b 83       	std	Y+3, r24	; 0x03
    1502:	6c 83       	std	Y+4, r22	; 0x04
	int ADD;
	if(X_POSITION==0){
    1504:	8b 81       	ldd	r24, Y+3	; 0x03
    1506:	88 23       	and	r24, r24
    1508:	29 f4       	brne	.+10     	; 0x1514 <LCD_SET_COURSER+0x20>
		ADD=0X80;
    150a:	80 e8       	ldi	r24, 0x80	; 128
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	9a 83       	std	Y+2, r25	; 0x02
    1510:	89 83       	std	Y+1, r24	; 0x01
    1512:	07 c0       	rjmp	.+14     	; 0x1522 <LCD_SET_COURSER+0x2e>
	}
	else if (X_POSITION==1){
    1514:	8b 81       	ldd	r24, Y+3	; 0x03
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	21 f4       	brne	.+8      	; 0x1522 <LCD_SET_COURSER+0x2e>
		ADD=0XC0;
    151a:	80 ec       	ldi	r24, 0xC0	; 192
    151c:	90 e0       	ldi	r25, 0x00	; 0
    151e:	9a 83       	std	Y+2, r25	; 0x02
    1520:	89 83       	std	Y+1, r24	; 0x01
	}
	if (Y_POSITION<16){
    1522:	8c 81       	ldd	r24, Y+4	; 0x04
    1524:	80 31       	cpi	r24, 0x10	; 16
    1526:	48 f4       	brcc	.+18     	; 0x153a <LCD_SET_COURSER+0x46>

				ADD +=Y_POSITION;
    1528:	8c 81       	ldd	r24, Y+4	; 0x04
    152a:	28 2f       	mov	r18, r24
    152c:	30 e0       	ldi	r19, 0x00	; 0
    152e:	89 81       	ldd	r24, Y+1	; 0x01
    1530:	9a 81       	ldd	r25, Y+2	; 0x02
    1532:	82 0f       	add	r24, r18
    1534:	93 1f       	adc	r25, r19
    1536:	9a 83       	std	Y+2, r25	; 0x02
    1538:	89 83       	std	Y+1, r24	; 0x01
	}
	LCD_SENDCOMMAND(ADD);
    153a:	89 81       	ldd	r24, Y+1	; 0x01
    153c:	0e 94 0a 08 	call	0x1014	; 0x1014 <LCD_SENDCOMMAND>


}
    1540:	0f 90       	pop	r0
    1542:	0f 90       	pop	r0
    1544:	0f 90       	pop	r0
    1546:	0f 90       	pop	r0
    1548:	cf 91       	pop	r28
    154a:	df 91       	pop	r29
    154c:	08 95       	ret

0000154e <DIO_SetPortDirection>:
#include "../LIB/BIT_MATH.h"
#include "DIO_Types.h"
#include "DIO_REG.h"

void DIO_SetPortDirection(DIO_PORTID port_ID ,DIO_DIRECTION direction)
{
    154e:	df 93       	push	r29
    1550:	cf 93       	push	r28
    1552:	00 d0       	rcall	.+0      	; 0x1554 <DIO_SetPortDirection+0x6>
    1554:	00 d0       	rcall	.+0      	; 0x1556 <DIO_SetPortDirection+0x8>
    1556:	00 d0       	rcall	.+0      	; 0x1558 <DIO_SetPortDirection+0xa>
    1558:	cd b7       	in	r28, 0x3d	; 61
    155a:	de b7       	in	r29, 0x3e	; 62
    155c:	89 83       	std	Y+1, r24	; 0x01
    155e:	6a 83       	std	Y+2, r22	; 0x02

if (output==direction){
    1560:	8a 81       	ldd	r24, Y+2	; 0x02
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	99 f5       	brne	.+102    	; 0x15cc <DIO_SetPortDirection+0x7e>
	switch(port_ID){
    1566:	89 81       	ldd	r24, Y+1	; 0x01
    1568:	28 2f       	mov	r18, r24
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	3e 83       	std	Y+6, r19	; 0x06
    156e:	2d 83       	std	Y+5, r18	; 0x05
    1570:	8d 81       	ldd	r24, Y+5	; 0x05
    1572:	9e 81       	ldd	r25, Y+6	; 0x06
    1574:	81 30       	cpi	r24, 0x01	; 1
    1576:	91 05       	cpc	r25, r1
    1578:	d1 f0       	breq	.+52     	; 0x15ae <DIO_SetPortDirection+0x60>
    157a:	2d 81       	ldd	r18, Y+5	; 0x05
    157c:	3e 81       	ldd	r19, Y+6	; 0x06
    157e:	22 30       	cpi	r18, 0x02	; 2
    1580:	31 05       	cpc	r19, r1
    1582:	2c f4       	brge	.+10     	; 0x158e <DIO_SetPortDirection+0x40>
    1584:	8d 81       	ldd	r24, Y+5	; 0x05
    1586:	9e 81       	ldd	r25, Y+6	; 0x06
    1588:	00 97       	sbiw	r24, 0x00	; 0
    158a:	61 f0       	breq	.+24     	; 0x15a4 <DIO_SetPortDirection+0x56>
    158c:	50 c0       	rjmp	.+160    	; 0x162e <DIO_SetPortDirection+0xe0>
    158e:	2d 81       	ldd	r18, Y+5	; 0x05
    1590:	3e 81       	ldd	r19, Y+6	; 0x06
    1592:	22 30       	cpi	r18, 0x02	; 2
    1594:	31 05       	cpc	r19, r1
    1596:	81 f0       	breq	.+32     	; 0x15b8 <DIO_SetPortDirection+0x6a>
    1598:	8d 81       	ldd	r24, Y+5	; 0x05
    159a:	9e 81       	ldd	r25, Y+6	; 0x06
    159c:	83 30       	cpi	r24, 0x03	; 3
    159e:	91 05       	cpc	r25, r1
    15a0:	81 f0       	breq	.+32     	; 0x15c2 <DIO_SetPortDirection+0x74>
    15a2:	45 c0       	rjmp	.+138    	; 0x162e <DIO_SetPortDirection+0xe0>

	case portA: DDRA_REG = 0xFF; break;
    15a4:	ea e3       	ldi	r30, 0x3A	; 58
    15a6:	f0 e0       	ldi	r31, 0x00	; 0
    15a8:	8f ef       	ldi	r24, 0xFF	; 255
    15aa:	80 83       	st	Z, r24
    15ac:	40 c0       	rjmp	.+128    	; 0x162e <DIO_SetPortDirection+0xe0>
	case portB: DDRB_REG = 0xFF; break;
    15ae:	e7 e3       	ldi	r30, 0x37	; 55
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	8f ef       	ldi	r24, 0xFF	; 255
    15b4:	80 83       	st	Z, r24
    15b6:	3b c0       	rjmp	.+118    	; 0x162e <DIO_SetPortDirection+0xe0>
	case portC: DDRC_REG = 0xFF; break;
    15b8:	e4 e3       	ldi	r30, 0x34	; 52
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	8f ef       	ldi	r24, 0xFF	; 255
    15be:	80 83       	st	Z, r24
    15c0:	36 c0       	rjmp	.+108    	; 0x162e <DIO_SetPortDirection+0xe0>
	case portD: DDRD_REG = 0xFF; break;
    15c2:	e1 e3       	ldi	r30, 0x31	; 49
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	8f ef       	ldi	r24, 0xFF	; 255
    15c8:	80 83       	st	Z, r24
    15ca:	31 c0       	rjmp	.+98     	; 0x162e <DIO_SetPortDirection+0xe0>
	}
	}
	else if (input==direction){
    15cc:	8a 81       	ldd	r24, Y+2	; 0x02
    15ce:	88 23       	and	r24, r24
    15d0:	71 f5       	brne	.+92     	; 0x162e <DIO_SetPortDirection+0xe0>
		switch(port_ID){
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	28 2f       	mov	r18, r24
    15d6:	30 e0       	ldi	r19, 0x00	; 0
    15d8:	3c 83       	std	Y+4, r19	; 0x04
    15da:	2b 83       	std	Y+3, r18	; 0x03
    15dc:	8b 81       	ldd	r24, Y+3	; 0x03
    15de:	9c 81       	ldd	r25, Y+4	; 0x04
    15e0:	81 30       	cpi	r24, 0x01	; 1
    15e2:	91 05       	cpc	r25, r1
    15e4:	c9 f0       	breq	.+50     	; 0x1618 <DIO_SetPortDirection+0xca>
    15e6:	2b 81       	ldd	r18, Y+3	; 0x03
    15e8:	3c 81       	ldd	r19, Y+4	; 0x04
    15ea:	22 30       	cpi	r18, 0x02	; 2
    15ec:	31 05       	cpc	r19, r1
    15ee:	2c f4       	brge	.+10     	; 0x15fa <DIO_SetPortDirection+0xac>
    15f0:	8b 81       	ldd	r24, Y+3	; 0x03
    15f2:	9c 81       	ldd	r25, Y+4	; 0x04
    15f4:	00 97       	sbiw	r24, 0x00	; 0
    15f6:	61 f0       	breq	.+24     	; 0x1610 <DIO_SetPortDirection+0xc2>
    15f8:	1a c0       	rjmp	.+52     	; 0x162e <DIO_SetPortDirection+0xe0>
    15fa:	2b 81       	ldd	r18, Y+3	; 0x03
    15fc:	3c 81       	ldd	r19, Y+4	; 0x04
    15fe:	22 30       	cpi	r18, 0x02	; 2
    1600:	31 05       	cpc	r19, r1
    1602:	71 f0       	breq	.+28     	; 0x1620 <DIO_SetPortDirection+0xd2>
    1604:	8b 81       	ldd	r24, Y+3	; 0x03
    1606:	9c 81       	ldd	r25, Y+4	; 0x04
    1608:	83 30       	cpi	r24, 0x03	; 3
    160a:	91 05       	cpc	r25, r1
    160c:	69 f0       	breq	.+26     	; 0x1628 <DIO_SetPortDirection+0xda>
    160e:	0f c0       	rjmp	.+30     	; 0x162e <DIO_SetPortDirection+0xe0>

	case portA: DDRA_REG = 0x00; break;
    1610:	ea e3       	ldi	r30, 0x3A	; 58
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	10 82       	st	Z, r1
    1616:	0b c0       	rjmp	.+22     	; 0x162e <DIO_SetPortDirection+0xe0>
	case portB: DDRB_REG = 0x00; break;
    1618:	e7 e3       	ldi	r30, 0x37	; 55
    161a:	f0 e0       	ldi	r31, 0x00	; 0
    161c:	10 82       	st	Z, r1
    161e:	07 c0       	rjmp	.+14     	; 0x162e <DIO_SetPortDirection+0xe0>
	case portC: DDRC_REG = 0x00; break;
    1620:	e4 e3       	ldi	r30, 0x34	; 52
    1622:	f0 e0       	ldi	r31, 0x00	; 0
    1624:	10 82       	st	Z, r1
    1626:	03 c0       	rjmp	.+6      	; 0x162e <DIO_SetPortDirection+0xe0>
	case portD: DDRD_REG = 0x00; break;
    1628:	e1 e3       	ldi	r30, 0x31	; 49
    162a:	f0 e0       	ldi	r31, 0x00	; 0
    162c:	10 82       	st	Z, r1

	}

    }

}
    162e:	26 96       	adiw	r28, 0x06	; 6
    1630:	0f b6       	in	r0, 0x3f	; 63
    1632:	f8 94       	cli
    1634:	de bf       	out	0x3e, r29	; 62
    1636:	0f be       	out	0x3f, r0	; 63
    1638:	cd bf       	out	0x3d, r28	; 61
    163a:	cf 91       	pop	r28
    163c:	df 91       	pop	r29
    163e:	08 95       	ret

00001640 <DIO_SetPortValue>:
void DIO_SetPortValue(DIO_PORTID port_ID ,unsigned char value){
    1640:	df 93       	push	r29
    1642:	cf 93       	push	r28
    1644:	00 d0       	rcall	.+0      	; 0x1646 <DIO_SetPortValue+0x6>
    1646:	00 d0       	rcall	.+0      	; 0x1648 <DIO_SetPortValue+0x8>
    1648:	cd b7       	in	r28, 0x3d	; 61
    164a:	de b7       	in	r29, 0x3e	; 62
    164c:	89 83       	std	Y+1, r24	; 0x01
    164e:	6a 83       	std	Y+2, r22	; 0x02

	switch(port_ID){
    1650:	89 81       	ldd	r24, Y+1	; 0x01
    1652:	28 2f       	mov	r18, r24
    1654:	30 e0       	ldi	r19, 0x00	; 0
    1656:	3c 83       	std	Y+4, r19	; 0x04
    1658:	2b 83       	std	Y+3, r18	; 0x03
    165a:	8b 81       	ldd	r24, Y+3	; 0x03
    165c:	9c 81       	ldd	r25, Y+4	; 0x04
    165e:	81 30       	cpi	r24, 0x01	; 1
    1660:	91 05       	cpc	r25, r1
    1662:	d1 f0       	breq	.+52     	; 0x1698 <DIO_SetPortValue+0x58>
    1664:	2b 81       	ldd	r18, Y+3	; 0x03
    1666:	3c 81       	ldd	r19, Y+4	; 0x04
    1668:	22 30       	cpi	r18, 0x02	; 2
    166a:	31 05       	cpc	r19, r1
    166c:	2c f4       	brge	.+10     	; 0x1678 <DIO_SetPortValue+0x38>
    166e:	8b 81       	ldd	r24, Y+3	; 0x03
    1670:	9c 81       	ldd	r25, Y+4	; 0x04
    1672:	00 97       	sbiw	r24, 0x00	; 0
    1674:	61 f0       	breq	.+24     	; 0x168e <DIO_SetPortValue+0x4e>
    1676:	1e c0       	rjmp	.+60     	; 0x16b4 <DIO_SetPortValue+0x74>
    1678:	2b 81       	ldd	r18, Y+3	; 0x03
    167a:	3c 81       	ldd	r19, Y+4	; 0x04
    167c:	22 30       	cpi	r18, 0x02	; 2
    167e:	31 05       	cpc	r19, r1
    1680:	81 f0       	breq	.+32     	; 0x16a2 <DIO_SetPortValue+0x62>
    1682:	8b 81       	ldd	r24, Y+3	; 0x03
    1684:	9c 81       	ldd	r25, Y+4	; 0x04
    1686:	83 30       	cpi	r24, 0x03	; 3
    1688:	91 05       	cpc	r25, r1
    168a:	81 f0       	breq	.+32     	; 0x16ac <DIO_SetPortValue+0x6c>
    168c:	13 c0       	rjmp	.+38     	; 0x16b4 <DIO_SetPortValue+0x74>

		case portA: PORTA_REG = value; break;
    168e:	eb e3       	ldi	r30, 0x3B	; 59
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	8a 81       	ldd	r24, Y+2	; 0x02
    1694:	80 83       	st	Z, r24
    1696:	0e c0       	rjmp	.+28     	; 0x16b4 <DIO_SetPortValue+0x74>
		case portB: PORTB_REG = value; break;
    1698:	e8 e3       	ldi	r30, 0x38	; 56
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	8a 81       	ldd	r24, Y+2	; 0x02
    169e:	80 83       	st	Z, r24
    16a0:	09 c0       	rjmp	.+18     	; 0x16b4 <DIO_SetPortValue+0x74>
		case portC: PORTC_REG = value; break;
    16a2:	e5 e3       	ldi	r30, 0x35	; 53
    16a4:	f0 e0       	ldi	r31, 0x00	; 0
    16a6:	8a 81       	ldd	r24, Y+2	; 0x02
    16a8:	80 83       	st	Z, r24
    16aa:	04 c0       	rjmp	.+8      	; 0x16b4 <DIO_SetPortValue+0x74>
		case portD: PORTD_REG = value; break;
    16ac:	e2 e3       	ldi	r30, 0x32	; 50
    16ae:	f0 e0       	ldi	r31, 0x00	; 0
    16b0:	8a 81       	ldd	r24, Y+2	; 0x02
    16b2:	80 83       	st	Z, r24
		}

}
    16b4:	0f 90       	pop	r0
    16b6:	0f 90       	pop	r0
    16b8:	0f 90       	pop	r0
    16ba:	0f 90       	pop	r0
    16bc:	cf 91       	pop	r28
    16be:	df 91       	pop	r29
    16c0:	08 95       	ret

000016c2 <DIO_SetPinDirection>:
void DIO_SetPinDirection(DIO_PORTID port_ID ,DIO_PINID Pin,DIO_DIRECTION direction){
    16c2:	df 93       	push	r29
    16c4:	cf 93       	push	r28
    16c6:	cd b7       	in	r28, 0x3d	; 61
    16c8:	de b7       	in	r29, 0x3e	; 62
    16ca:	27 97       	sbiw	r28, 0x07	; 7
    16cc:	0f b6       	in	r0, 0x3f	; 63
    16ce:	f8 94       	cli
    16d0:	de bf       	out	0x3e, r29	; 62
    16d2:	0f be       	out	0x3f, r0	; 63
    16d4:	cd bf       	out	0x3d, r28	; 61
    16d6:	89 83       	std	Y+1, r24	; 0x01
    16d8:	6a 83       	std	Y+2, r22	; 0x02
    16da:	4b 83       	std	Y+3, r20	; 0x03

	if(port_ID<=portD && Pin<=pin7) {
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	84 30       	cpi	r24, 0x04	; 4
    16e0:	08 f0       	brcs	.+2      	; 0x16e4 <DIO_SetPinDirection+0x22>
    16e2:	ee c0       	rjmp	.+476    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
    16e4:	8a 81       	ldd	r24, Y+2	; 0x02
    16e6:	88 30       	cpi	r24, 0x08	; 8
    16e8:	08 f0       	brcs	.+2      	; 0x16ec <DIO_SetPinDirection+0x2a>
    16ea:	ea c0       	rjmp	.+468    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
		if(output==direction) {
    16ec:	8b 81       	ldd	r24, Y+3	; 0x03
    16ee:	81 30       	cpi	r24, 0x01	; 1
    16f0:	09 f0       	breq	.+2      	; 0x16f4 <DIO_SetPinDirection+0x32>
    16f2:	6f c0       	rjmp	.+222    	; 0x17d2 <DIO_SetPinDirection+0x110>

		switch(port_ID){
    16f4:	89 81       	ldd	r24, Y+1	; 0x01
    16f6:	28 2f       	mov	r18, r24
    16f8:	30 e0       	ldi	r19, 0x00	; 0
    16fa:	3f 83       	std	Y+7, r19	; 0x07
    16fc:	2e 83       	std	Y+6, r18	; 0x06
    16fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1700:	9f 81       	ldd	r25, Y+7	; 0x07
    1702:	81 30       	cpi	r24, 0x01	; 1
    1704:	91 05       	cpc	r25, r1
    1706:	49 f1       	breq	.+82     	; 0x175a <DIO_SetPinDirection+0x98>
    1708:	2e 81       	ldd	r18, Y+6	; 0x06
    170a:	3f 81       	ldd	r19, Y+7	; 0x07
    170c:	22 30       	cpi	r18, 0x02	; 2
    170e:	31 05       	cpc	r19, r1
    1710:	2c f4       	brge	.+10     	; 0x171c <DIO_SetPinDirection+0x5a>
    1712:	8e 81       	ldd	r24, Y+6	; 0x06
    1714:	9f 81       	ldd	r25, Y+7	; 0x07
    1716:	00 97       	sbiw	r24, 0x00	; 0
    1718:	61 f0       	breq	.+24     	; 0x1732 <DIO_SetPinDirection+0x70>
    171a:	d2 c0       	rjmp	.+420    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
    171c:	2e 81       	ldd	r18, Y+6	; 0x06
    171e:	3f 81       	ldd	r19, Y+7	; 0x07
    1720:	22 30       	cpi	r18, 0x02	; 2
    1722:	31 05       	cpc	r19, r1
    1724:	71 f1       	breq	.+92     	; 0x1782 <DIO_SetPinDirection+0xc0>
    1726:	8e 81       	ldd	r24, Y+6	; 0x06
    1728:	9f 81       	ldd	r25, Y+7	; 0x07
    172a:	83 30       	cpi	r24, 0x03	; 3
    172c:	91 05       	cpc	r25, r1
    172e:	e9 f1       	breq	.+122    	; 0x17aa <DIO_SetPinDirection+0xe8>
    1730:	c7 c0       	rjmp	.+398    	; 0x18c0 <DIO_SetPinDirection+0x1fe>

		    case portA: SET_BIT(DDRA_REG,Pin); break;
    1732:	aa e3       	ldi	r26, 0x3A	; 58
    1734:	b0 e0       	ldi	r27, 0x00	; 0
    1736:	ea e3       	ldi	r30, 0x3A	; 58
    1738:	f0 e0       	ldi	r31, 0x00	; 0
    173a:	80 81       	ld	r24, Z
    173c:	48 2f       	mov	r20, r24
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	81 e0       	ldi	r24, 0x01	; 1
    1746:	90 e0       	ldi	r25, 0x00	; 0
    1748:	02 2e       	mov	r0, r18
    174a:	02 c0       	rjmp	.+4      	; 0x1750 <DIO_SetPinDirection+0x8e>
    174c:	88 0f       	add	r24, r24
    174e:	99 1f       	adc	r25, r25
    1750:	0a 94       	dec	r0
    1752:	e2 f7       	brpl	.-8      	; 0x174c <DIO_SetPinDirection+0x8a>
    1754:	84 2b       	or	r24, r20
    1756:	8c 93       	st	X, r24
    1758:	b3 c0       	rjmp	.+358    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
		    case portB: SET_BIT(DDRB_REG,Pin); break;
    175a:	a7 e3       	ldi	r26, 0x37	; 55
    175c:	b0 e0       	ldi	r27, 0x00	; 0
    175e:	e7 e3       	ldi	r30, 0x37	; 55
    1760:	f0 e0       	ldi	r31, 0x00	; 0
    1762:	80 81       	ld	r24, Z
    1764:	48 2f       	mov	r20, r24
    1766:	8a 81       	ldd	r24, Y+2	; 0x02
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	81 e0       	ldi	r24, 0x01	; 1
    176e:	90 e0       	ldi	r25, 0x00	; 0
    1770:	02 2e       	mov	r0, r18
    1772:	02 c0       	rjmp	.+4      	; 0x1778 <DIO_SetPinDirection+0xb6>
    1774:	88 0f       	add	r24, r24
    1776:	99 1f       	adc	r25, r25
    1778:	0a 94       	dec	r0
    177a:	e2 f7       	brpl	.-8      	; 0x1774 <DIO_SetPinDirection+0xb2>
    177c:	84 2b       	or	r24, r20
    177e:	8c 93       	st	X, r24
    1780:	9f c0       	rjmp	.+318    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
		    case portC: SET_BIT(DDRC_REG,Pin); break;
    1782:	a4 e3       	ldi	r26, 0x34	; 52
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e4 e3       	ldi	r30, 0x34	; 52
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	48 2f       	mov	r20, r24
    178e:	8a 81       	ldd	r24, Y+2	; 0x02
    1790:	28 2f       	mov	r18, r24
    1792:	30 e0       	ldi	r19, 0x00	; 0
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	02 2e       	mov	r0, r18
    179a:	02 c0       	rjmp	.+4      	; 0x17a0 <DIO_SetPinDirection+0xde>
    179c:	88 0f       	add	r24, r24
    179e:	99 1f       	adc	r25, r25
    17a0:	0a 94       	dec	r0
    17a2:	e2 f7       	brpl	.-8      	; 0x179c <DIO_SetPinDirection+0xda>
    17a4:	84 2b       	or	r24, r20
    17a6:	8c 93       	st	X, r24
    17a8:	8b c0       	rjmp	.+278    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
		    case portD: SET_BIT(DDRD_REG,Pin); break;
    17aa:	a1 e3       	ldi	r26, 0x31	; 49
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e1 e3       	ldi	r30, 0x31	; 49
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <DIO_SetPinDirection+0x106>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <DIO_SetPinDirection+0x102>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	77 c0       	rjmp	.+238    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
				}

		}
		else if (input==direction){
    17d2:	8b 81       	ldd	r24, Y+3	; 0x03
    17d4:	88 23       	and	r24, r24
    17d6:	09 f0       	breq	.+2      	; 0x17da <DIO_SetPinDirection+0x118>
    17d8:	73 c0       	rjmp	.+230    	; 0x18c0 <DIO_SetPinDirection+0x1fe>

			switch(port_ID){
    17da:	89 81       	ldd	r24, Y+1	; 0x01
    17dc:	28 2f       	mov	r18, r24
    17de:	30 e0       	ldi	r19, 0x00	; 0
    17e0:	3d 83       	std	Y+5, r19	; 0x05
    17e2:	2c 83       	std	Y+4, r18	; 0x04
    17e4:	8c 81       	ldd	r24, Y+4	; 0x04
    17e6:	9d 81       	ldd	r25, Y+5	; 0x05
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	91 05       	cpc	r25, r1
    17ec:	59 f1       	breq	.+86     	; 0x1844 <DIO_SetPinDirection+0x182>
    17ee:	2c 81       	ldd	r18, Y+4	; 0x04
    17f0:	3d 81       	ldd	r19, Y+5	; 0x05
    17f2:	22 30       	cpi	r18, 0x02	; 2
    17f4:	31 05       	cpc	r19, r1
    17f6:	2c f4       	brge	.+10     	; 0x1802 <DIO_SetPinDirection+0x140>
    17f8:	8c 81       	ldd	r24, Y+4	; 0x04
    17fa:	9d 81       	ldd	r25, Y+5	; 0x05
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	69 f0       	breq	.+26     	; 0x181a <DIO_SetPinDirection+0x158>
    1800:	5f c0       	rjmp	.+190    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
    1802:	2c 81       	ldd	r18, Y+4	; 0x04
    1804:	3d 81       	ldd	r19, Y+5	; 0x05
    1806:	22 30       	cpi	r18, 0x02	; 2
    1808:	31 05       	cpc	r19, r1
    180a:	89 f1       	breq	.+98     	; 0x186e <DIO_SetPinDirection+0x1ac>
    180c:	8c 81       	ldd	r24, Y+4	; 0x04
    180e:	9d 81       	ldd	r25, Y+5	; 0x05
    1810:	83 30       	cpi	r24, 0x03	; 3
    1812:	91 05       	cpc	r25, r1
    1814:	09 f4       	brne	.+2      	; 0x1818 <DIO_SetPinDirection+0x156>
    1816:	40 c0       	rjmp	.+128    	; 0x1898 <DIO_SetPinDirection+0x1d6>
    1818:	53 c0       	rjmp	.+166    	; 0x18c0 <DIO_SetPinDirection+0x1fe>

			case portA: CLR_BIT(DDRA_REG,Pin); break;
    181a:	aa e3       	ldi	r26, 0x3A	; 58
    181c:	b0 e0       	ldi	r27, 0x00	; 0
    181e:	ea e3       	ldi	r30, 0x3A	; 58
    1820:	f0 e0       	ldi	r31, 0x00	; 0
    1822:	80 81       	ld	r24, Z
    1824:	48 2f       	mov	r20, r24
    1826:	8a 81       	ldd	r24, Y+2	; 0x02
    1828:	28 2f       	mov	r18, r24
    182a:	30 e0       	ldi	r19, 0x00	; 0
    182c:	81 e0       	ldi	r24, 0x01	; 1
    182e:	90 e0       	ldi	r25, 0x00	; 0
    1830:	02 2e       	mov	r0, r18
    1832:	02 c0       	rjmp	.+4      	; 0x1838 <DIO_SetPinDirection+0x176>
    1834:	88 0f       	add	r24, r24
    1836:	99 1f       	adc	r25, r25
    1838:	0a 94       	dec	r0
    183a:	e2 f7       	brpl	.-8      	; 0x1834 <DIO_SetPinDirection+0x172>
    183c:	80 95       	com	r24
    183e:	84 23       	and	r24, r20
    1840:	8c 93       	st	X, r24
    1842:	3e c0       	rjmp	.+124    	; 0x18c0 <DIO_SetPinDirection+0x1fe>
			case portB: CLR_BIT(DDRB_REG,Pin); break;
    1844:	a7 e3       	ldi	r26, 0x37	; 55
    1846:	b0 e0       	ldi	r27, 0x00	; 0
    1848:	e7 e3       	ldi	r30, 0x37	; 55
    184a:	f0 e0       	ldi	r31, 0x00	; 0
    184c:	80 81       	ld	r24, Z
    184e:	48 2f       	mov	r20, r24
    1850:	8a 81       	ldd	r24, Y+2	; 0x02
    1852:	28 2f       	mov	r18, r24
    1854:	30 e0       	ldi	r19, 0x00	; 0
    1856:	81 e0       	ldi	r24, 0x01	; 1
    1858:	90 e0       	ldi	r25, 0x00	; 0
    185a:	02 2e       	mov	r0, r18
    185c:	02 c0       	rjmp	.+4      	; 0x1862 <DIO_SetPinDirection+0x1a0>
    185e:	88 0f       	add	r24, r24
    1860:	99 1f       	adc	r25, r25
    1862:	0a 94       	dec	r0
    1864:	e2 f7       	brpl	.-8      	; 0x185e <DIO_SetPinDirection+0x19c>
    1866:	80 95       	com	r24
    1868:	84 23       	and	r24, r20
    186a:	8c 93       	st	X, r24
    186c:	29 c0       	rjmp	.+82     	; 0x18c0 <DIO_SetPinDirection+0x1fe>
			case portC: CLR_BIT(DDRC_REG,Pin); break;
    186e:	a4 e3       	ldi	r26, 0x34	; 52
    1870:	b0 e0       	ldi	r27, 0x00	; 0
    1872:	e4 e3       	ldi	r30, 0x34	; 52
    1874:	f0 e0       	ldi	r31, 0x00	; 0
    1876:	80 81       	ld	r24, Z
    1878:	48 2f       	mov	r20, r24
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	28 2f       	mov	r18, r24
    187e:	30 e0       	ldi	r19, 0x00	; 0
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	02 2e       	mov	r0, r18
    1886:	02 c0       	rjmp	.+4      	; 0x188c <DIO_SetPinDirection+0x1ca>
    1888:	88 0f       	add	r24, r24
    188a:	99 1f       	adc	r25, r25
    188c:	0a 94       	dec	r0
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <DIO_SetPinDirection+0x1c6>
    1890:	80 95       	com	r24
    1892:	84 23       	and	r24, r20
    1894:	8c 93       	st	X, r24
    1896:	14 c0       	rjmp	.+40     	; 0x18c0 <DIO_SetPinDirection+0x1fe>
			case portD: CLR_BIT(DDRD_REG,Pin); break;
    1898:	a1 e3       	ldi	r26, 0x31	; 49
    189a:	b0 e0       	ldi	r27, 0x00	; 0
    189c:	e1 e3       	ldi	r30, 0x31	; 49
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	80 81       	ld	r24, Z
    18a2:	48 2f       	mov	r20, r24
    18a4:	8a 81       	ldd	r24, Y+2	; 0x02
    18a6:	28 2f       	mov	r18, r24
    18a8:	30 e0       	ldi	r19, 0x00	; 0
    18aa:	81 e0       	ldi	r24, 0x01	; 1
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	02 2e       	mov	r0, r18
    18b0:	02 c0       	rjmp	.+4      	; 0x18b6 <DIO_SetPinDirection+0x1f4>
    18b2:	88 0f       	add	r24, r24
    18b4:	99 1f       	adc	r25, r25
    18b6:	0a 94       	dec	r0
    18b8:	e2 f7       	brpl	.-8      	; 0x18b2 <DIO_SetPinDirection+0x1f0>
    18ba:	80 95       	com	r24
    18bc:	84 23       	and	r24, r20
    18be:	8c 93       	st	X, r24
							}
    }
    }
    }
    18c0:	27 96       	adiw	r28, 0x07	; 7
    18c2:	0f b6       	in	r0, 0x3f	; 63
    18c4:	f8 94       	cli
    18c6:	de bf       	out	0x3e, r29	; 62
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	cd bf       	out	0x3d, r28	; 61
    18cc:	cf 91       	pop	r28
    18ce:	df 91       	pop	r29
    18d0:	08 95       	ret

000018d2 <DIO_SetPinValue>:
void DIO_SetPinValue(DIO_PORTID port_ID ,DIO_PINID Pin_ID,DIO_VALUE value)
{
    18d2:	df 93       	push	r29
    18d4:	cf 93       	push	r28
    18d6:	cd b7       	in	r28, 0x3d	; 61
    18d8:	de b7       	in	r29, 0x3e	; 62
    18da:	27 97       	sbiw	r28, 0x07	; 7
    18dc:	0f b6       	in	r0, 0x3f	; 63
    18de:	f8 94       	cli
    18e0:	de bf       	out	0x3e, r29	; 62
    18e2:	0f be       	out	0x3f, r0	; 63
    18e4:	cd bf       	out	0x3d, r28	; 61
    18e6:	89 83       	std	Y+1, r24	; 0x01
    18e8:	6a 83       	std	Y+2, r22	; 0x02
    18ea:	4b 83       	std	Y+3, r20	; 0x03
	if(port_ID<=portD && Pin_ID<=pin7) {
    18ec:	89 81       	ldd	r24, Y+1	; 0x01
    18ee:	84 30       	cpi	r24, 0x04	; 4
    18f0:	08 f0       	brcs	.+2      	; 0x18f4 <DIO_SetPinValue+0x22>
    18f2:	ee c0       	rjmp	.+476    	; 0x1ad0 <DIO_SetPinValue+0x1fe>
    18f4:	8a 81       	ldd	r24, Y+2	; 0x02
    18f6:	88 30       	cpi	r24, 0x08	; 8
    18f8:	08 f0       	brcs	.+2      	; 0x18fc <DIO_SetPinValue+0x2a>
    18fa:	ea c0       	rjmp	.+468    	; 0x1ad0 <DIO_SetPinValue+0x1fe>
			if(HIGH==value) {
    18fc:	8b 81       	ldd	r24, Y+3	; 0x03
    18fe:	81 30       	cpi	r24, 0x01	; 1
    1900:	09 f0       	breq	.+2      	; 0x1904 <DIO_SetPinValue+0x32>
    1902:	6f c0       	rjmp	.+222    	; 0x19e2 <DIO_SetPinValue+0x110>

			switch(port_ID){
    1904:	89 81       	ldd	r24, Y+1	; 0x01
    1906:	28 2f       	mov	r18, r24
    1908:	30 e0       	ldi	r19, 0x00	; 0
    190a:	3f 83       	std	Y+7, r19	; 0x07
    190c:	2e 83       	std	Y+6, r18	; 0x06
    190e:	8e 81       	ldd	r24, Y+6	; 0x06
    1910:	9f 81       	ldd	r25, Y+7	; 0x07
    1912:	81 30       	cpi	r24, 0x01	; 1
    1914:	91 05       	cpc	r25, r1
    1916:	49 f1       	breq	.+82     	; 0x196a <DIO_SetPinValue+0x98>
    1918:	2e 81       	ldd	r18, Y+6	; 0x06
    191a:	3f 81       	ldd	r19, Y+7	; 0x07
    191c:	22 30       	cpi	r18, 0x02	; 2
    191e:	31 05       	cpc	r19, r1
    1920:	2c f4       	brge	.+10     	; 0x192c <DIO_SetPinValue+0x5a>
    1922:	8e 81       	ldd	r24, Y+6	; 0x06
    1924:	9f 81       	ldd	r25, Y+7	; 0x07
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	61 f0       	breq	.+24     	; 0x1942 <DIO_SetPinValue+0x70>
    192a:	d2 c0       	rjmp	.+420    	; 0x1ad0 <DIO_SetPinValue+0x1fe>
    192c:	2e 81       	ldd	r18, Y+6	; 0x06
    192e:	3f 81       	ldd	r19, Y+7	; 0x07
    1930:	22 30       	cpi	r18, 0x02	; 2
    1932:	31 05       	cpc	r19, r1
    1934:	71 f1       	breq	.+92     	; 0x1992 <DIO_SetPinValue+0xc0>
    1936:	8e 81       	ldd	r24, Y+6	; 0x06
    1938:	9f 81       	ldd	r25, Y+7	; 0x07
    193a:	83 30       	cpi	r24, 0x03	; 3
    193c:	91 05       	cpc	r25, r1
    193e:	e9 f1       	breq	.+122    	; 0x19ba <DIO_SetPinValue+0xe8>
    1940:	c7 c0       	rjmp	.+398    	; 0x1ad0 <DIO_SetPinValue+0x1fe>

		 case portA: SET_BIT(PORTA_REG,Pin_ID); break;
    1942:	ab e3       	ldi	r26, 0x3B	; 59
    1944:	b0 e0       	ldi	r27, 0x00	; 0
    1946:	eb e3       	ldi	r30, 0x3B	; 59
    1948:	f0 e0       	ldi	r31, 0x00	; 0
    194a:	80 81       	ld	r24, Z
    194c:	48 2f       	mov	r20, r24
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	28 2f       	mov	r18, r24
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	02 2e       	mov	r0, r18
    195a:	02 c0       	rjmp	.+4      	; 0x1960 <DIO_SetPinValue+0x8e>
    195c:	88 0f       	add	r24, r24
    195e:	99 1f       	adc	r25, r25
    1960:	0a 94       	dec	r0
    1962:	e2 f7       	brpl	.-8      	; 0x195c <DIO_SetPinValue+0x8a>
    1964:	84 2b       	or	r24, r20
    1966:	8c 93       	st	X, r24
    1968:	b3 c0       	rjmp	.+358    	; 0x1ad0 <DIO_SetPinValue+0x1fe>
		 case portB: SET_BIT(PORTB_REG,Pin_ID); break;
    196a:	a8 e3       	ldi	r26, 0x38	; 56
    196c:	b0 e0       	ldi	r27, 0x00	; 0
    196e:	e8 e3       	ldi	r30, 0x38	; 56
    1970:	f0 e0       	ldi	r31, 0x00	; 0
    1972:	80 81       	ld	r24, Z
    1974:	48 2f       	mov	r20, r24
    1976:	8a 81       	ldd	r24, Y+2	; 0x02
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	81 e0       	ldi	r24, 0x01	; 1
    197e:	90 e0       	ldi	r25, 0x00	; 0
    1980:	02 2e       	mov	r0, r18
    1982:	02 c0       	rjmp	.+4      	; 0x1988 <DIO_SetPinValue+0xb6>
    1984:	88 0f       	add	r24, r24
    1986:	99 1f       	adc	r25, r25
    1988:	0a 94       	dec	r0
    198a:	e2 f7       	brpl	.-8      	; 0x1984 <DIO_SetPinValue+0xb2>
    198c:	84 2b       	or	r24, r20
    198e:	8c 93       	st	X, r24
    1990:	9f c0       	rjmp	.+318    	; 0x1ad0 <DIO_SetPinValue+0x1fe>
		 case portC: SET_BIT(PORTC_REG,Pin_ID); break;
    1992:	a5 e3       	ldi	r26, 0x35	; 53
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e5 e3       	ldi	r30, 0x35	; 53
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	80 81       	ld	r24, Z
    199c:	48 2f       	mov	r20, r24
    199e:	8a 81       	ldd	r24, Y+2	; 0x02
    19a0:	28 2f       	mov	r18, r24
    19a2:	30 e0       	ldi	r19, 0x00	; 0
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	02 2e       	mov	r0, r18
    19aa:	02 c0       	rjmp	.+4      	; 0x19b0 <DIO_SetPinValue+0xde>
    19ac:	88 0f       	add	r24, r24
    19ae:	99 1f       	adc	r25, r25
    19b0:	0a 94       	dec	r0
    19b2:	e2 f7       	brpl	.-8      	; 0x19ac <DIO_SetPinValue+0xda>
    19b4:	84 2b       	or	r24, r20
    19b6:	8c 93       	st	X, r24
    19b8:	8b c0       	rjmp	.+278    	; 0x1ad0 <DIO_SetPinValue+0x1fe>
		 case portD: SET_BIT(PORTD_REG,Pin_ID); break;
    19ba:	a2 e3       	ldi	r26, 0x32	; 50
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e2 e3       	ldi	r30, 0x32	; 50
    19c0:	f0 e0       	ldi	r31, 0x00	; 0
    19c2:	80 81       	ld	r24, Z
    19c4:	48 2f       	mov	r20, r24
    19c6:	8a 81       	ldd	r24, Y+2	; 0x02
    19c8:	28 2f       	mov	r18, r24
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	81 e0       	ldi	r24, 0x01	; 1
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 2e       	mov	r0, r18
    19d2:	02 c0       	rjmp	.+4      	; 0x19d8 <DIO_SetPinValue+0x106>
    19d4:	88 0f       	add	r24, r24
    19d6:	99 1f       	adc	r25, r25
    19d8:	0a 94       	dec	r0
    19da:	e2 f7       	brpl	.-8      	; 0x19d4 <DIO_SetPinValue+0x102>
    19dc:	84 2b       	or	r24, r20
    19de:	8c 93       	st	X, r24
    19e0:	77 c0       	rjmp	.+238    	; 0x1ad0 <DIO_SetPinValue+0x1fe>

	}
	}
			else if (LOW==value){
    19e2:	8b 81       	ldd	r24, Y+3	; 0x03
    19e4:	88 23       	and	r24, r24
    19e6:	09 f0       	breq	.+2      	; 0x19ea <DIO_SetPinValue+0x118>
    19e8:	73 c0       	rjmp	.+230    	; 0x1ad0 <DIO_SetPinValue+0x1fe>

				switch(port_ID){
    19ea:	89 81       	ldd	r24, Y+1	; 0x01
    19ec:	28 2f       	mov	r18, r24
    19ee:	30 e0       	ldi	r19, 0x00	; 0
    19f0:	3d 83       	std	Y+5, r19	; 0x05
    19f2:	2c 83       	std	Y+4, r18	; 0x04
    19f4:	8c 81       	ldd	r24, Y+4	; 0x04
    19f6:	9d 81       	ldd	r25, Y+5	; 0x05
    19f8:	81 30       	cpi	r24, 0x01	; 1
    19fa:	91 05       	cpc	r25, r1
    19fc:	59 f1       	breq	.+86     	; 0x1a54 <DIO_SetPinValue+0x182>
    19fe:	2c 81       	ldd	r18, Y+4	; 0x04
    1a00:	3d 81       	ldd	r19, Y+5	; 0x05
    1a02:	22 30       	cpi	r18, 0x02	; 2
    1a04:	31 05       	cpc	r19, r1
    1a06:	2c f4       	brge	.+10     	; 0x1a12 <DIO_SetPinValue+0x140>
    1a08:	8c 81       	ldd	r24, Y+4	; 0x04
    1a0a:	9d 81       	ldd	r25, Y+5	; 0x05
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	69 f0       	breq	.+26     	; 0x1a2a <DIO_SetPinValue+0x158>
    1a10:	5f c0       	rjmp	.+190    	; 0x1ad0 <DIO_SetPinValue+0x1fe>
    1a12:	2c 81       	ldd	r18, Y+4	; 0x04
    1a14:	3d 81       	ldd	r19, Y+5	; 0x05
    1a16:	22 30       	cpi	r18, 0x02	; 2
    1a18:	31 05       	cpc	r19, r1
    1a1a:	89 f1       	breq	.+98     	; 0x1a7e <DIO_SetPinValue+0x1ac>
    1a1c:	8c 81       	ldd	r24, Y+4	; 0x04
    1a1e:	9d 81       	ldd	r25, Y+5	; 0x05
    1a20:	83 30       	cpi	r24, 0x03	; 3
    1a22:	91 05       	cpc	r25, r1
    1a24:	09 f4       	brne	.+2      	; 0x1a28 <DIO_SetPinValue+0x156>
    1a26:	40 c0       	rjmp	.+128    	; 0x1aa8 <DIO_SetPinValue+0x1d6>
    1a28:	53 c0       	rjmp	.+166    	; 0x1ad0 <DIO_SetPinValue+0x1fe>

		 case portA: CLR_BIT(PORTA_REG,Pin_ID); break;
    1a2a:	ab e3       	ldi	r26, 0x3B	; 59
    1a2c:	b0 e0       	ldi	r27, 0x00	; 0
    1a2e:	eb e3       	ldi	r30, 0x3B	; 59
    1a30:	f0 e0       	ldi	r31, 0x00	; 0
    1a32:	80 81       	ld	r24, Z
    1a34:	48 2f       	mov	r20, r24
    1a36:	8a 81       	ldd	r24, Y+2	; 0x02
    1a38:	28 2f       	mov	r18, r24
    1a3a:	30 e0       	ldi	r19, 0x00	; 0
    1a3c:	81 e0       	ldi	r24, 0x01	; 1
    1a3e:	90 e0       	ldi	r25, 0x00	; 0
    1a40:	02 2e       	mov	r0, r18
    1a42:	02 c0       	rjmp	.+4      	; 0x1a48 <DIO_SetPinValue+0x176>
    1a44:	88 0f       	add	r24, r24
    1a46:	99 1f       	adc	r25, r25
    1a48:	0a 94       	dec	r0
    1a4a:	e2 f7       	brpl	.-8      	; 0x1a44 <DIO_SetPinValue+0x172>
    1a4c:	80 95       	com	r24
    1a4e:	84 23       	and	r24, r20
    1a50:	8c 93       	st	X, r24
    1a52:	3e c0       	rjmp	.+124    	; 0x1ad0 <DIO_SetPinValue+0x1fe>
		 case portB: CLR_BIT(PORTB_REG,Pin_ID); break;
    1a54:	a8 e3       	ldi	r26, 0x38	; 56
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e8 e3       	ldi	r30, 0x38	; 56
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	80 81       	ld	r24, Z
    1a5e:	48 2f       	mov	r20, r24
    1a60:	8a 81       	ldd	r24, Y+2	; 0x02
    1a62:	28 2f       	mov	r18, r24
    1a64:	30 e0       	ldi	r19, 0x00	; 0
    1a66:	81 e0       	ldi	r24, 0x01	; 1
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	02 2e       	mov	r0, r18
    1a6c:	02 c0       	rjmp	.+4      	; 0x1a72 <DIO_SetPinValue+0x1a0>
    1a6e:	88 0f       	add	r24, r24
    1a70:	99 1f       	adc	r25, r25
    1a72:	0a 94       	dec	r0
    1a74:	e2 f7       	brpl	.-8      	; 0x1a6e <DIO_SetPinValue+0x19c>
    1a76:	80 95       	com	r24
    1a78:	84 23       	and	r24, r20
    1a7a:	8c 93       	st	X, r24
    1a7c:	29 c0       	rjmp	.+82     	; 0x1ad0 <DIO_SetPinValue+0x1fe>
		 case portC: CLR_BIT(PORTC_REG,Pin_ID); break;
    1a7e:	a5 e3       	ldi	r26, 0x35	; 53
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e5 e3       	ldi	r30, 0x35	; 53
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	48 2f       	mov	r20, r24
    1a8a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a8c:	28 2f       	mov	r18, r24
    1a8e:	30 e0       	ldi	r19, 0x00	; 0
    1a90:	81 e0       	ldi	r24, 0x01	; 1
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	02 2e       	mov	r0, r18
    1a96:	02 c0       	rjmp	.+4      	; 0x1a9c <DIO_SetPinValue+0x1ca>
    1a98:	88 0f       	add	r24, r24
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	0a 94       	dec	r0
    1a9e:	e2 f7       	brpl	.-8      	; 0x1a98 <DIO_SetPinValue+0x1c6>
    1aa0:	80 95       	com	r24
    1aa2:	84 23       	and	r24, r20
    1aa4:	8c 93       	st	X, r24
    1aa6:	14 c0       	rjmp	.+40     	; 0x1ad0 <DIO_SetPinValue+0x1fe>
		 case portD: CLR_BIT(PORTD_REG,Pin_ID); break;
    1aa8:	a2 e3       	ldi	r26, 0x32	; 50
    1aaa:	b0 e0       	ldi	r27, 0x00	; 0
    1aac:	e2 e3       	ldi	r30, 0x32	; 50
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	80 81       	ld	r24, Z
    1ab2:	48 2f       	mov	r20, r24
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	81 e0       	ldi	r24, 0x01	; 1
    1abc:	90 e0       	ldi	r25, 0x00	; 0
    1abe:	02 2e       	mov	r0, r18
    1ac0:	02 c0       	rjmp	.+4      	; 0x1ac6 <DIO_SetPinValue+0x1f4>
    1ac2:	88 0f       	add	r24, r24
    1ac4:	99 1f       	adc	r25, r25
    1ac6:	0a 94       	dec	r0
    1ac8:	e2 f7       	brpl	.-8      	; 0x1ac2 <DIO_SetPinValue+0x1f0>
    1aca:	80 95       	com	r24
    1acc:	84 23       	and	r24, r20
    1ace:	8c 93       	st	X, r24

	}
	}
	}
    }
    1ad0:	27 96       	adiw	r28, 0x07	; 7
    1ad2:	0f b6       	in	r0, 0x3f	; 63
    1ad4:	f8 94       	cli
    1ad6:	de bf       	out	0x3e, r29	; 62
    1ad8:	0f be       	out	0x3f, r0	; 63
    1ada:	cd bf       	out	0x3d, r28	; 61
    1adc:	cf 91       	pop	r28
    1ade:	df 91       	pop	r29
    1ae0:	08 95       	ret

00001ae2 <DIO_GetPinvalue>:
DIO_VALUE DIO_GetPinvalue(DIO_PORTID port_ID ,DIO_PINID Pin_ID)
{
    1ae2:	df 93       	push	r29
    1ae4:	cf 93       	push	r28
    1ae6:	00 d0       	rcall	.+0      	; 0x1ae8 <DIO_GetPinvalue+0x6>
    1ae8:	00 d0       	rcall	.+0      	; 0x1aea <DIO_GetPinvalue+0x8>
    1aea:	0f 92       	push	r0
    1aec:	cd b7       	in	r28, 0x3d	; 61
    1aee:	de b7       	in	r29, 0x3e	; 62
    1af0:	8a 83       	std	Y+2, r24	; 0x02
    1af2:	6b 83       	std	Y+3, r22	; 0x03
	DIO_VALUE Pinvalue ;
	if(port_ID<=portD && Pin_ID<=pin7) {
    1af4:	8a 81       	ldd	r24, Y+2	; 0x02
    1af6:	84 30       	cpi	r24, 0x04	; 4
    1af8:	08 f0       	brcs	.+2      	; 0x1afc <DIO_GetPinvalue+0x1a>
    1afa:	6b c0       	rjmp	.+214    	; 0x1bd2 <DIO_GetPinvalue+0xf0>
    1afc:	8b 81       	ldd	r24, Y+3	; 0x03
    1afe:	88 30       	cpi	r24, 0x08	; 8
    1b00:	08 f0       	brcs	.+2      	; 0x1b04 <DIO_GetPinvalue+0x22>
    1b02:	67 c0       	rjmp	.+206    	; 0x1bd2 <DIO_GetPinvalue+0xf0>

				switch(port_ID){
    1b04:	8a 81       	ldd	r24, Y+2	; 0x02
    1b06:	28 2f       	mov	r18, r24
    1b08:	30 e0       	ldi	r19, 0x00	; 0
    1b0a:	3d 83       	std	Y+5, r19	; 0x05
    1b0c:	2c 83       	std	Y+4, r18	; 0x04
    1b0e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b10:	5d 81       	ldd	r21, Y+5	; 0x05
    1b12:	41 30       	cpi	r20, 0x01	; 1
    1b14:	51 05       	cpc	r21, r1
    1b16:	41 f1       	breq	.+80     	; 0x1b68 <DIO_GetPinvalue+0x86>
    1b18:	8c 81       	ldd	r24, Y+4	; 0x04
    1b1a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b1c:	82 30       	cpi	r24, 0x02	; 2
    1b1e:	91 05       	cpc	r25, r1
    1b20:	34 f4       	brge	.+12     	; 0x1b2e <DIO_GetPinvalue+0x4c>
    1b22:	2c 81       	ldd	r18, Y+4	; 0x04
    1b24:	3d 81       	ldd	r19, Y+5	; 0x05
    1b26:	21 15       	cp	r18, r1
    1b28:	31 05       	cpc	r19, r1
    1b2a:	61 f0       	breq	.+24     	; 0x1b44 <DIO_GetPinvalue+0x62>
    1b2c:	52 c0       	rjmp	.+164    	; 0x1bd2 <DIO_GetPinvalue+0xf0>
    1b2e:	4c 81       	ldd	r20, Y+4	; 0x04
    1b30:	5d 81       	ldd	r21, Y+5	; 0x05
    1b32:	42 30       	cpi	r20, 0x02	; 2
    1b34:	51 05       	cpc	r21, r1
    1b36:	51 f1       	breq	.+84     	; 0x1b8c <DIO_GetPinvalue+0xaa>
    1b38:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3c:	83 30       	cpi	r24, 0x03	; 3
    1b3e:	91 05       	cpc	r25, r1
    1b40:	b9 f1       	breq	.+110    	; 0x1bb0 <DIO_GetPinvalue+0xce>
    1b42:	47 c0       	rjmp	.+142    	; 0x1bd2 <DIO_GetPinvalue+0xf0>

			 case portA: Pinvalue=GET_BIT(PORTA_REG,Pin_ID); break;
    1b44:	eb e3       	ldi	r30, 0x3B	; 59
    1b46:	f0 e0       	ldi	r31, 0x00	; 0
    1b48:	80 81       	ld	r24, Z
    1b4a:	28 2f       	mov	r18, r24
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b50:	88 2f       	mov	r24, r24
    1b52:	90 e0       	ldi	r25, 0x00	; 0
    1b54:	a9 01       	movw	r20, r18
    1b56:	02 c0       	rjmp	.+4      	; 0x1b5c <DIO_GetPinvalue+0x7a>
    1b58:	55 95       	asr	r21
    1b5a:	47 95       	ror	r20
    1b5c:	8a 95       	dec	r24
    1b5e:	e2 f7       	brpl	.-8      	; 0x1b58 <DIO_GetPinvalue+0x76>
    1b60:	ca 01       	movw	r24, r20
    1b62:	81 70       	andi	r24, 0x01	; 1
    1b64:	89 83       	std	Y+1, r24	; 0x01
    1b66:	35 c0       	rjmp	.+106    	; 0x1bd2 <DIO_GetPinvalue+0xf0>
			 case portB: Pinvalue=GET_BIT(PORTB_REG,Pin_ID); break;
    1b68:	e8 e3       	ldi	r30, 0x38	; 56
    1b6a:	f0 e0       	ldi	r31, 0x00	; 0
    1b6c:	80 81       	ld	r24, Z
    1b6e:	28 2f       	mov	r18, r24
    1b70:	30 e0       	ldi	r19, 0x00	; 0
    1b72:	8b 81       	ldd	r24, Y+3	; 0x03
    1b74:	88 2f       	mov	r24, r24
    1b76:	90 e0       	ldi	r25, 0x00	; 0
    1b78:	a9 01       	movw	r20, r18
    1b7a:	02 c0       	rjmp	.+4      	; 0x1b80 <DIO_GetPinvalue+0x9e>
    1b7c:	55 95       	asr	r21
    1b7e:	47 95       	ror	r20
    1b80:	8a 95       	dec	r24
    1b82:	e2 f7       	brpl	.-8      	; 0x1b7c <DIO_GetPinvalue+0x9a>
    1b84:	ca 01       	movw	r24, r20
    1b86:	81 70       	andi	r24, 0x01	; 1
    1b88:	89 83       	std	Y+1, r24	; 0x01
    1b8a:	23 c0       	rjmp	.+70     	; 0x1bd2 <DIO_GetPinvalue+0xf0>
			 case portC:Pinvalue= GET_BIT(PORTC_REG,Pin_ID); break;
    1b8c:	e5 e3       	ldi	r30, 0x35	; 53
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	28 2f       	mov	r18, r24
    1b94:	30 e0       	ldi	r19, 0x00	; 0
    1b96:	8b 81       	ldd	r24, Y+3	; 0x03
    1b98:	88 2f       	mov	r24, r24
    1b9a:	90 e0       	ldi	r25, 0x00	; 0
    1b9c:	a9 01       	movw	r20, r18
    1b9e:	02 c0       	rjmp	.+4      	; 0x1ba4 <DIO_GetPinvalue+0xc2>
    1ba0:	55 95       	asr	r21
    1ba2:	47 95       	ror	r20
    1ba4:	8a 95       	dec	r24
    1ba6:	e2 f7       	brpl	.-8      	; 0x1ba0 <DIO_GetPinvalue+0xbe>
    1ba8:	ca 01       	movw	r24, r20
    1baa:	81 70       	andi	r24, 0x01	; 1
    1bac:	89 83       	std	Y+1, r24	; 0x01
    1bae:	11 c0       	rjmp	.+34     	; 0x1bd2 <DIO_GetPinvalue+0xf0>
			 case portD: Pinvalue=GET_BIT(PORTD_REG,Pin_ID); break;
    1bb0:	e2 e3       	ldi	r30, 0x32	; 50
    1bb2:	f0 e0       	ldi	r31, 0x00	; 0
    1bb4:	80 81       	ld	r24, Z
    1bb6:	28 2f       	mov	r18, r24
    1bb8:	30 e0       	ldi	r19, 0x00	; 0
    1bba:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbc:	88 2f       	mov	r24, r24
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	a9 01       	movw	r20, r18
    1bc2:	02 c0       	rjmp	.+4      	; 0x1bc8 <DIO_GetPinvalue+0xe6>
    1bc4:	55 95       	asr	r21
    1bc6:	47 95       	ror	r20
    1bc8:	8a 95       	dec	r24
    1bca:	e2 f7       	brpl	.-8      	; 0x1bc4 <DIO_GetPinvalue+0xe2>
    1bcc:	ca 01       	movw	r24, r20
    1bce:	81 70       	andi	r24, 0x01	; 1
    1bd0:	89 83       	std	Y+1, r24	; 0x01

	}
	}

	return Pinvalue;
    1bd2:	89 81       	ldd	r24, Y+1	; 0x01
    }
    1bd4:	0f 90       	pop	r0
    1bd6:	0f 90       	pop	r0
    1bd8:	0f 90       	pop	r0
    1bda:	0f 90       	pop	r0
    1bdc:	0f 90       	pop	r0
    1bde:	cf 91       	pop	r28
    1be0:	df 91       	pop	r29
    1be2:	08 95       	ret

00001be4 <LCD2>:
 *  Created on: Aug 2, 2023
 *      Author: abdel
 */
#include "../DIO/DIO.h"
#include <util/delay.h>
void LCD2(void){
    1be4:	df 93       	push	r29
    1be6:	cf 93       	push	r28
    1be8:	cd b7       	in	r28, 0x3d	; 61
    1bea:	de b7       	in	r29, 0x3e	; 62
    1bec:	ee 97       	sbiw	r28, 0x3e	; 62
    1bee:	0f b6       	in	r0, 0x3f	; 63
    1bf0:	f8 94       	cli
    1bf2:	de bf       	out	0x3e, r29	; 62
    1bf4:	0f be       	out	0x3f, r0	; 63
    1bf6:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPortDirection(portB,output);
    1bf8:	81 e0       	ldi	r24, 0x01	; 1
    1bfa:	61 e0       	ldi	r22, 0x01	; 1
    1bfc:	0e 94 a7 0a 	call	0x154e	; 0x154e <DIO_SetPortDirection>
	DIO_SetPinDirection(portA,pin7,output);
    1c00:	80 e0       	ldi	r24, 0x00	; 0
    1c02:	67 e0       	ldi	r22, 0x07	; 7
    1c04:	41 e0       	ldi	r20, 0x01	; 1
    1c06:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portA,pin6,output);
    1c0a:	80 e0       	ldi	r24, 0x00	; 0
    1c0c:	66 e0       	ldi	r22, 0x06	; 6
    1c0e:	41 e0       	ldi	r20, 0x01	; 1
    1c10:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portA,pin5,output);
    1c14:	80 e0       	ldi	r24, 0x00	; 0
    1c16:	65 e0       	ldi	r22, 0x05	; 5
    1c18:	41 e0       	ldi	r20, 0x01	; 1
    1c1a:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
    LCD_Initialize();
    1c1e:	0e 94 9b 05 	call	0xb36	; 0xb36 <LCD_Initialize>
    char coursname[]=" Computer";
    1c22:	ce 01       	movw	r24, r28
    1c24:	4d 96       	adiw	r24, 0x1d	; 29
    1c26:	9e ab       	std	Y+54, r25	; 0x36
    1c28:	8d ab       	std	Y+53, r24	; 0x35
    1c2a:	ee e6       	ldi	r30, 0x6E	; 110
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	f8 af       	std	Y+56, r31	; 0x38
    1c30:	ef ab       	std	Y+55, r30	; 0x37
    1c32:	fa e0       	ldi	r31, 0x0A	; 10
    1c34:	f9 af       	std	Y+57, r31	; 0x39
    1c36:	ef a9       	ldd	r30, Y+55	; 0x37
    1c38:	f8 ad       	ldd	r31, Y+56	; 0x38
    1c3a:	00 80       	ld	r0, Z
    1c3c:	8f a9       	ldd	r24, Y+55	; 0x37
    1c3e:	98 ad       	ldd	r25, Y+56	; 0x38
    1c40:	01 96       	adiw	r24, 0x01	; 1
    1c42:	98 af       	std	Y+56, r25	; 0x38
    1c44:	8f ab       	std	Y+55, r24	; 0x37
    1c46:	ed a9       	ldd	r30, Y+53	; 0x35
    1c48:	fe a9       	ldd	r31, Y+54	; 0x36
    1c4a:	00 82       	st	Z, r0
    1c4c:	8d a9       	ldd	r24, Y+53	; 0x35
    1c4e:	9e a9       	ldd	r25, Y+54	; 0x36
    1c50:	01 96       	adiw	r24, 0x01	; 1
    1c52:	9e ab       	std	Y+54, r25	; 0x36
    1c54:	8d ab       	std	Y+53, r24	; 0x35
    1c56:	99 ad       	ldd	r25, Y+57	; 0x39
    1c58:	91 50       	subi	r25, 0x01	; 1
    1c5a:	99 af       	std	Y+57, r25	; 0x39
    1c5c:	e9 ad       	ldd	r30, Y+57	; 0x39
    1c5e:	ee 23       	and	r30, r30
    1c60:	51 f7       	brne	.-44     	; 0x1c36 <LCD2+0x52>
    char coursname1[]=" Organization";
    1c62:	ce 01       	movw	r24, r28
    1c64:	87 96       	adiw	r24, 0x27	; 39
    1c66:	9b af       	std	Y+59, r25	; 0x3b
    1c68:	8a af       	std	Y+58, r24	; 0x3a
    1c6a:	e8 e7       	ldi	r30, 0x78	; 120
    1c6c:	f0 e0       	ldi	r31, 0x00	; 0
    1c6e:	fd af       	std	Y+61, r31	; 0x3d
    1c70:	ec af       	std	Y+60, r30	; 0x3c
    1c72:	fe e0       	ldi	r31, 0x0E	; 14
    1c74:	fe af       	std	Y+62, r31	; 0x3e
    1c76:	ec ad       	ldd	r30, Y+60	; 0x3c
    1c78:	fd ad       	ldd	r31, Y+61	; 0x3d
    1c7a:	00 80       	ld	r0, Z
    1c7c:	8c ad       	ldd	r24, Y+60	; 0x3c
    1c7e:	9d ad       	ldd	r25, Y+61	; 0x3d
    1c80:	01 96       	adiw	r24, 0x01	; 1
    1c82:	9d af       	std	Y+61, r25	; 0x3d
    1c84:	8c af       	std	Y+60, r24	; 0x3c
    1c86:	ea ad       	ldd	r30, Y+58	; 0x3a
    1c88:	fb ad       	ldd	r31, Y+59	; 0x3b
    1c8a:	00 82       	st	Z, r0
    1c8c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1c8e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1c90:	01 96       	adiw	r24, 0x01	; 1
    1c92:	9b af       	std	Y+59, r25	; 0x3b
    1c94:	8a af       	std	Y+58, r24	; 0x3a
    1c96:	9e ad       	ldd	r25, Y+62	; 0x3e
    1c98:	91 50       	subi	r25, 0x01	; 1
    1c9a:	9e af       	std	Y+62, r25	; 0x3e
    1c9c:	ee ad       	ldd	r30, Y+62	; 0x3e
    1c9e:	ee 23       	and	r30, r30
    1ca0:	51 f7       	brne	.-44     	; 0x1c76 <LCD2+0x92>
    LCD_SET_COURSER(0,3);
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	63 e0       	ldi	r22, 0x03	; 3
    1ca8:	70 e0       	ldi	r23, 0x00	; 0
    1caa:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_SET_COURSER>
    LCD_SENDSTR(coursname);
    1cae:	ce 01       	movw	r24, r28
    1cb0:	4d 96       	adiw	r24, 0x1d	; 29
    1cb2:	0e 94 4f 0a 	call	0x149e	; 0x149e <LCD_SENDSTR>
    LCD_SET_COURSER(1,1);
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	70 e0       	ldi	r23, 0x00	; 0
    1cbe:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <LCD_SET_COURSER>
    LCD_SENDSTR(coursname1);
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	87 96       	adiw	r24, 0x27	; 39
    1cc6:	0e 94 4f 0a 	call	0x149e	; 0x149e <LCD_SENDSTR>
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	aa e7       	ldi	r26, 0x7A	; 122
    1cd0:	b4 e4       	ldi	r27, 0x44	; 68
    1cd2:	89 8f       	std	Y+25, r24	; 0x19
    1cd4:	9a 8f       	std	Y+26, r25	; 0x1a
    1cd6:	ab 8f       	std	Y+27, r26	; 0x1b
    1cd8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1cda:	69 8d       	ldd	r22, Y+25	; 0x19
    1cdc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1cde:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ce0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ce2:	20 e0       	ldi	r18, 0x00	; 0
    1ce4:	30 e0       	ldi	r19, 0x00	; 0
    1ce6:	4a ef       	ldi	r20, 0xFA	; 250
    1ce8:	54 e4       	ldi	r21, 0x44	; 68
    1cea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1cee:	dc 01       	movw	r26, r24
    1cf0:	cb 01       	movw	r24, r22
    1cf2:	8d 8b       	std	Y+21, r24	; 0x15
    1cf4:	9e 8b       	std	Y+22, r25	; 0x16
    1cf6:	af 8b       	std	Y+23, r26	; 0x17
    1cf8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1cfa:	6d 89       	ldd	r22, Y+21	; 0x15
    1cfc:	7e 89       	ldd	r23, Y+22	; 0x16
    1cfe:	8f 89       	ldd	r24, Y+23	; 0x17
    1d00:	98 8d       	ldd	r25, Y+24	; 0x18
    1d02:	20 e0       	ldi	r18, 0x00	; 0
    1d04:	30 e0       	ldi	r19, 0x00	; 0
    1d06:	40 e8       	ldi	r20, 0x80	; 128
    1d08:	5f e3       	ldi	r21, 0x3F	; 63
    1d0a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1d0e:	88 23       	and	r24, r24
    1d10:	2c f4       	brge	.+10     	; 0x1d1c <LCD2+0x138>
		__ticks = 1;
    1d12:	81 e0       	ldi	r24, 0x01	; 1
    1d14:	90 e0       	ldi	r25, 0x00	; 0
    1d16:	9c 8b       	std	Y+20, r25	; 0x14
    1d18:	8b 8b       	std	Y+19, r24	; 0x13
    1d1a:	3f c0       	rjmp	.+126    	; 0x1d9a <LCD2+0x1b6>
	else if (__tmp > 65535)
    1d1c:	6d 89       	ldd	r22, Y+21	; 0x15
    1d1e:	7e 89       	ldd	r23, Y+22	; 0x16
    1d20:	8f 89       	ldd	r24, Y+23	; 0x17
    1d22:	98 8d       	ldd	r25, Y+24	; 0x18
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	3f ef       	ldi	r19, 0xFF	; 255
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	57 e4       	ldi	r21, 0x47	; 71
    1d2c:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	4c f5       	brge	.+82     	; 0x1d86 <LCD2+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d34:	69 8d       	ldd	r22, Y+25	; 0x19
    1d36:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1d38:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1d3a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1d3c:	20 e0       	ldi	r18, 0x00	; 0
    1d3e:	30 e0       	ldi	r19, 0x00	; 0
    1d40:	40 e2       	ldi	r20, 0x20	; 32
    1d42:	51 e4       	ldi	r21, 0x41	; 65
    1d44:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d48:	dc 01       	movw	r26, r24
    1d4a:	cb 01       	movw	r24, r22
    1d4c:	bc 01       	movw	r22, r24
    1d4e:	cd 01       	movw	r24, r26
    1d50:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9c 8b       	std	Y+20, r25	; 0x14
    1d5a:	8b 8b       	std	Y+19, r24	; 0x13
    1d5c:	0f c0       	rjmp	.+30     	; 0x1d7c <LCD2+0x198>
    1d5e:	88 ec       	ldi	r24, 0xC8	; 200
    1d60:	90 e0       	ldi	r25, 0x00	; 0
    1d62:	9a 8b       	std	Y+18, r25	; 0x12
    1d64:	89 8b       	std	Y+17, r24	; 0x11
    1d66:	89 89       	ldd	r24, Y+17	; 0x11
    1d68:	9a 89       	ldd	r25, Y+18	; 0x12
    1d6a:	01 97       	sbiw	r24, 0x01	; 1
    1d6c:	f1 f7       	brne	.-4      	; 0x1d6a <LCD2+0x186>
    1d6e:	9a 8b       	std	Y+18, r25	; 0x12
    1d70:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d72:	8b 89       	ldd	r24, Y+19	; 0x13
    1d74:	9c 89       	ldd	r25, Y+20	; 0x14
    1d76:	01 97       	sbiw	r24, 0x01	; 1
    1d78:	9c 8b       	std	Y+20, r25	; 0x14
    1d7a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d7c:	8b 89       	ldd	r24, Y+19	; 0x13
    1d7e:	9c 89       	ldd	r25, Y+20	; 0x14
    1d80:	00 97       	sbiw	r24, 0x00	; 0
    1d82:	69 f7       	brne	.-38     	; 0x1d5e <LCD2+0x17a>
    1d84:	14 c0       	rjmp	.+40     	; 0x1dae <LCD2+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d86:	6d 89       	ldd	r22, Y+21	; 0x15
    1d88:	7e 89       	ldd	r23, Y+22	; 0x16
    1d8a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d8c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d8e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d92:	dc 01       	movw	r26, r24
    1d94:	cb 01       	movw	r24, r22
    1d96:	9c 8b       	std	Y+20, r25	; 0x14
    1d98:	8b 8b       	std	Y+19, r24	; 0x13
    1d9a:	8b 89       	ldd	r24, Y+19	; 0x13
    1d9c:	9c 89       	ldd	r25, Y+20	; 0x14
    1d9e:	98 8b       	std	Y+16, r25	; 0x10
    1da0:	8f 87       	std	Y+15, r24	; 0x0f
    1da2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1da4:	98 89       	ldd	r25, Y+16	; 0x10
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD2+0x1c2>
    1daa:	98 8b       	std	Y+16, r25	; 0x10
    1dac:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(1000);
    LCD_SENDCOMMAND(0x01);
    1dae:	81 e0       	ldi	r24, 0x01	; 1
    1db0:	90 e0       	ldi	r25, 0x00	; 0
    1db2:	0e 94 0a 08 	call	0x1014	; 0x1014 <LCD_SENDCOMMAND>
    LCD_SENDSTR(" CODE:CEE224 ");
    1db6:	80 e6       	ldi	r24, 0x60	; 96
    1db8:	90 e0       	ldi	r25, 0x00	; 0
    1dba:	0e 94 4f 0a 	call	0x149e	; 0x149e <LCD_SENDSTR>
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	aa e7       	ldi	r26, 0x7A	; 122
    1dc4:	b4 e4       	ldi	r27, 0x44	; 68
    1dc6:	8b 87       	std	Y+11, r24	; 0x0b
    1dc8:	9c 87       	std	Y+12, r25	; 0x0c
    1dca:	ad 87       	std	Y+13, r26	; 0x0d
    1dcc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	6b 85       	ldd	r22, Y+11	; 0x0b
    1dd0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1dd2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1dd4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	4a ef       	ldi	r20, 0xFA	; 250
    1ddc:	54 e4       	ldi	r21, 0x44	; 68
    1dde:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1de2:	dc 01       	movw	r26, r24
    1de4:	cb 01       	movw	r24, r22
    1de6:	8f 83       	std	Y+7, r24	; 0x07
    1de8:	98 87       	std	Y+8, r25	; 0x08
    1dea:	a9 87       	std	Y+9, r26	; 0x09
    1dec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1dee:	6f 81       	ldd	r22, Y+7	; 0x07
    1df0:	78 85       	ldd	r23, Y+8	; 0x08
    1df2:	89 85       	ldd	r24, Y+9	; 0x09
    1df4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1df6:	20 e0       	ldi	r18, 0x00	; 0
    1df8:	30 e0       	ldi	r19, 0x00	; 0
    1dfa:	40 e8       	ldi	r20, 0x80	; 128
    1dfc:	5f e3       	ldi	r21, 0x3F	; 63
    1dfe:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1e02:	88 23       	and	r24, r24
    1e04:	2c f4       	brge	.+10     	; 0x1e10 <LCD2+0x22c>
		__ticks = 1;
    1e06:	81 e0       	ldi	r24, 0x01	; 1
    1e08:	90 e0       	ldi	r25, 0x00	; 0
    1e0a:	9e 83       	std	Y+6, r25	; 0x06
    1e0c:	8d 83       	std	Y+5, r24	; 0x05
    1e0e:	3f c0       	rjmp	.+126    	; 0x1e8e <LCD2+0x2aa>
	else if (__tmp > 65535)
    1e10:	6f 81       	ldd	r22, Y+7	; 0x07
    1e12:	78 85       	ldd	r23, Y+8	; 0x08
    1e14:	89 85       	ldd	r24, Y+9	; 0x09
    1e16:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e18:	20 e0       	ldi	r18, 0x00	; 0
    1e1a:	3f ef       	ldi	r19, 0xFF	; 255
    1e1c:	4f e7       	ldi	r20, 0x7F	; 127
    1e1e:	57 e4       	ldi	r21, 0x47	; 71
    1e20:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1e24:	18 16       	cp	r1, r24
    1e26:	4c f5       	brge	.+82     	; 0x1e7a <LCD2+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e28:	6b 85       	ldd	r22, Y+11	; 0x0b
    1e2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1e2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1e2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1e30:	20 e0       	ldi	r18, 0x00	; 0
    1e32:	30 e0       	ldi	r19, 0x00	; 0
    1e34:	40 e2       	ldi	r20, 0x20	; 32
    1e36:	51 e4       	ldi	r21, 0x41	; 65
    1e38:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	cb 01       	movw	r24, r22
    1e40:	bc 01       	movw	r22, r24
    1e42:	cd 01       	movw	r24, r26
    1e44:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e48:	dc 01       	movw	r26, r24
    1e4a:	cb 01       	movw	r24, r22
    1e4c:	9e 83       	std	Y+6, r25	; 0x06
    1e4e:	8d 83       	std	Y+5, r24	; 0x05
    1e50:	0f c0       	rjmp	.+30     	; 0x1e70 <LCD2+0x28c>
    1e52:	88 ec       	ldi	r24, 0xC8	; 200
    1e54:	90 e0       	ldi	r25, 0x00	; 0
    1e56:	9c 83       	std	Y+4, r25	; 0x04
    1e58:	8b 83       	std	Y+3, r24	; 0x03
    1e5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e5c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e5e:	01 97       	sbiw	r24, 0x01	; 1
    1e60:	f1 f7       	brne	.-4      	; 0x1e5e <LCD2+0x27a>
    1e62:	9c 83       	std	Y+4, r25	; 0x04
    1e64:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e66:	8d 81       	ldd	r24, Y+5	; 0x05
    1e68:	9e 81       	ldd	r25, Y+6	; 0x06
    1e6a:	01 97       	sbiw	r24, 0x01	; 1
    1e6c:	9e 83       	std	Y+6, r25	; 0x06
    1e6e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e70:	8d 81       	ldd	r24, Y+5	; 0x05
    1e72:	9e 81       	ldd	r25, Y+6	; 0x06
    1e74:	00 97       	sbiw	r24, 0x00	; 0
    1e76:	69 f7       	brne	.-38     	; 0x1e52 <LCD2+0x26e>
    1e78:	14 c0       	rjmp	.+40     	; 0x1ea2 <LCD2+0x2be>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e7a:	6f 81       	ldd	r22, Y+7	; 0x07
    1e7c:	78 85       	ldd	r23, Y+8	; 0x08
    1e7e:	89 85       	ldd	r24, Y+9	; 0x09
    1e80:	9a 85       	ldd	r25, Y+10	; 0x0a
    1e82:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e86:	dc 01       	movw	r26, r24
    1e88:	cb 01       	movw	r24, r22
    1e8a:	9e 83       	std	Y+6, r25	; 0x06
    1e8c:	8d 83       	std	Y+5, r24	; 0x05
    1e8e:	8d 81       	ldd	r24, Y+5	; 0x05
    1e90:	9e 81       	ldd	r25, Y+6	; 0x06
    1e92:	9a 83       	std	Y+2, r25	; 0x02
    1e94:	89 83       	std	Y+1, r24	; 0x01
    1e96:	89 81       	ldd	r24, Y+1	; 0x01
    1e98:	9a 81       	ldd	r25, Y+2	; 0x02
    1e9a:	01 97       	sbiw	r24, 0x01	; 1
    1e9c:	f1 f7       	brne	.-4      	; 0x1e9a <LCD2+0x2b6>
    1e9e:	9a 83       	std	Y+2, r25	; 0x02
    1ea0:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);

}
    1ea2:	ee 96       	adiw	r28, 0x3e	; 62
    1ea4:	0f b6       	in	r0, 0x3f	; 63
    1ea6:	f8 94       	cli
    1ea8:	de bf       	out	0x3e, r29	; 62
    1eaa:	0f be       	out	0x3f, r0	; 63
    1eac:	cd bf       	out	0x3d, r28	; 61
    1eae:	cf 91       	pop	r28
    1eb0:	df 91       	pop	r29
    1eb2:	08 95       	ret

00001eb4 <main>:
#include "LCD/def.h"
void ADC_Init();
unsigned char UART_Recieve(void);


int main (){
    1eb4:	df 93       	push	r29
    1eb6:	cf 93       	push	r28
    1eb8:	cd b7       	in	r28, 0x3d	; 61
    1eba:	de b7       	in	r29, 0x3e	; 62
    1ebc:	e8 97       	sbiw	r28, 0x38	; 56
    1ebe:	0f b6       	in	r0, 0x3f	; 63
    1ec0:	f8 94       	cli
    1ec2:	de bf       	out	0x3e, r29	; 62
    1ec4:	0f be       	out	0x3f, r0	; 63
    1ec6:	cd bf       	out	0x3d, r28	; 61

	DIO_SetPinDirection(portD,pin0,input);
    1ec8:	83 e0       	ldi	r24, 0x03	; 3
    1eca:	60 e0       	ldi	r22, 0x00	; 0
    1ecc:	40 e0       	ldi	r20, 0x00	; 0
    1ece:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portD,pin7,input);
    1ed2:	83 e0       	ldi	r24, 0x03	; 3
    1ed4:	67 e0       	ldi	r22, 0x07	; 7
    1ed6:	40 e0       	ldi	r20, 0x00	; 0
    1ed8:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portD,pin3,output);
    1edc:	83 e0       	ldi	r24, 0x03	; 3
    1ede:	63 e0       	ldi	r22, 0x03	; 3
    1ee0:	41 e0       	ldi	r20, 0x01	; 1
    1ee2:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portD,pin4,output);
    1ee6:	83 e0       	ldi	r24, 0x03	; 3
    1ee8:	64 e0       	ldi	r22, 0x04	; 4
    1eea:	41 e0       	ldi	r20, 0x01	; 1
    1eec:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portD,pin5,output);
    1ef0:	83 e0       	ldi	r24, 0x03	; 3
    1ef2:	65 e0       	ldi	r22, 0x05	; 5
    1ef4:	41 e0       	ldi	r20, 0x01	; 1
    1ef6:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portD,pin6,output);
    1efa:	83 e0       	ldi	r24, 0x03	; 3
    1efc:	66 e0       	ldi	r22, 0x06	; 6
    1efe:	41 e0       	ldi	r20, 0x01	; 1
    1f00:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portD,pin2,input);
    1f04:	83 e0       	ldi	r24, 0x03	; 3
    1f06:	62 e0       	ldi	r22, 0x02	; 2
    1f08:	40 e0       	ldi	r20, 0x00	; 0
    1f0a:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPortDirection(portC,output);
    1f0e:	82 e0       	ldi	r24, 0x02	; 2
    1f10:	61 e0       	ldi	r22, 0x01	; 1
    1f12:	0e 94 a7 0a 	call	0x154e	; 0x154e <DIO_SetPortDirection>
	DIO_SetPinDirection(portA,pin0,input);
    1f16:	80 e0       	ldi	r24, 0x00	; 0
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	40 e0       	ldi	r20, 0x00	; 0
    1f1c:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>
	DIO_SetPinDirection(portA,pin7,input);
    1f20:	80 e0       	ldi	r24, 0x00	; 0
    1f22:	67 e0       	ldi	r22, 0x07	; 7
    1f24:	40 e0       	ldi	r20, 0x00	; 0
    1f26:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <DIO_SetPinDirection>


//LCD2();
		ADC_Init();
    1f2a:	0e 94 23 12 	call	0x2446	; 0x2446 <ADC_Init>

while (1){

	             ADCSRA |= (1 << ADSC);	// Start Conversion
    1f2e:	a6 e2       	ldi	r26, 0x26	; 38
    1f30:	b0 e0       	ldi	r27, 0x00	; 0
    1f32:	e6 e2       	ldi	r30, 0x26	; 38
    1f34:	f0 e0       	ldi	r31, 0x00	; 0
    1f36:	80 81       	ld	r24, Z
    1f38:	80 64       	ori	r24, 0x40	; 64
    1f3a:	8c 93       	st	X, r24

				 while( (1<<ADIF)==1);		// check if data has been sent


		        if (ADCH >= 45)
    1f3c:	e5 e2       	ldi	r30, 0x25	; 37
    1f3e:	f0 e0       	ldi	r31, 0x00	; 0
    1f40:	80 81       	ld	r24, Z
    1f42:	8d 32       	cpi	r24, 0x2D	; 45
    1f44:	08 f4       	brcc	.+2      	; 0x1f48 <main+0x94>
    1f46:	f8 c0       	rjmp	.+496    	; 0x2138 <main+0x284>

		         {

		        	 DIO_SetPinValue(portC,pin0,1);
    1f48:	82 e0       	ldi	r24, 0x02	; 2
    1f4a:	60 e0       	ldi	r22, 0x00	; 0
    1f4c:	41 e0       	ldi	r20, 0x01	; 1
    1f4e:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		        	 DIO_SetPinValue(portC,pin1,1);
    1f52:	82 e0       	ldi	r24, 0x02	; 2
    1f54:	61 e0       	ldi	r22, 0x01	; 1
    1f56:	41 e0       	ldi	r20, 0x01	; 1
    1f58:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
    1f5e:	90 e0       	ldi	r25, 0x00	; 0
    1f60:	a0 e7       	ldi	r26, 0x70	; 112
    1f62:	b1 e4       	ldi	r27, 0x41	; 65
    1f64:	8d ab       	std	Y+53, r24	; 0x35
    1f66:	9e ab       	std	Y+54, r25	; 0x36
    1f68:	af ab       	std	Y+55, r26	; 0x37
    1f6a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6c:	6d a9       	ldd	r22, Y+53	; 0x35
    1f6e:	7e a9       	ldd	r23, Y+54	; 0x36
    1f70:	8f a9       	ldd	r24, Y+55	; 0x37
    1f72:	98 ad       	ldd	r25, Y+56	; 0x38
    1f74:	20 e0       	ldi	r18, 0x00	; 0
    1f76:	30 e0       	ldi	r19, 0x00	; 0
    1f78:	4a ef       	ldi	r20, 0xFA	; 250
    1f7a:	54 e4       	ldi	r21, 0x44	; 68
    1f7c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f80:	dc 01       	movw	r26, r24
    1f82:	cb 01       	movw	r24, r22
    1f84:	89 ab       	std	Y+49, r24	; 0x31
    1f86:	9a ab       	std	Y+50, r25	; 0x32
    1f88:	ab ab       	std	Y+51, r26	; 0x33
    1f8a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f8c:	69 a9       	ldd	r22, Y+49	; 0x31
    1f8e:	7a a9       	ldd	r23, Y+50	; 0x32
    1f90:	8b a9       	ldd	r24, Y+51	; 0x33
    1f92:	9c a9       	ldd	r25, Y+52	; 0x34
    1f94:	20 e0       	ldi	r18, 0x00	; 0
    1f96:	30 e0       	ldi	r19, 0x00	; 0
    1f98:	40 e8       	ldi	r20, 0x80	; 128
    1f9a:	5f e3       	ldi	r21, 0x3F	; 63
    1f9c:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    1fa0:	88 23       	and	r24, r24
    1fa2:	2c f4       	brge	.+10     	; 0x1fae <main+0xfa>
		__ticks = 1;
    1fa4:	81 e0       	ldi	r24, 0x01	; 1
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	98 ab       	std	Y+48, r25	; 0x30
    1faa:	8f a7       	std	Y+47, r24	; 0x2f
    1fac:	3f c0       	rjmp	.+126    	; 0x202c <main+0x178>
	else if (__tmp > 65535)
    1fae:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb0:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb2:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb4:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	3f ef       	ldi	r19, 0xFF	; 255
    1fba:	4f e7       	ldi	r20, 0x7F	; 127
    1fbc:	57 e4       	ldi	r21, 0x47	; 71
    1fbe:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    1fc2:	18 16       	cp	r1, r24
    1fc4:	4c f5       	brge	.+82     	; 0x2018 <main+0x164>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc6:	6d a9       	ldd	r22, Y+53	; 0x35
    1fc8:	7e a9       	ldd	r23, Y+54	; 0x36
    1fca:	8f a9       	ldd	r24, Y+55	; 0x37
    1fcc:	98 ad       	ldd	r25, Y+56	; 0x38
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e2       	ldi	r20, 0x20	; 32
    1fd4:	51 e4       	ldi	r21, 0x41	; 65
    1fd6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fda:	dc 01       	movw	r26, r24
    1fdc:	cb 01       	movw	r24, r22
    1fde:	bc 01       	movw	r22, r24
    1fe0:	cd 01       	movw	r24, r26
    1fe2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fe6:	dc 01       	movw	r26, r24
    1fe8:	cb 01       	movw	r24, r22
    1fea:	98 ab       	std	Y+48, r25	; 0x30
    1fec:	8f a7       	std	Y+47, r24	; 0x2f
    1fee:	0f c0       	rjmp	.+30     	; 0x200e <main+0x15a>
    1ff0:	88 ec       	ldi	r24, 0xC8	; 200
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	9e a7       	std	Y+46, r25	; 0x2e
    1ff6:	8d a7       	std	Y+45, r24	; 0x2d
    1ff8:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ffa:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ffc:	01 97       	sbiw	r24, 0x01	; 1
    1ffe:	f1 f7       	brne	.-4      	; 0x1ffc <main+0x148>
    2000:	9e a7       	std	Y+46, r25	; 0x2e
    2002:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2004:	8f a5       	ldd	r24, Y+47	; 0x2f
    2006:	98 a9       	ldd	r25, Y+48	; 0x30
    2008:	01 97       	sbiw	r24, 0x01	; 1
    200a:	98 ab       	std	Y+48, r25	; 0x30
    200c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    200e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2010:	98 a9       	ldd	r25, Y+48	; 0x30
    2012:	00 97       	sbiw	r24, 0x00	; 0
    2014:	69 f7       	brne	.-38     	; 0x1ff0 <main+0x13c>
    2016:	14 c0       	rjmp	.+40     	; 0x2040 <main+0x18c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2018:	69 a9       	ldd	r22, Y+49	; 0x31
    201a:	7a a9       	ldd	r23, Y+50	; 0x32
    201c:	8b a9       	ldd	r24, Y+51	; 0x33
    201e:	9c a9       	ldd	r25, Y+52	; 0x34
    2020:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2024:	dc 01       	movw	r26, r24
    2026:	cb 01       	movw	r24, r22
    2028:	98 ab       	std	Y+48, r25	; 0x30
    202a:	8f a7       	std	Y+47, r24	; 0x2f
    202c:	8f a5       	ldd	r24, Y+47	; 0x2f
    202e:	98 a9       	ldd	r25, Y+48	; 0x30
    2030:	9c a7       	std	Y+44, r25	; 0x2c
    2032:	8b a7       	std	Y+43, r24	; 0x2b
    2034:	8b a5       	ldd	r24, Y+43	; 0x2b
    2036:	9c a5       	ldd	r25, Y+44	; 0x2c
    2038:	01 97       	sbiw	r24, 0x01	; 1
    203a:	f1 f7       	brne	.-4      	; 0x2038 <main+0x184>
    203c:	9c a7       	std	Y+44, r25	; 0x2c
    203e:	8b a7       	std	Y+43, r24	; 0x2b
		     		_delay_ms(15);
		     		DIO_SetPinValue(portC,pin1,0);
    2040:	82 e0       	ldi	r24, 0x02	; 2
    2042:	61 e0       	ldi	r22, 0x01	; 1
    2044:	40 e0       	ldi	r20, 0x00	; 0
    2046:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
    204a:	80 e0       	ldi	r24, 0x00	; 0
    204c:	90 e0       	ldi	r25, 0x00	; 0
    204e:	a0 e7       	ldi	r26, 0x70	; 112
    2050:	b1 e4       	ldi	r27, 0x41	; 65
    2052:	8f a3       	std	Y+39, r24	; 0x27
    2054:	98 a7       	std	Y+40, r25	; 0x28
    2056:	a9 a7       	std	Y+41, r26	; 0x29
    2058:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    205a:	6f a1       	ldd	r22, Y+39	; 0x27
    205c:	78 a5       	ldd	r23, Y+40	; 0x28
    205e:	89 a5       	ldd	r24, Y+41	; 0x29
    2060:	9a a5       	ldd	r25, Y+42	; 0x2a
    2062:	20 e0       	ldi	r18, 0x00	; 0
    2064:	30 e0       	ldi	r19, 0x00	; 0
    2066:	4a ef       	ldi	r20, 0xFA	; 250
    2068:	54 e4       	ldi	r21, 0x44	; 68
    206a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    206e:	dc 01       	movw	r26, r24
    2070:	cb 01       	movw	r24, r22
    2072:	8b a3       	std	Y+35, r24	; 0x23
    2074:	9c a3       	std	Y+36, r25	; 0x24
    2076:	ad a3       	std	Y+37, r26	; 0x25
    2078:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    207a:	6b a1       	ldd	r22, Y+35	; 0x23
    207c:	7c a1       	ldd	r23, Y+36	; 0x24
    207e:	8d a1       	ldd	r24, Y+37	; 0x25
    2080:	9e a1       	ldd	r25, Y+38	; 0x26
    2082:	20 e0       	ldi	r18, 0x00	; 0
    2084:	30 e0       	ldi	r19, 0x00	; 0
    2086:	40 e8       	ldi	r20, 0x80	; 128
    2088:	5f e3       	ldi	r21, 0x3F	; 63
    208a:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    208e:	88 23       	and	r24, r24
    2090:	2c f4       	brge	.+10     	; 0x209c <main+0x1e8>
		__ticks = 1;
    2092:	81 e0       	ldi	r24, 0x01	; 1
    2094:	90 e0       	ldi	r25, 0x00	; 0
    2096:	9a a3       	std	Y+34, r25	; 0x22
    2098:	89 a3       	std	Y+33, r24	; 0x21
    209a:	3f c0       	rjmp	.+126    	; 0x211a <main+0x266>
	else if (__tmp > 65535)
    209c:	6b a1       	ldd	r22, Y+35	; 0x23
    209e:	7c a1       	ldd	r23, Y+36	; 0x24
    20a0:	8d a1       	ldd	r24, Y+37	; 0x25
    20a2:	9e a1       	ldd	r25, Y+38	; 0x26
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	3f ef       	ldi	r19, 0xFF	; 255
    20a8:	4f e7       	ldi	r20, 0x7F	; 127
    20aa:	57 e4       	ldi	r21, 0x47	; 71
    20ac:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    20b0:	18 16       	cp	r1, r24
    20b2:	4c f5       	brge	.+82     	; 0x2106 <main+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20b4:	6f a1       	ldd	r22, Y+39	; 0x27
    20b6:	78 a5       	ldd	r23, Y+40	; 0x28
    20b8:	89 a5       	ldd	r24, Y+41	; 0x29
    20ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e2       	ldi	r20, 0x20	; 32
    20c2:	51 e4       	ldi	r21, 0x41	; 65
    20c4:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20c8:	dc 01       	movw	r26, r24
    20ca:	cb 01       	movw	r24, r22
    20cc:	bc 01       	movw	r22, r24
    20ce:	cd 01       	movw	r24, r26
    20d0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20d4:	dc 01       	movw	r26, r24
    20d6:	cb 01       	movw	r24, r22
    20d8:	9a a3       	std	Y+34, r25	; 0x22
    20da:	89 a3       	std	Y+33, r24	; 0x21
    20dc:	0f c0       	rjmp	.+30     	; 0x20fc <main+0x248>
    20de:	88 ec       	ldi	r24, 0xC8	; 200
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	98 a3       	std	Y+32, r25	; 0x20
    20e4:	8f 8f       	std	Y+31, r24	; 0x1f
    20e6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    20e8:	98 a1       	ldd	r25, Y+32	; 0x20
    20ea:	01 97       	sbiw	r24, 0x01	; 1
    20ec:	f1 f7       	brne	.-4      	; 0x20ea <main+0x236>
    20ee:	98 a3       	std	Y+32, r25	; 0x20
    20f0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20f2:	89 a1       	ldd	r24, Y+33	; 0x21
    20f4:	9a a1       	ldd	r25, Y+34	; 0x22
    20f6:	01 97       	sbiw	r24, 0x01	; 1
    20f8:	9a a3       	std	Y+34, r25	; 0x22
    20fa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20fc:	89 a1       	ldd	r24, Y+33	; 0x21
    20fe:	9a a1       	ldd	r25, Y+34	; 0x22
    2100:	00 97       	sbiw	r24, 0x00	; 0
    2102:	69 f7       	brne	.-38     	; 0x20de <main+0x22a>
    2104:	14 c0       	rjmp	.+40     	; 0x212e <main+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2106:	6b a1       	ldd	r22, Y+35	; 0x23
    2108:	7c a1       	ldd	r23, Y+36	; 0x24
    210a:	8d a1       	ldd	r24, Y+37	; 0x25
    210c:	9e a1       	ldd	r25, Y+38	; 0x26
    210e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	9a a3       	std	Y+34, r25	; 0x22
    2118:	89 a3       	std	Y+33, r24	; 0x21
    211a:	89 a1       	ldd	r24, Y+33	; 0x21
    211c:	9a a1       	ldd	r25, Y+34	; 0x22
    211e:	9e 8f       	std	Y+30, r25	; 0x1e
    2120:	8d 8f       	std	Y+29, r24	; 0x1d
    2122:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2124:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2126:	01 97       	sbiw	r24, 0x01	; 1
    2128:	f1 f7       	brne	.-4      	; 0x2126 <main+0x272>
    212a:	9e 8f       	std	Y+30, r25	; 0x1e
    212c:	8d 8f       	std	Y+29, r24	; 0x1d
		     		_delay_ms(15);
		     		DIO_SetPinValue(portC,pin1,1);
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	61 e0       	ldi	r22, 0x01	; 1
    2132:	41 e0       	ldi	r20, 0x01	; 1
    2134:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>


		         }

	 if(PIND & (1<<PD7))
    2138:	e0 e3       	ldi	r30, 0x30	; 48
    213a:	f0 e0       	ldi	r31, 0x00	; 0
    213c:	80 81       	ld	r24, Z
    213e:	88 23       	and	r24, r24
    2140:	74 f5       	brge	.+92     	; 0x219e <main+0x2ea>
	 {
					PORTD |= (1<<PD3);
    2142:	a2 e3       	ldi	r26, 0x32	; 50
    2144:	b0 e0       	ldi	r27, 0x00	; 0
    2146:	e2 e3       	ldi	r30, 0x32	; 50
    2148:	f0 e0       	ldi	r31, 0x00	; 0
    214a:	80 81       	ld	r24, Z
    214c:	88 60       	ori	r24, 0x08	; 8
    214e:	8c 93       	st	X, r24
					PORTD |= (1<<PD5);
    2150:	a2 e3       	ldi	r26, 0x32	; 50
    2152:	b0 e0       	ldi	r27, 0x00	; 0
    2154:	e2 e3       	ldi	r30, 0x32	; 50
    2156:	f0 e0       	ldi	r31, 0x00	; 0
    2158:	80 81       	ld	r24, Z
    215a:	80 62       	ori	r24, 0x20	; 32
    215c:	8c 93       	st	X, r24
					PORTD |= (1<<PD6);
    215e:	a2 e3       	ldi	r26, 0x32	; 50
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e2 e3       	ldi	r30, 0x32	; 50
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	80 81       	ld	r24, Z
    2168:	80 64       	ori	r24, 0x40	; 64
    216a:	8c 93       	st	X, r24

					 if (ADCH>=25)
    216c:	e5 e2       	ldi	r30, 0x25	; 37
    216e:	f0 e0       	ldi	r31, 0x00	; 0
    2170:	80 81       	ld	r24, Z
    2172:	89 31       	cpi	r24, 0x19	; 25
    2174:	38 f0       	brcs	.+14     	; 0x2184 <main+0x2d0>
							{
							  PORTD|= (1<<PD4);
    2176:	a2 e3       	ldi	r26, 0x32	; 50
    2178:	b0 e0       	ldi	r27, 0x00	; 0
    217a:	e2 e3       	ldi	r30, 0x32	; 50
    217c:	f0 e0       	ldi	r31, 0x00	; 0
    217e:	80 81       	ld	r24, Z
    2180:	80 61       	ori	r24, 0x10	; 16
    2182:	8c 93       	st	X, r24

							}
					 if (ADCH<25){
    2184:	e5 e2       	ldi	r30, 0x25	; 37
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	80 81       	ld	r24, Z
    218a:	89 31       	cpi	r24, 0x19	; 25
    218c:	e8 f4       	brcc	.+58     	; 0x21c8 <main+0x314>
					 	    PORTD &= ~(1<<PD4);
    218e:	a2 e3       	ldi	r26, 0x32	; 50
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e2 e3       	ldi	r30, 0x32	; 50
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 81       	ld	r24, Z
    2198:	8f 7e       	andi	r24, 0xEF	; 239
    219a:	8c 93       	st	X, r24
    219c:	15 c0       	rjmp	.+42     	; 0x21c8 <main+0x314>
					 		         }


				}
		 else{
					PORTD &= ~(1<<PD3);
    219e:	a2 e3       	ldi	r26, 0x32	; 50
    21a0:	b0 e0       	ldi	r27, 0x00	; 0
    21a2:	e2 e3       	ldi	r30, 0x32	; 50
    21a4:	f0 e0       	ldi	r31, 0x00	; 0
    21a6:	80 81       	ld	r24, Z
    21a8:	87 7f       	andi	r24, 0xF7	; 247
    21aa:	8c 93       	st	X, r24
				    PORTD &= ~(1<<PD5);
    21ac:	a2 e3       	ldi	r26, 0x32	; 50
    21ae:	b0 e0       	ldi	r27, 0x00	; 0
    21b0:	e2 e3       	ldi	r30, 0x32	; 50
    21b2:	f0 e0       	ldi	r31, 0x00	; 0
    21b4:	80 81       	ld	r24, Z
    21b6:	8f 7d       	andi	r24, 0xDF	; 223
    21b8:	8c 93       	st	X, r24
				    PORTD &= ~(1<<PD6);
    21ba:	a2 e3       	ldi	r26, 0x32	; 50
    21bc:	b0 e0       	ldi	r27, 0x00	; 0
    21be:	e2 e3       	ldi	r30, 0x32	; 50
    21c0:	f0 e0       	ldi	r31, 0x00	; 0
    21c2:	80 81       	ld	r24, Z
    21c4:	8f 7b       	andi	r24, 0xBF	; 191
    21c6:	8c 93       	st	X, r24
		 }




	if (PIND & (1<<PD2))
    21c8:	e0 e3       	ldi	r30, 0x30	; 48
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	80 81       	ld	r24, Z
    21ce:	88 2f       	mov	r24, r24
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	84 70       	andi	r24, 0x04	; 4
    21d4:	90 70       	andi	r25, 0x00	; 0
    21d6:	00 97       	sbiw	r24, 0x00	; 0
    21d8:	59 f0       	breq	.+22     	; 0x21f0 <main+0x33c>
	{

		DIO_SetPinValue(portC,pin0,0);
    21da:	82 e0       	ldi	r24, 0x02	; 2
    21dc:	60 e0       	ldi	r22, 0x00	; 0
    21de:	40 e0       	ldi	r20, 0x00	; 0
    21e0:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		DIO_SetPinValue(portC,pin1,0);
    21e4:	82 e0       	ldi	r24, 0x02	; 2
    21e6:	61 e0       	ldi	r22, 0x01	; 1
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
    21ee:	f8 c0       	rjmp	.+496    	; 0x23e0 <main+0x52c>

	}
	else
	{

		DIO_SetPinValue(portC,pin0,1);
    21f0:	82 e0       	ldi	r24, 0x02	; 2
    21f2:	60 e0       	ldi	r22, 0x00	; 0
    21f4:	41 e0       	ldi	r20, 0x01	; 1
    21f6:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		DIO_SetPinValue(portC,pin1,1);
    21fa:	82 e0       	ldi	r24, 0x02	; 2
    21fc:	61 e0       	ldi	r22, 0x01	; 1
    21fe:	41 e0       	ldi	r20, 0x01	; 1
    2200:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
    2204:	80 e0       	ldi	r24, 0x00	; 0
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	a0 e7       	ldi	r26, 0x70	; 112
    220a:	b1 e4       	ldi	r27, 0x41	; 65
    220c:	89 8f       	std	Y+25, r24	; 0x19
    220e:	9a 8f       	std	Y+26, r25	; 0x1a
    2210:	ab 8f       	std	Y+27, r26	; 0x1b
    2212:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2214:	69 8d       	ldd	r22, Y+25	; 0x19
    2216:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2218:	8b 8d       	ldd	r24, Y+27	; 0x1b
    221a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    221c:	20 e0       	ldi	r18, 0x00	; 0
    221e:	30 e0       	ldi	r19, 0x00	; 0
    2220:	4a ef       	ldi	r20, 0xFA	; 250
    2222:	54 e4       	ldi	r21, 0x44	; 68
    2224:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2228:	dc 01       	movw	r26, r24
    222a:	cb 01       	movw	r24, r22
    222c:	8d 8b       	std	Y+21, r24	; 0x15
    222e:	9e 8b       	std	Y+22, r25	; 0x16
    2230:	af 8b       	std	Y+23, r26	; 0x17
    2232:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2234:	6d 89       	ldd	r22, Y+21	; 0x15
    2236:	7e 89       	ldd	r23, Y+22	; 0x16
    2238:	8f 89       	ldd	r24, Y+23	; 0x17
    223a:	98 8d       	ldd	r25, Y+24	; 0x18
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	2c f4       	brge	.+10     	; 0x2256 <main+0x3a2>
		__ticks = 1;
    224c:	81 e0       	ldi	r24, 0x01	; 1
    224e:	90 e0       	ldi	r25, 0x00	; 0
    2250:	9c 8b       	std	Y+20, r25	; 0x14
    2252:	8b 8b       	std	Y+19, r24	; 0x13
    2254:	3f c0       	rjmp	.+126    	; 0x22d4 <main+0x420>
	else if (__tmp > 65535)
    2256:	6d 89       	ldd	r22, Y+21	; 0x15
    2258:	7e 89       	ldd	r23, Y+22	; 0x16
    225a:	8f 89       	ldd	r24, Y+23	; 0x17
    225c:	98 8d       	ldd	r25, Y+24	; 0x18
    225e:	20 e0       	ldi	r18, 0x00	; 0
    2260:	3f ef       	ldi	r19, 0xFF	; 255
    2262:	4f e7       	ldi	r20, 0x7F	; 127
    2264:	57 e4       	ldi	r21, 0x47	; 71
    2266:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    226a:	18 16       	cp	r1, r24
    226c:	4c f5       	brge	.+82     	; 0x22c0 <main+0x40c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    226e:	69 8d       	ldd	r22, Y+25	; 0x19
    2270:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2272:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2274:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2276:	20 e0       	ldi	r18, 0x00	; 0
    2278:	30 e0       	ldi	r19, 0x00	; 0
    227a:	40 e2       	ldi	r20, 0x20	; 32
    227c:	51 e4       	ldi	r21, 0x41	; 65
    227e:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2282:	dc 01       	movw	r26, r24
    2284:	cb 01       	movw	r24, r22
    2286:	bc 01       	movw	r22, r24
    2288:	cd 01       	movw	r24, r26
    228a:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    228e:	dc 01       	movw	r26, r24
    2290:	cb 01       	movw	r24, r22
    2292:	9c 8b       	std	Y+20, r25	; 0x14
    2294:	8b 8b       	std	Y+19, r24	; 0x13
    2296:	0f c0       	rjmp	.+30     	; 0x22b6 <main+0x402>
    2298:	88 ec       	ldi	r24, 0xC8	; 200
    229a:	90 e0       	ldi	r25, 0x00	; 0
    229c:	9a 8b       	std	Y+18, r25	; 0x12
    229e:	89 8b       	std	Y+17, r24	; 0x11
    22a0:	89 89       	ldd	r24, Y+17	; 0x11
    22a2:	9a 89       	ldd	r25, Y+18	; 0x12
    22a4:	01 97       	sbiw	r24, 0x01	; 1
    22a6:	f1 f7       	brne	.-4      	; 0x22a4 <main+0x3f0>
    22a8:	9a 8b       	std	Y+18, r25	; 0x12
    22aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22ac:	8b 89       	ldd	r24, Y+19	; 0x13
    22ae:	9c 89       	ldd	r25, Y+20	; 0x14
    22b0:	01 97       	sbiw	r24, 0x01	; 1
    22b2:	9c 8b       	std	Y+20, r25	; 0x14
    22b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22b6:	8b 89       	ldd	r24, Y+19	; 0x13
    22b8:	9c 89       	ldd	r25, Y+20	; 0x14
    22ba:	00 97       	sbiw	r24, 0x00	; 0
    22bc:	69 f7       	brne	.-38     	; 0x2298 <main+0x3e4>
    22be:	14 c0       	rjmp	.+40     	; 0x22e8 <main+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22c0:	6d 89       	ldd	r22, Y+21	; 0x15
    22c2:	7e 89       	ldd	r23, Y+22	; 0x16
    22c4:	8f 89       	ldd	r24, Y+23	; 0x17
    22c6:	98 8d       	ldd	r25, Y+24	; 0x18
    22c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    22cc:	dc 01       	movw	r26, r24
    22ce:	cb 01       	movw	r24, r22
    22d0:	9c 8b       	std	Y+20, r25	; 0x14
    22d2:	8b 8b       	std	Y+19, r24	; 0x13
    22d4:	8b 89       	ldd	r24, Y+19	; 0x13
    22d6:	9c 89       	ldd	r25, Y+20	; 0x14
    22d8:	98 8b       	std	Y+16, r25	; 0x10
    22da:	8f 87       	std	Y+15, r24	; 0x0f
    22dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    22de:	98 89       	ldd	r25, Y+16	; 0x10
    22e0:	01 97       	sbiw	r24, 0x01	; 1
    22e2:	f1 f7       	brne	.-4      	; 0x22e0 <main+0x42c>
    22e4:	98 8b       	std	Y+16, r25	; 0x10
    22e6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(15);
		DIO_SetPinValue(portC,pin1,0);
    22e8:	82 e0       	ldi	r24, 0x02	; 2
    22ea:	61 e0       	ldi	r22, 0x01	; 1
    22ec:	40 e0       	ldi	r20, 0x00	; 0
    22ee:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 e7       	ldi	r26, 0x70	; 112
    22f8:	b1 e4       	ldi	r27, 0x41	; 65
    22fa:	8b 87       	std	Y+11, r24	; 0x0b
    22fc:	9c 87       	std	Y+12, r25	; 0x0c
    22fe:	ad 87       	std	Y+13, r26	; 0x0d
    2300:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	6b 85       	ldd	r22, Y+11	; 0x0b
    2304:	7c 85       	ldd	r23, Y+12	; 0x0c
    2306:	8d 85       	ldd	r24, Y+13	; 0x0d
    2308:	9e 85       	ldd	r25, Y+14	; 0x0e
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a ef       	ldi	r20, 0xFA	; 250
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	8f 83       	std	Y+7, r24	; 0x07
    231c:	98 87       	std	Y+8, r25	; 0x08
    231e:	a9 87       	std	Y+9, r26	; 0x09
    2320:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2322:	6f 81       	ldd	r22, Y+7	; 0x07
    2324:	78 85       	ldd	r23, Y+8	; 0x08
    2326:	89 85       	ldd	r24, Y+9	; 0x09
    2328:	9a 85       	ldd	r25, Y+10	; 0x0a
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 71 03 	call	0x6e2	; 0x6e2 <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <main+0x490>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9e 83       	std	Y+6, r25	; 0x06
    2340:	8d 83       	std	Y+5, r24	; 0x05
    2342:	3f c0       	rjmp	.+126    	; 0x23c2 <main+0x50e>
	else if (__tmp > 65535)
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 11 03 	call	0x622	; 0x622 <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	4c f5       	brge	.+82     	; 0x23ae <main+0x4fa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	6b 85       	ldd	r22, Y+11	; 0x0b
    235e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2360:	8d 85       	ldd	r24, Y+13	; 0x0d
    2362:	9e 85       	ldd	r25, Y+14	; 0x0e
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e2       	ldi	r20, 0x20	; 32
    236a:	51 e4       	ldi	r21, 0x41	; 65
    236c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9e 83       	std	Y+6, r25	; 0x06
    2382:	8d 83       	std	Y+5, r24	; 0x05
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <main+0x4f0>
    2386:	88 ec       	ldi	r24, 0xC8	; 200
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9c 83       	std	Y+4, r25	; 0x04
    238c:	8b 83       	std	Y+3, r24	; 0x03
    238e:	8b 81       	ldd	r24, Y+3	; 0x03
    2390:	9c 81       	ldd	r25, Y+4	; 0x04
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <main+0x4de>
    2396:	9c 83       	std	Y+4, r25	; 0x04
    2398:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	8d 81       	ldd	r24, Y+5	; 0x05
    239c:	9e 81       	ldd	r25, Y+6	; 0x06
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9e 83       	std	Y+6, r25	; 0x06
    23a2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	8d 81       	ldd	r24, Y+5	; 0x05
    23a6:	9e 81       	ldd	r25, Y+6	; 0x06
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	69 f7       	brne	.-38     	; 0x2386 <main+0x4d2>
    23ac:	14 c0       	rjmp	.+40     	; 0x23d6 <main+0x522>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	6f 81       	ldd	r22, Y+7	; 0x07
    23b0:	78 85       	ldd	r23, Y+8	; 0x08
    23b2:	89 85       	ldd	r24, Y+9	; 0x09
    23b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    23b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	8d 81       	ldd	r24, Y+5	; 0x05
    23c4:	9e 81       	ldd	r25, Y+6	; 0x06
    23c6:	9a 83       	std	Y+2, r25	; 0x02
    23c8:	89 83       	std	Y+1, r24	; 0x01
    23ca:	89 81       	ldd	r24, Y+1	; 0x01
    23cc:	9a 81       	ldd	r25, Y+2	; 0x02
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <main+0x51a>
    23d2:	9a 83       	std	Y+2, r25	; 0x02
    23d4:	89 83       	std	Y+1, r24	; 0x01
       	_delay_ms(15);
       	DIO_SetPinValue(portC,pin1,1);
    23d6:	82 e0       	ldi	r24, 0x02	; 2
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	41 e0       	ldi	r20, 0x01	; 1
    23dc:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>

	}

	if (PIND & (1<<PD0)){
    23e0:	e0 e3       	ldi	r30, 0x30	; 48
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	88 2f       	mov	r24, r24
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	81 70       	andi	r24, 0x01	; 1
    23ec:	90 70       	andi	r25, 0x00	; 0
    23ee:	88 23       	and	r24, r24
    23f0:	a9 f0       	breq	.+42     	; 0x241c <main+0x568>

		DIO_SetPinValue(portC,pin3,0);
    23f2:	82 e0       	ldi	r24, 0x02	; 2
    23f4:	63 e0       	ldi	r22, 0x03	; 3
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		DIO_SetPinValue(portC,pin4,0);
    23fc:	82 e0       	ldi	r24, 0x02	; 2
    23fe:	64 e0       	ldi	r22, 0x04	; 4
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		DIO_SetPinValue(portC,pin5,0);
    2406:	82 e0       	ldi	r24, 0x02	; 2
    2408:	65 e0       	ldi	r22, 0x05	; 5
    240a:	40 e0       	ldi	r20, 0x00	; 0
    240c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		DIO_SetPinValue(portC,pin6,0);
    2410:	82 e0       	ldi	r24, 0x02	; 2
    2412:	66 e0       	ldi	r22, 0x06	; 6
    2414:	40 e0       	ldi	r20, 0x00	; 0
    2416:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
    241a:	89 cd       	rjmp	.-1262   	; 0x1f2e <main+0x7a>

	}
	else {
		DIO_SetPinValue(portC,pin3,1);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	63 e0       	ldi	r22, 0x03	; 3
    2420:	41 e0       	ldi	r20, 0x01	; 1
    2422:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		DIO_SetPinValue(portC,pin4,1);
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	64 e0       	ldi	r22, 0x04	; 4
    242a:	41 e0       	ldi	r20, 0x01	; 1
    242c:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		DIO_SetPinValue(portC,pin5,1);
    2430:	82 e0       	ldi	r24, 0x02	; 2
    2432:	65 e0       	ldi	r22, 0x05	; 5
    2434:	41 e0       	ldi	r20, 0x01	; 1
    2436:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
		DIO_SetPinValue(portC,pin6,1);
    243a:	82 e0       	ldi	r24, 0x02	; 2
    243c:	66 e0       	ldi	r22, 0x06	; 6
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	0e 94 69 0c 	call	0x18d2	; 0x18d2 <DIO_SetPinValue>
    2444:	74 cd       	rjmp	.-1304   	; 0x1f2e <main+0x7a>

00002446 <ADC_Init>:




void ADC_Init()
{
    2446:	df 93       	push	r29
    2448:	cf 93       	push	r28
    244a:	cd b7       	in	r28, 0x3d	; 61
    244c:	de b7       	in	r29, 0x3e	; 62
	ADMUX |=(1<<REFS0)|(1<<REFS1);   // Refernce Voltage is 2.5
    244e:	a7 e2       	ldi	r26, 0x27	; 39
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	e7 e2       	ldi	r30, 0x27	; 39
    2454:	f0 e0       	ldi	r31, 0x00	; 0
    2456:	80 81       	ld	r24, Z
    2458:	80 6c       	ori	r24, 0xC0	; 192
    245a:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADEN);			// Enable ADC
    245c:	a6 e2       	ldi	r26, 0x26	; 38
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	e6 e2       	ldi	r30, 0x26	; 38
    2462:	f0 e0       	ldi	r31, 0x00	; 0
    2464:	80 81       	ld	r24, Z
    2466:	80 68       	ori	r24, 0x80	; 128
    2468:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADPS0) | (1 << ADPS1) | (1<<ADPS2);	// 128 Divition
    246a:	a6 e2       	ldi	r26, 0x26	; 38
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	e6 e2       	ldi	r30, 0x26	; 38
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	87 60       	ori	r24, 0x07	; 7
    2476:	8c 93       	st	X, r24
	ADMUX |= (1 << ADLAR);			//Adjust ADC Results
    2478:	a7 e2       	ldi	r26, 0x27	; 39
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e7 e2       	ldi	r30, 0x27	; 39
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	80 62       	ori	r24, 0x20	; 32
    2484:	8c 93       	st	X, r24

}
    2486:	cf 91       	pop	r28
    2488:	df 91       	pop	r29
    248a:	08 95       	ret

0000248c <UART_sendchar>:


void UART_sendchar(char data){
    248c:	df 93       	push	r29
    248e:	cf 93       	push	r28
    2490:	0f 92       	push	r0
    2492:	cd b7       	in	r28, 0x3d	; 61
    2494:	de b7       	in	r29, 0x3e	; 62
    2496:	89 83       	std	Y+1, r24	; 0x01
	while(!(UCSRA & (1<<UDRE)));
    2498:	eb e2       	ldi	r30, 0x2B	; 43
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	80 72       	andi	r24, 0x20	; 32
    24a4:	90 70       	andi	r25, 0x00	; 0
    24a6:	00 97       	sbiw	r24, 0x00	; 0
    24a8:	b9 f3       	breq	.-18     	; 0x2498 <UART_sendchar+0xc>
	UDR=data;
    24aa:	ec e2       	ldi	r30, 0x2C	; 44
    24ac:	f0 e0       	ldi	r31, 0x00	; 0
    24ae:	89 81       	ldd	r24, Y+1	; 0x01
    24b0:	80 83       	st	Z, r24



}
    24b2:	0f 90       	pop	r0
    24b4:	cf 91       	pop	r28
    24b6:	df 91       	pop	r29
    24b8:	08 95       	ret

000024ba <UART_GETChar>:
unsigned char UART_GETChar(void){
    24ba:	df 93       	push	r29
    24bc:	cf 93       	push	r28
    24be:	00 d0       	rcall	.+0      	; 0x24c0 <UART_GETChar+0x6>
    24c0:	cd b7       	in	r28, 0x3d	; 61
    24c2:	de b7       	in	r29, 0x3e	; 62
	unsigned char Result;
	while((UCSRA&0x80)==0x00);
    24c4:	eb e2       	ldi	r30, 0x2B	; 43
    24c6:	f0 e0       	ldi	r31, 0x00	; 0
    24c8:	80 81       	ld	r24, Z
    24ca:	88 23       	and	r24, r24
    24cc:	dc f7       	brge	.-10     	; 0x24c4 <UART_GETChar+0xa>
	Result=UDR;
    24ce:	ec e2       	ldi	r30, 0x2C	; 44
    24d0:	f0 e0       	ldi	r31, 0x00	; 0
    24d2:	80 81       	ld	r24, Z
    24d4:	89 83       	std	Y+1, r24	; 0x01


}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <UART_sendstring>:
void UART_sendstring(char *ptr){
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	00 d0       	rcall	.+0      	; 0x24e6 <UART_sendstring+0x6>
    24e6:	00 d0       	rcall	.+0      	; 0x24e8 <UART_sendstring+0x8>
    24e8:	cd b7       	in	r28, 0x3d	; 61
    24ea:	de b7       	in	r29, 0x3e	; 62
    24ec:	9c 83       	std	Y+4, r25	; 0x04
    24ee:	8b 83       	std	Y+3, r24	; 0x03
	int counter=0;
    24f0:	1a 82       	std	Y+2, r1	; 0x02
    24f2:	19 82       	std	Y+1, r1	; 0x01
	while(1){
		if(ptr[counter]=='\0'){
    24f4:	29 81       	ldd	r18, Y+1	; 0x01
    24f6:	3a 81       	ldd	r19, Y+2	; 0x02
    24f8:	8b 81       	ldd	r24, Y+3	; 0x03
    24fa:	9c 81       	ldd	r25, Y+4	; 0x04
    24fc:	fc 01       	movw	r30, r24
    24fe:	e2 0f       	add	r30, r18
    2500:	f3 1f       	adc	r31, r19
    2502:	80 81       	ld	r24, Z
    2504:	88 23       	and	r24, r24
    2506:	81 f0       	breq	.+32     	; 0x2528 <UART_sendstring+0x48>
			break;
		}
		UART_sendchar(ptr[counter]);
    2508:	29 81       	ldd	r18, Y+1	; 0x01
    250a:	3a 81       	ldd	r19, Y+2	; 0x02
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	9c 81       	ldd	r25, Y+4	; 0x04
    2510:	fc 01       	movw	r30, r24
    2512:	e2 0f       	add	r30, r18
    2514:	f3 1f       	adc	r31, r19
    2516:	80 81       	ld	r24, Z
    2518:	0e 94 46 12 	call	0x248c	; 0x248c <UART_sendchar>
		counter++;
    251c:	89 81       	ldd	r24, Y+1	; 0x01
    251e:	9a 81       	ldd	r25, Y+2	; 0x02
    2520:	01 96       	adiw	r24, 0x01	; 1
    2522:	9a 83       	std	Y+2, r25	; 0x02
    2524:	89 83       	std	Y+1, r24	; 0x01
    2526:	e6 cf       	rjmp	.-52     	; 0x24f4 <UART_sendstring+0x14>

	}}
    2528:	0f 90       	pop	r0
    252a:	0f 90       	pop	r0
    252c:	0f 90       	pop	r0
    252e:	0f 90       	pop	r0
    2530:	cf 91       	pop	r28
    2532:	df 91       	pop	r29
    2534:	08 95       	ret

00002536 <UART_Transmit>:
void UART_Transmit(unsigned char data)
{
    2536:	df 93       	push	r29
    2538:	cf 93       	push	r28
    253a:	0f 92       	push	r0
    253c:	cd b7       	in	r28, 0x3d	; 61
    253e:	de b7       	in	r29, 0x3e	; 62
    2540:	89 83       	std	Y+1, r24	; 0x01
while(!(UCSRA&(1<<UDRE)));
    2542:	eb e2       	ldi	r30, 0x2B	; 43
    2544:	f0 e0       	ldi	r31, 0x00	; 0
    2546:	80 81       	ld	r24, Z
    2548:	88 2f       	mov	r24, r24
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	80 72       	andi	r24, 0x20	; 32
    254e:	90 70       	andi	r25, 0x00	; 0
    2550:	00 97       	sbiw	r24, 0x00	; 0
    2552:	b9 f3       	breq	.-18     	; 0x2542 <UART_Transmit+0xc>
 UDR=data;
    2554:	ec e2       	ldi	r30, 0x2C	; 44
    2556:	f0 e0       	ldi	r31, 0x00	; 0
    2558:	89 81       	ldd	r24, Y+1	; 0x01
    255a:	80 83       	st	Z, r24

}
    255c:	0f 90       	pop	r0
    255e:	cf 91       	pop	r28
    2560:	df 91       	pop	r29
    2562:	08 95       	ret

00002564 <UART_Recieve>:
unsigned char UART_Recieve(void){
    2564:	df 93       	push	r29
    2566:	cf 93       	push	r28
    2568:	cd b7       	in	r28, 0x3d	; 61
    256a:	de b7       	in	r29, 0x3e	; 62
	while(!(UCSRA&(1<<RXC)));
    256c:	eb e2       	ldi	r30, 0x2B	; 43
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	80 81       	ld	r24, Z
    2572:	88 23       	and	r24, r24
    2574:	dc f7       	brge	.-10     	; 0x256c <UART_Recieve+0x8>
	return UDR;
    2576:	ec e2       	ldi	r30, 0x2C	; 44
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z

}
    257c:	cf 91       	pop	r28
    257e:	df 91       	pop	r29
    2580:	08 95       	ret

00002582 <__prologue_saves__>:
    2582:	2f 92       	push	r2
    2584:	3f 92       	push	r3
    2586:	4f 92       	push	r4
    2588:	5f 92       	push	r5
    258a:	6f 92       	push	r6
    258c:	7f 92       	push	r7
    258e:	8f 92       	push	r8
    2590:	9f 92       	push	r9
    2592:	af 92       	push	r10
    2594:	bf 92       	push	r11
    2596:	cf 92       	push	r12
    2598:	df 92       	push	r13
    259a:	ef 92       	push	r14
    259c:	ff 92       	push	r15
    259e:	0f 93       	push	r16
    25a0:	1f 93       	push	r17
    25a2:	cf 93       	push	r28
    25a4:	df 93       	push	r29
    25a6:	cd b7       	in	r28, 0x3d	; 61
    25a8:	de b7       	in	r29, 0x3e	; 62
    25aa:	ca 1b       	sub	r28, r26
    25ac:	db 0b       	sbc	r29, r27
    25ae:	0f b6       	in	r0, 0x3f	; 63
    25b0:	f8 94       	cli
    25b2:	de bf       	out	0x3e, r29	; 62
    25b4:	0f be       	out	0x3f, r0	; 63
    25b6:	cd bf       	out	0x3d, r28	; 61
    25b8:	09 94       	ijmp

000025ba <__epilogue_restores__>:
    25ba:	2a 88       	ldd	r2, Y+18	; 0x12
    25bc:	39 88       	ldd	r3, Y+17	; 0x11
    25be:	48 88       	ldd	r4, Y+16	; 0x10
    25c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    25c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    25c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    25c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    25c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    25ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    25cc:	b9 84       	ldd	r11, Y+9	; 0x09
    25ce:	c8 84       	ldd	r12, Y+8	; 0x08
    25d0:	df 80       	ldd	r13, Y+7	; 0x07
    25d2:	ee 80       	ldd	r14, Y+6	; 0x06
    25d4:	fd 80       	ldd	r15, Y+5	; 0x05
    25d6:	0c 81       	ldd	r16, Y+4	; 0x04
    25d8:	1b 81       	ldd	r17, Y+3	; 0x03
    25da:	aa 81       	ldd	r26, Y+2	; 0x02
    25dc:	b9 81       	ldd	r27, Y+1	; 0x01
    25de:	ce 0f       	add	r28, r30
    25e0:	d1 1d       	adc	r29, r1
    25e2:	0f b6       	in	r0, 0x3f	; 63
    25e4:	f8 94       	cli
    25e6:	de bf       	out	0x3e, r29	; 62
    25e8:	0f be       	out	0x3f, r0	; 63
    25ea:	cd bf       	out	0x3d, r28	; 61
    25ec:	ed 01       	movw	r28, r26
    25ee:	08 95       	ret

000025f0 <_exit>:
    25f0:	f8 94       	cli

000025f2 <__stop_program>:
    25f2:	ff cf       	rjmp	.-2      	; 0x25f2 <__stop_program>
